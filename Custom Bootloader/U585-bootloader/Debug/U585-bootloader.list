
U585-bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2a0  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e7  0800a4d8  0800a4d8  0000b4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a6c0  0800a6c0  0000b6c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a6c8  0800a6c8  0000b6c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a6cc  0800a6cc  0000b6cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000084  20000000  0800a6d0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004b4  20000084  0800a754  0000c084  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000538  0800a754  0000c538  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000c084  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015dc1  00000000  00000000  0000c0ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000341b  00000000  00000000  00021e7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001180  00000000  00000000  00025298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d6b  00000000  00000000  00026418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034cef  00000000  00000000  00027183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000175a3  00000000  00000000  0005be72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013ffcd  00000000  00000000  00073415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b33e2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004f78  00000000  00000000  001b3428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008d  00000000  00000000  001b83a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000084 	.word	0x20000084
 8000254:	00000000 	.word	0x00000000
 8000258:	0800a4c0 	.word	0x0800a4c0

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000088 	.word	0x20000088
 8000274:	0800a4c0 	.word	0x0800a4c0

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000288:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800028c:	f000 b9b0 	b.w	80005f0 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	4688      	mov	r8, r1
 80002b0:	4604      	mov	r4, r0
 80002b2:	468e      	mov	lr, r1
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d14a      	bne.n	800034e <__udivmoddi4+0xa6>
 80002b8:	428a      	cmp	r2, r1
 80002ba:	4617      	mov	r7, r2
 80002bc:	d95f      	bls.n	800037e <__udivmoddi4+0xd6>
 80002be:	fab2 f682 	clz	r6, r2
 80002c2:	b14e      	cbz	r6, 80002d8 <__udivmoddi4+0x30>
 80002c4:	f1c6 0320 	rsb	r3, r6, #32
 80002c8:	fa01 fe06 	lsl.w	lr, r1, r6
 80002cc:	40b7      	lsls	r7, r6
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	ea43 0e0e 	orr.w	lr, r3, lr
 80002d8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002dc:	fa1f fc87 	uxth.w	ip, r7
 80002e0:	0c23      	lsrs	r3, r4, #16
 80002e2:	fbbe f1f8 	udiv	r1, lr, r8
 80002e6:	fb08 ee11 	mls	lr, r8, r1, lr
 80002ea:	fb01 f20c 	mul.w	r2, r1, ip
 80002ee:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d907      	bls.n	8000306 <__udivmoddi4+0x5e>
 80002f6:	18fb      	adds	r3, r7, r3
 80002f8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x5c>
 80002fe:	429a      	cmp	r2, r3
 8000300:	f200 8154 	bhi.w	80005ac <__udivmoddi4+0x304>
 8000304:	4601      	mov	r1, r0
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	b2a2      	uxth	r2, r4
 800030a:	fbb3 f0f8 	udiv	r0, r3, r8
 800030e:	fb08 3310 	mls	r3, r8, r0, r3
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800031a:	4594      	cmp	ip, r2
 800031c:	d90b      	bls.n	8000336 <__udivmoddi4+0x8e>
 800031e:	18ba      	adds	r2, r7, r2
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000324:	bf2c      	ite	cs
 8000326:	2401      	movcs	r4, #1
 8000328:	2400      	movcc	r4, #0
 800032a:	4594      	cmp	ip, r2
 800032c:	d902      	bls.n	8000334 <__udivmoddi4+0x8c>
 800032e:	2c00      	cmp	r4, #0
 8000330:	f000 813f 	beq.w	80005b2 <__udivmoddi4+0x30a>
 8000334:	4618      	mov	r0, r3
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	eba2 020c 	sub.w	r2, r2, ip
 800033e:	2100      	movs	r1, #0
 8000340:	b11d      	cbz	r5, 800034a <__udivmoddi4+0xa2>
 8000342:	40f2      	lsrs	r2, r6
 8000344:	2300      	movs	r3, #0
 8000346:	e9c5 2300 	strd	r2, r3, [r5]
 800034a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d905      	bls.n	800035e <__udivmoddi4+0xb6>
 8000352:	b10d      	cbz	r5, 8000358 <__udivmoddi4+0xb0>
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	2100      	movs	r1, #0
 800035a:	4608      	mov	r0, r1
 800035c:	e7f5      	b.n	800034a <__udivmoddi4+0xa2>
 800035e:	fab3 f183 	clz	r1, r3
 8000362:	2900      	cmp	r1, #0
 8000364:	d14e      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000366:	4543      	cmp	r3, r8
 8000368:	f0c0 8112 	bcc.w	8000590 <__udivmoddi4+0x2e8>
 800036c:	4282      	cmp	r2, r0
 800036e:	f240 810f 	bls.w	8000590 <__udivmoddi4+0x2e8>
 8000372:	4608      	mov	r0, r1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e8      	beq.n	800034a <__udivmoddi4+0xa2>
 8000378:	e9c5 4e00 	strd	r4, lr, [r5]
 800037c:	e7e5      	b.n	800034a <__udivmoddi4+0xa2>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f000 80ac 	beq.w	80004dc <__udivmoddi4+0x234>
 8000384:	fab2 f682 	clz	r6, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	f040 80bb 	bne.w	8000504 <__udivmoddi4+0x25c>
 800038e:	1a8b      	subs	r3, r1, r2
 8000390:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000394:	b2bc      	uxth	r4, r7
 8000396:	2101      	movs	r1, #1
 8000398:	0c02      	lsrs	r2, r0, #16
 800039a:	b280      	uxth	r0, r0
 800039c:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003a8:	fb04 f20c 	mul.w	r2, r4, ip
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d90e      	bls.n	80003ce <__udivmoddi4+0x126>
 80003b0:	18fb      	adds	r3, r7, r3
 80003b2:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	429a      	cmp	r2, r3
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80ec 	beq.w	80005a4 <__udivmoddi4+0x2fc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f8fe 	udiv	r8, r3, lr
 80003d4:	fb0e 3318 	mls	r3, lr, r8, r3
 80003d8:	fb04 f408 	mul.w	r4, r4, r8
 80003dc:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003e0:	4294      	cmp	r4, r2
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x154>
 80003e4:	18ba      	adds	r2, r7, r2
 80003e6:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80003ea:	bf2c      	ite	cs
 80003ec:	2001      	movcs	r0, #1
 80003ee:	2000      	movcc	r0, #0
 80003f0:	4294      	cmp	r4, r2
 80003f2:	d902      	bls.n	80003fa <__udivmoddi4+0x152>
 80003f4:	2800      	cmp	r0, #0
 80003f6:	f000 80d1 	beq.w	800059c <__udivmoddi4+0x2f4>
 80003fa:	4698      	mov	r8, r3
 80003fc:	1b12      	subs	r2, r2, r4
 80003fe:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa08 f401 	lsl.w	r4, r8, r1
 800040e:	fa00 f901 	lsl.w	r9, r0, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	fa28 f806 	lsr.w	r8, r8, r6
 800041a:	408a      	lsls	r2, r1
 800041c:	431f      	orrs	r7, r3
 800041e:	fa20 f306 	lsr.w	r3, r0, r6
 8000422:	0c38      	lsrs	r0, r7, #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fa1f fc87 	uxth.w	ip, r7
 800042a:	0c1c      	lsrs	r4, r3, #16
 800042c:	fbb8 fef0 	udiv	lr, r8, r0
 8000430:	fb00 881e 	mls	r8, r0, lr, r8
 8000434:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000438:	fb0e f80c 	mul.w	r8, lr, ip
 800043c:	45a0      	cmp	r8, r4
 800043e:	d90e      	bls.n	800045e <__udivmoddi4+0x1b6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	bf2c      	ite	cs
 8000448:	f04f 0b01 	movcs.w	fp, #1
 800044c:	f04f 0b00 	movcc.w	fp, #0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d903      	bls.n	800045c <__udivmoddi4+0x1b4>
 8000454:	f1bb 0f00 	cmp.w	fp, #0
 8000458:	f000 80b8 	beq.w	80005cc <__udivmoddi4+0x324>
 800045c:	46d6      	mov	lr, sl
 800045e:	eba4 0408 	sub.w	r4, r4, r8
 8000462:	fa1f f883 	uxth.w	r8, r3
 8000466:	fbb4 f3f0 	udiv	r3, r4, r0
 800046a:	fb00 4413 	mls	r4, r0, r3, r4
 800046e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000472:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000476:	45a4      	cmp	ip, r4
 8000478:	d90e      	bls.n	8000498 <__udivmoddi4+0x1f0>
 800047a:	193c      	adds	r4, r7, r4
 800047c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000480:	bf2c      	ite	cs
 8000482:	f04f 0801 	movcs.w	r8, #1
 8000486:	f04f 0800 	movcc.w	r8, #0
 800048a:	45a4      	cmp	ip, r4
 800048c:	d903      	bls.n	8000496 <__udivmoddi4+0x1ee>
 800048e:	f1b8 0f00 	cmp.w	r8, #0
 8000492:	f000 809f 	beq.w	80005d4 <__udivmoddi4+0x32c>
 8000496:	4603      	mov	r3, r0
 8000498:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800049c:	eba4 040c 	sub.w	r4, r4, ip
 80004a0:	fba0 ec02 	umull	lr, ip, r0, r2
 80004a4:	4564      	cmp	r4, ip
 80004a6:	4673      	mov	r3, lr
 80004a8:	46e0      	mov	r8, ip
 80004aa:	d302      	bcc.n	80004b2 <__udivmoddi4+0x20a>
 80004ac:	d107      	bne.n	80004be <__udivmoddi4+0x216>
 80004ae:	45f1      	cmp	r9, lr
 80004b0:	d205      	bcs.n	80004be <__udivmoddi4+0x216>
 80004b2:	ebbe 0302 	subs.w	r3, lr, r2
 80004b6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ba:	3801      	subs	r0, #1
 80004bc:	46e0      	mov	r8, ip
 80004be:	b15d      	cbz	r5, 80004d8 <__udivmoddi4+0x230>
 80004c0:	ebb9 0203 	subs.w	r2, r9, r3
 80004c4:	eb64 0408 	sbc.w	r4, r4, r8
 80004c8:	fa04 f606 	lsl.w	r6, r4, r6
 80004cc:	fa22 f301 	lsr.w	r3, r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	431e      	orrs	r6, r3
 80004d4:	e9c5 6400 	strd	r6, r4, [r5]
 80004d8:	2100      	movs	r1, #0
 80004da:	e736      	b.n	800034a <__udivmoddi4+0xa2>
 80004dc:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e0:	0c01      	lsrs	r1, r0, #16
 80004e2:	4614      	mov	r4, r2
 80004e4:	b280      	uxth	r0, r0
 80004e6:	4696      	mov	lr, r2
 80004e8:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004ec:	2620      	movs	r6, #32
 80004ee:	4690      	mov	r8, r2
 80004f0:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 80004f4:	4610      	mov	r0, r2
 80004f6:	fbb1 f1f2 	udiv	r1, r1, r2
 80004fa:	eba3 0308 	sub.w	r3, r3, r8
 80004fe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000502:	e74b      	b.n	800039c <__udivmoddi4+0xf4>
 8000504:	40b7      	lsls	r7, r6
 8000506:	f1c6 0320 	rsb	r3, r6, #32
 800050a:	fa01 f206 	lsl.w	r2, r1, r6
 800050e:	fa21 f803 	lsr.w	r8, r1, r3
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	fa20 f303 	lsr.w	r3, r0, r3
 800051a:	b2bc      	uxth	r4, r7
 800051c:	40b0      	lsls	r0, r6
 800051e:	4313      	orrs	r3, r2
 8000520:	0c02      	lsrs	r2, r0, #16
 8000522:	0c19      	lsrs	r1, r3, #16
 8000524:	b280      	uxth	r0, r0
 8000526:	fbb8 f9fe 	udiv	r9, r8, lr
 800052a:	fb0e 8819 	mls	r8, lr, r9, r8
 800052e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	4588      	cmp	r8, r1
 8000538:	d951      	bls.n	80005de <__udivmoddi4+0x336>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
 8000540:	bf2c      	ite	cs
 8000542:	f04f 0a01 	movcs.w	sl, #1
 8000546:	f04f 0a00 	movcc.w	sl, #0
 800054a:	4588      	cmp	r8, r1
 800054c:	d902      	bls.n	8000554 <__udivmoddi4+0x2ac>
 800054e:	f1ba 0f00 	cmp.w	sl, #0
 8000552:	d031      	beq.n	80005b8 <__udivmoddi4+0x310>
 8000554:	eba1 0108 	sub.w	r1, r1, r8
 8000558:	fbb1 f9fe 	udiv	r9, r1, lr
 800055c:	fb09 f804 	mul.w	r8, r9, r4
 8000560:	fb0e 1119 	mls	r1, lr, r9, r1
 8000564:	b29b      	uxth	r3, r3
 8000566:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056a:	4543      	cmp	r3, r8
 800056c:	d235      	bcs.n	80005da <__udivmoddi4+0x332>
 800056e:	18fb      	adds	r3, r7, r3
 8000570:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000574:	bf2c      	ite	cs
 8000576:	f04f 0a01 	movcs.w	sl, #1
 800057a:	f04f 0a00 	movcc.w	sl, #0
 800057e:	4543      	cmp	r3, r8
 8000580:	d2bb      	bcs.n	80004fa <__udivmoddi4+0x252>
 8000582:	f1ba 0f00 	cmp.w	sl, #0
 8000586:	d1b8      	bne.n	80004fa <__udivmoddi4+0x252>
 8000588:	f1a9 0102 	sub.w	r1, r9, #2
 800058c:	443b      	add	r3, r7
 800058e:	e7b4      	b.n	80004fa <__udivmoddi4+0x252>
 8000590:	1a84      	subs	r4, r0, r2
 8000592:	eb68 0203 	sbc.w	r2, r8, r3
 8000596:	2001      	movs	r0, #1
 8000598:	4696      	mov	lr, r2
 800059a:	e6eb      	b.n	8000374 <__udivmoddi4+0xcc>
 800059c:	443a      	add	r2, r7
 800059e:	f1a8 0802 	sub.w	r8, r8, #2
 80005a2:	e72b      	b.n	80003fc <__udivmoddi4+0x154>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	443b      	add	r3, r7
 80005aa:	e710      	b.n	80003ce <__udivmoddi4+0x126>
 80005ac:	3902      	subs	r1, #2
 80005ae:	443b      	add	r3, r7
 80005b0:	e6a9      	b.n	8000306 <__udivmoddi4+0x5e>
 80005b2:	443a      	add	r2, r7
 80005b4:	3802      	subs	r0, #2
 80005b6:	e6be      	b.n	8000336 <__udivmoddi4+0x8e>
 80005b8:	eba7 0808 	sub.w	r8, r7, r8
 80005bc:	f1a9 0c02 	sub.w	ip, r9, #2
 80005c0:	4441      	add	r1, r8
 80005c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c6:	fb09 f804 	mul.w	r8, r9, r4
 80005ca:	e7c9      	b.n	8000560 <__udivmoddi4+0x2b8>
 80005cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80005d0:	443c      	add	r4, r7
 80005d2:	e744      	b.n	800045e <__udivmoddi4+0x1b6>
 80005d4:	3b02      	subs	r3, #2
 80005d6:	443c      	add	r4, r7
 80005d8:	e75e      	b.n	8000498 <__udivmoddi4+0x1f0>
 80005da:	4649      	mov	r1, r9
 80005dc:	e78d      	b.n	80004fa <__udivmoddi4+0x252>
 80005de:	eba1 0108 	sub.w	r1, r1, r8
 80005e2:	46cc      	mov	ip, r9
 80005e4:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e8:	fb09 f804 	mul.w	r8, r9, r4
 80005ec:	e7b8      	b.n	8000560 <__udivmoddi4+0x2b8>
 80005ee:	bf00      	nop

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <erase_bank>:
#include "stm32u5xx_hal.h"
#include "stdio.h"


void erase_bank(uint32_t memory_address, uint16_t num_pages)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	460b      	mov	r3, r1
 80005fe:	807b      	strh	r3, [r7, #2]
    HAL_FLASH_Unlock();
 8000600:	f002 fcd4 	bl	8002fac <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef erase = {0};
 8000604:	f107 0310 	add.w	r3, r7, #16
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
    erase.TypeErase = FLASH_TYPEERASE_PAGES;
 8000612:	2302      	movs	r3, #2
 8000614:	613b      	str	r3, [r7, #16]
    // Page number = offset from FLASH_BASE divided by page size
    erase.Page      = (memory_address - FLASH_BASE) / FLASH_PAGE_SIZE;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 800061c:	0b5b      	lsrs	r3, r3, #13
 800061e:	61bb      	str	r3, [r7, #24]
    erase.NbPages   = num_pages;
 8000620:	887b      	ldrh	r3, [r7, #2]
 8000622:	61fb      	str	r3, [r7, #28]
    erase.Banks     = FLASH_BANK_OF(memory_address);
 8000624:	4b16      	ldr	r3, [pc, #88]	@ (8000680 <erase_bank+0x8c>)
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800062c:	4293      	cmp	r3, r2
 800062e:	d00d      	beq.n	800064c <erase_bank+0x58>
 8000630:	4b13      	ldr	r3, [pc, #76]	@ (8000680 <erase_bank+0x8c>)
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d006      	beq.n	8000646 <erase_bank+0x52>
 8000638:	4b11      	ldr	r3, [pc, #68]	@ (8000680 <erase_bank+0x8c>)
 800063a:	881b      	ldrh	r3, [r3, #0]
 800063c:	029b      	lsls	r3, r3, #10
 800063e:	085b      	lsrs	r3, r3, #1
 8000640:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8000644:	e004      	b.n	8000650 <erase_bank+0x5c>
 8000646:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 800064a:	e001      	b.n	8000650 <erase_bank+0x5c>
 800064c:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	4293      	cmp	r3, r2
 8000654:	d901      	bls.n	800065a <erase_bank+0x66>
 8000656:	2301      	movs	r3, #1
 8000658:	e000      	b.n	800065c <erase_bank+0x68>
 800065a:	2302      	movs	r3, #2
 800065c:	617b      	str	r3, [r7, #20]

    uint32_t page_error = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
    if (HAL_FLASHEx_Erase(&erase, &page_error) != HAL_OK)
 8000662:	f107 020c 	add.w	r2, r7, #12
 8000666:	f107 0310 	add.w	r3, r7, #16
 800066a:	4611      	mov	r1, r2
 800066c:	4618      	mov	r0, r3
 800066e:	f002 fde3 	bl	8003238 <HAL_FLASHEx_Erase>
    {
        // handle error: page_error holds the failing page index
    }

    HAL_FLASH_Lock();
 8000672:	f002 fcbd 	bl	8002ff0 <HAL_FLASH_Lock>
}
 8000676:	bf00      	nop
 8000678:	3720      	adds	r7, #32
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	0bfa07a0 	.word	0x0bfa07a0

08000684 <store_flash_memory>:


void store_flash_memory(uint32_t memory_address, uint8_t *data, uint16_t length)
{
 8000684:	b590      	push	{r4, r7, lr}
 8000686:	b08b      	sub	sp, #44	@ 0x2c
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	4613      	mov	r3, r2
 8000690:	80fb      	strh	r3, [r7, #6]
    HAL_FLASH_Unlock();
 8000692:	f002 fc8b 	bl	8002fac <HAL_FLASH_Unlock>
    uint32_t offset = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t  tmp[16];

    // 1) full 16-byte chunks
    while (length - offset >= 16)
 800069a:	e015      	b.n	80006c8 <store_flash_memory+0x44>
    {
        memcpy(tmp, data + offset, 16);
 800069c:	68ba      	ldr	r2, [r7, #8]
 800069e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006a0:	4413      	add	r3, r2
 80006a2:	f107 0410 	add.w	r4, r7, #16
 80006a6:	6818      	ldr	r0, [r3, #0]
 80006a8:	6859      	ldr	r1, [r3, #4]
 80006aa:	689a      	ldr	r2, [r3, #8]
 80006ac:	68db      	ldr	r3, [r3, #12]
 80006ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        // pass the address of tmp (16 bytes) to the quad-word API
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD,
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006b4:	4413      	add	r3, r2
 80006b6:	f107 0210 	add.w	r2, r7, #16
 80006ba:	4619      	mov	r1, r3
 80006bc:	2001      	movs	r0, #1
 80006be:	f002 fc2b 	bl	8002f18 <HAL_FLASH_Program>
        		memory_address + offset,
                          (uint64_t)(uintptr_t)tmp);
        offset += 16;
 80006c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006c4:	3310      	adds	r3, #16
 80006c6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (length - offset >= 16)
 80006c8:	88fa      	ldrh	r2, [r7, #6]
 80006ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	2b0f      	cmp	r3, #15
 80006d0:	d8e4      	bhi.n	800069c <store_flash_memory+0x18>
    }

    if (length > offset)
 80006d2:	88fb      	ldrh	r3, [r7, #6]
 80006d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d21c      	bcs.n	8000714 <store_flash_memory+0x90>
    {
        uint32_t rem = length - offset;
 80006da:	88fa      	ldrh	r2, [r7, #6]
 80006dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	623b      	str	r3, [r7, #32]
        memset(tmp, 0xFF, sizeof(tmp));
 80006e2:	f107 0310 	add.w	r3, r7, #16
 80006e6:	2210      	movs	r2, #16
 80006e8:	21ff      	movs	r1, #255	@ 0xff
 80006ea:	4618      	mov	r0, r3
 80006ec:	f009 f870 	bl	80097d0 <memset>
        memcpy(tmp, data + offset, rem);
 80006f0:	68ba      	ldr	r2, [r7, #8]
 80006f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006f4:	18d1      	adds	r1, r2, r3
 80006f6:	f107 0310 	add.w	r3, r7, #16
 80006fa:	6a3a      	ldr	r2, [r7, #32]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f009 f89c 	bl	800983a <memcpy>

        HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD,
 8000702:	68fa      	ldr	r2, [r7, #12]
 8000704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000706:	4413      	add	r3, r2
 8000708:	f107 0210 	add.w	r2, r7, #16
 800070c:	4619      	mov	r1, r3
 800070e:	2001      	movs	r0, #1
 8000710:	f002 fc02 	bl	8002f18 <HAL_FLASH_Program>
        		memory_address + offset,
                          (uint64_t)(uintptr_t)tmp);
    }

    HAL_FLASH_Lock();
 8000714:	f002 fc6c 	bl	8002ff0 <HAL_FLASH_Lock>
}
 8000718:	bf00      	nop
 800071a:	372c      	adds	r7, #44	@ 0x2c
 800071c:	46bd      	mov	sp, r7
 800071e:	bd90      	pop	{r4, r7, pc}

08000720 <toggle_bank>:


void toggle_bank(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08e      	sub	sp, #56	@ 0x38
 8000724:	af00      	add	r7, sp, #0
    FLASH_OBProgramInitTypeDef ob = {0};
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	2234      	movs	r2, #52	@ 0x34
 800072a:	2100      	movs	r1, #0
 800072c:	4618      	mov	r0, r3
 800072e:	f009 f84f 	bl	80097d0 <memset>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPTWERR);
 8000732:	4b16      	ldr	r3, [pc, #88]	@ (800078c <toggle_bank+0x6c>)
 8000734:	f242 0201 	movw	r2, #8193	@ 0x2001
 8000738:	621a      	str	r2, [r3, #32]

    // 1) Unlock flash and option bytes
    HAL_FLASH_Unlock();
 800073a:	f002 fc37 	bl	8002fac <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP   |
 800073e:	4b13      	ldr	r3, [pc, #76]	@ (800078c <toggle_bank+0x6c>)
 8000740:	f242 0201 	movw	r2, #8193	@ 0x2001
 8000744:	621a      	str	r2, [r3, #32]
                           FLASH_FLAG_OPTWERR);
    HAL_FLASH_OB_Unlock();
 8000746:	f002 fc6d 	bl	8003024 <HAL_FLASH_OB_Unlock>

    // 2) Read current OB config
    HAL_FLASHEx_OBGetConfig(&ob);
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	4618      	mov	r0, r3
 800074e:	f002 fe5b 	bl	8003408 <HAL_FLASHEx_OBGetConfig>

    ob.OptionType  = OPTIONBYTE_USER;
 8000752:	2304      	movs	r3, #4
 8000754:	607b      	str	r3, [r7, #4]
    ob.USERType    = OB_USER_SWAP_BANK;
 8000756:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800075a:	61fb      	str	r3, [r7, #28]
    ob.USERConfig  = (ob.USERConfig & OB_SWAP_BANK_ENABLE)
 800075c:	6a3b      	ldr	r3, [r7, #32]
 800075e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
                       ? OB_SWAP_BANK_DISABLE
                       : OB_SWAP_BANK_ENABLE;
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <toggle_bank+0x4a>
 8000766:	2300      	movs	r3, #0
 8000768:	e001      	b.n	800076e <toggle_bank+0x4e>
 800076a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
    ob.USERConfig  = (ob.USERConfig & OB_SWAP_BANK_ENABLE)
 800076e:	623b      	str	r3, [r7, #32]
    HAL_FLASHEx_OBProgram(&ob);
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	4618      	mov	r0, r3
 8000774:	f002 fdd0 	bl	8003318 <HAL_FLASHEx_OBProgram>

    HAL_FLASH_OB_Launch();
 8000778:	f002 fc8e 	bl	8003098 <HAL_FLASH_OB_Launch>
    HAL_FLASH_OB_Lock();
 800077c:	f002 fc74 	bl	8003068 <HAL_FLASH_OB_Lock>
    HAL_FLASH_Lock();
 8000780:	f002 fc36 	bl	8002ff0 <HAL_FLASH_Lock>
}
 8000784:	bf00      	nop
 8000786:	3738      	adds	r7, #56	@ 0x38
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40022000 	.word	0x40022000

08000790 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000798:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800079c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80007a0:	f003 0301 	and.w	r3, r3, #1
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d013      	beq.n	80007d0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80007a8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80007ac:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80007b0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d00b      	beq.n	80007d0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80007b8:	e000      	b.n	80007bc <ITM_SendChar+0x2c>
    {
      __NOP();
 80007ba:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80007bc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d0f9      	beq.n	80007ba <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80007c6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	b2d2      	uxtb	r2, r2
 80007ce:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80007d0:	687b      	ldr	r3, [r7, #4]
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
	...

080007e0 <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	460b      	mov	r3, r1
 80007ea:	807b      	strh	r3, [r7, #2]
	uart_size = Size;
 80007ec:	4a09      	ldr	r2, [pc, #36]	@ (8000814 <HAL_UARTEx_RxEventCallback+0x34>)
 80007ee:	887b      	ldrh	r3, [r7, #2]
 80007f0:	8013      	strh	r3, [r2, #0]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, received_data, sizeof(received_data));
 80007f2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80007f6:	4908      	ldr	r1, [pc, #32]	@ (8000818 <HAL_UARTEx_RxEventCallback+0x38>)
 80007f8:	4808      	ldr	r0, [pc, #32]	@ (800081c <HAL_UARTEx_RxEventCallback+0x3c>)
 80007fa:	f008 fe14 	bl	8009426 <HAL_UARTEx_ReceiveToIdle_DMA>
	update_firmware(received_data, uart_size);
 80007fe:	4b05      	ldr	r3, [pc, #20]	@ (8000814 <HAL_UARTEx_RxEventCallback+0x34>)
 8000800:	881b      	ldrh	r3, [r3, #0]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	4619      	mov	r1, r3
 8000806:	4804      	ldr	r0, [pc, #16]	@ (8000818 <HAL_UARTEx_RxEventCallback+0x38>)
 8000808:	f000 fca8 	bl	800115c <update_firmware>
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	200003d8 	.word	0x200003d8
 8000818:	20000248 	.word	0x20000248
 800081c:	200000c4 	.word	0x200000c4

08000820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000824:	f000 ffc2 	bl	80017ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 8000828:	f000 f890 	bl	800094c <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 800082c:	f000 f832 	bl	8000894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000830:	f000 f944 	bl	8000abc <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000834:	f000 f8ba 	bl	80009ac <MX_GPDMA1_Init>
  MX_ICACHE_Init();
 8000838:	f000 f8e0 	bl	80009fc <MX_ICACHE_Init>
  MX_CRC_Init();
 800083c:	f000 f894 	bl	8000968 <MX_CRC_Init>
  MX_USART3_UART_Init();
 8000840:	f000 f8f0 	bl	8000a24 <MX_USART3_UART_Init>


  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, received_data, sizeof(received_data));
 8000844:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000848:	490f      	ldr	r1, [pc, #60]	@ (8000888 <main+0x68>)
 800084a:	4810      	ldr	r0, [pc, #64]	@ (800088c <main+0x6c>)
 800084c:	f008 fdeb 	bl	8009426 <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000850:	2201      	movs	r2, #1
 8000852:	2180      	movs	r1, #128	@ 0x80
 8000854:	480e      	ldr	r0, [pc, #56]	@ (8000890 <main+0x70>)
 8000856:	f003 fafd 	bl	8003e54 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800085a:	2201      	movs	r2, #1
 800085c:	2140      	movs	r1, #64	@ 0x40
 800085e:	480c      	ldr	r0, [pc, #48]	@ (8000890 <main+0x70>)
 8000860:	f003 faf8 	bl	8003e54 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	2180      	movs	r1, #128	@ 0x80
 8000868:	4809      	ldr	r0, [pc, #36]	@ (8000890 <main+0x70>)
 800086a:	f003 faf3 	bl	8003e54 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 800086e:	2064      	movs	r0, #100	@ 0x64
 8000870:	f001 f862 	bl	8001938 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000874:	2201      	movs	r2, #1
 8000876:	2180      	movs	r1, #128	@ 0x80
 8000878:	4805      	ldr	r0, [pc, #20]	@ (8000890 <main+0x70>)
 800087a:	f003 faeb 	bl	8003e54 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 800087e:	2064      	movs	r0, #100	@ 0x64
 8000880:	f001 f85a 	bl	8001938 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000884:	bf00      	nop
 8000886:	e7ed      	b.n	8000864 <main+0x44>
 8000888:	20000248 	.word	0x20000248
 800088c:	200000c4 	.word	0x200000c4
 8000890:	42021c00 	.word	0x42021c00

08000894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b09e      	sub	sp, #120	@ 0x78
 8000898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089a:	f107 0318 	add.w	r3, r7, #24
 800089e:	2260      	movs	r2, #96	@ 0x60
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f008 ff94 	bl	80097d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a8:	463b      	mov	r3, r7
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]
 80008b6:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008b8:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80008bc:	f003 fb12 	bl	8003ee4 <HAL_PWREx_ControlVoltageScaling>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0x36>
  {
    Error_Handler();
 80008c6:	f000 fbd1 	bl	800106c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80008ca:	2310      	movs	r3, #16
 80008cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008ce:	2301      	movs	r3, #1
 80008d0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80008d2:	2310      	movs	r3, #16
 80008d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80008d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008dc:	2302      	movs	r3, #2
 80008de:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008e0:	2301      	movs	r3, #1
 80008e2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008e8:	2301      	movs	r3, #1
 80008ea:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 80008ec:	2350      	movs	r3, #80	@ 0x50
 80008ee:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008f0:	2302      	movs	r3, #2
 80008f2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008f4:	2302      	movs	r3, #2
 80008f6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008f8:	2302      	movs	r3, #2
 80008fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000904:	f107 0318 	add.w	r3, r7, #24
 8000908:	4618      	mov	r0, r3
 800090a:	f003 fbd7 	bl	80040bc <HAL_RCC_OscConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000914:	f000 fbaa 	bl	800106c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000918:	231f      	movs	r3, #31
 800091a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091c:	2303      	movs	r3, #3
 800091e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000930:	463b      	mov	r3, r7
 8000932:	2104      	movs	r1, #4
 8000934:	4618      	mov	r0, r3
 8000936:	f004 fa9d 	bl	8004e74 <HAL_RCC_ClockConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000940:	f000 fb94 	bl	800106c <Error_Handler>
  }
}
 8000944:	bf00      	nop
 8000946:	3778      	adds	r7, #120	@ 0x78
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000950:	f003 fba4 	bl	800409c <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000954:	2002      	movs	r0, #2
 8000956:	f003 fb51 	bl	8003ffc <HAL_PWREx_ConfigSupply>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000960:	f000 fb84 	bl	800106c <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}

08000968 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800096c:	4b0d      	ldr	r3, [pc, #52]	@ (80009a4 <MX_CRC_Init+0x3c>)
 800096e:	4a0e      	ldr	r2, [pc, #56]	@ (80009a8 <MX_CRC_Init+0x40>)
 8000970:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000972:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <MX_CRC_Init+0x3c>)
 8000974:	2200      	movs	r2, #0
 8000976:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000978:	4b0a      	ldr	r3, [pc, #40]	@ (80009a4 <MX_CRC_Init+0x3c>)
 800097a:	2200      	movs	r2, #0
 800097c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800097e:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <MX_CRC_Init+0x3c>)
 8000980:	2200      	movs	r2, #0
 8000982:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000984:	4b07      	ldr	r3, [pc, #28]	@ (80009a4 <MX_CRC_Init+0x3c>)
 8000986:	2200      	movs	r2, #0
 8000988:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800098a:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <MX_CRC_Init+0x3c>)
 800098c:	2203      	movs	r2, #3
 800098e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000990:	4804      	ldr	r0, [pc, #16]	@ (80009a4 <MX_CRC_Init+0x3c>)
 8000992:	f001 f989 	bl	8001ca8 <HAL_CRC_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800099c:	f000 fb66 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	200000a0 	.word	0x200000a0
 80009a8:	40023000 	.word	0x40023000

080009ac <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80009b2:	4b11      	ldr	r3, [pc, #68]	@ (80009f8 <MX_GPDMA1_Init+0x4c>)
 80009b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009b8:	4a0f      	ldr	r2, [pc, #60]	@ (80009f8 <MX_GPDMA1_Init+0x4c>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80009c2:	4b0d      	ldr	r3, [pc, #52]	@ (80009f8 <MX_GPDMA1_Init+0x4c>)
 80009c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel10_IRQn, 0, 0);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2100      	movs	r1, #0
 80009d4:	2052      	movs	r0, #82	@ 0x52
 80009d6:	f001 f88b 	bl	8001af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel10_IRQn);
 80009da:	2052      	movs	r0, #82	@ 0x52
 80009dc:	f001 f8a2 	bl	8001b24 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel11_IRQn, 0, 0);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2100      	movs	r1, #0
 80009e4:	2053      	movs	r0, #83	@ 0x53
 80009e6:	f001 f883 	bl	8001af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel11_IRQn);
 80009ea:	2053      	movs	r0, #83	@ 0x53
 80009ec:	f001 f89a 	bl	8001b24 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	46020c00 	.word	0x46020c00

080009fc <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000a00:	2000      	movs	r0, #0
 8000a02:	f003 fa3f 	bl	8003e84 <HAL_ICACHE_ConfigAssociativityMode>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000a0c:	f000 fb2e 	bl	800106c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000a10:	f003 fa58 	bl	8003ec4 <HAL_ICACHE_Enable>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000a1a:	f000 fb27 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a28:	4b22      	ldr	r3, [pc, #136]	@ (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a2a:	4a23      	ldr	r2, [pc, #140]	@ (8000ab8 <MX_USART3_UART_Init+0x94>)
 8000a2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a2e:	4b21      	ldr	r3, [pc, #132]	@ (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a36:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a42:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a48:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4e:	4b19      	ldr	r3, [pc, #100]	@ (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a54:	4b17      	ldr	r3, [pc, #92]	@ (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5a:	4b16      	ldr	r3, [pc, #88]	@ (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a60:	4b14      	ldr	r3, [pc, #80]	@ (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a66:	4b13      	ldr	r3, [pc, #76]	@ (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a6c:	4811      	ldr	r0, [pc, #68]	@ (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a6e:	f007 fab1 	bl	8007fd4 <HAL_UART_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a78:	f000 faf8 	bl	800106c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	480d      	ldr	r0, [pc, #52]	@ (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a80:	f008 fc55 	bl	800932e <HAL_UARTEx_SetTxFifoThreshold>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a8a:	f000 faef 	bl	800106c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4808      	ldr	r0, [pc, #32]	@ (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a92:	f008 fc8a 	bl	80093aa <HAL_UARTEx_SetRxFifoThreshold>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a9c:	f000 fae6 	bl	800106c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000aa0:	4804      	ldr	r0, [pc, #16]	@ (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000aa2:	f008 fc0b 	bl	80092bc <HAL_UARTEx_DisableFifoMode>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000aac:	f000 fade 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	200000c4 	.word	0x200000c4
 8000ab8:	40004800 	.word	0x40004800

08000abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08e      	sub	sp, #56	@ 0x38
 8000ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ad2:	4bbe      	ldr	r3, [pc, #760]	@ (8000dcc <MX_GPIO_Init+0x310>)
 8000ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ad8:	4abc      	ldr	r2, [pc, #752]	@ (8000dcc <MX_GPIO_Init+0x310>)
 8000ada:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ade:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ae2:	4bba      	ldr	r3, [pc, #744]	@ (8000dcc <MX_GPIO_Init+0x310>)
 8000ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000aec:	623b      	str	r3, [r7, #32]
 8000aee:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af0:	4bb6      	ldr	r3, [pc, #728]	@ (8000dcc <MX_GPIO_Init+0x310>)
 8000af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000af6:	4ab5      	ldr	r2, [pc, #724]	@ (8000dcc <MX_GPIO_Init+0x310>)
 8000af8:	f043 0304 	orr.w	r3, r3, #4
 8000afc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b00:	4bb2      	ldr	r3, [pc, #712]	@ (8000dcc <MX_GPIO_Init+0x310>)
 8000b02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b06:	f003 0304 	and.w	r3, r3, #4
 8000b0a:	61fb      	str	r3, [r7, #28]
 8000b0c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	4baf      	ldr	r3, [pc, #700]	@ (8000dcc <MX_GPIO_Init+0x310>)
 8000b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b14:	4aad      	ldr	r2, [pc, #692]	@ (8000dcc <MX_GPIO_Init+0x310>)
 8000b16:	f043 0301 	orr.w	r3, r3, #1
 8000b1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b1e:	4bab      	ldr	r3, [pc, #684]	@ (8000dcc <MX_GPIO_Init+0x310>)
 8000b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b24:	f003 0301 	and.w	r3, r3, #1
 8000b28:	61bb      	str	r3, [r7, #24]
 8000b2a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b2c:	4ba7      	ldr	r3, [pc, #668]	@ (8000dcc <MX_GPIO_Init+0x310>)
 8000b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b32:	4aa6      	ldr	r2, [pc, #664]	@ (8000dcc <MX_GPIO_Init+0x310>)
 8000b34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b38:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b3c:	4ba3      	ldr	r3, [pc, #652]	@ (8000dcc <MX_GPIO_Init+0x310>)
 8000b3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b4a:	4ba0      	ldr	r3, [pc, #640]	@ (8000dcc <MX_GPIO_Init+0x310>)
 8000b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b50:	4a9e      	ldr	r2, [pc, #632]	@ (8000dcc <MX_GPIO_Init+0x310>)
 8000b52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b56:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b5a:	4b9c      	ldr	r3, [pc, #624]	@ (8000dcc <MX_GPIO_Init+0x310>)
 8000b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b68:	4b98      	ldr	r3, [pc, #608]	@ (8000dcc <MX_GPIO_Init+0x310>)
 8000b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b6e:	4a97      	ldr	r2, [pc, #604]	@ (8000dcc <MX_GPIO_Init+0x310>)
 8000b70:	f043 0302 	orr.w	r3, r3, #2
 8000b74:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b78:	4b94      	ldr	r3, [pc, #592]	@ (8000dcc <MX_GPIO_Init+0x310>)
 8000b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b86:	4b91      	ldr	r3, [pc, #580]	@ (8000dcc <MX_GPIO_Init+0x310>)
 8000b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b8c:	4a8f      	ldr	r2, [pc, #572]	@ (8000dcc <MX_GPIO_Init+0x310>)
 8000b8e:	f043 0308 	orr.w	r3, r3, #8
 8000b92:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b96:	4b8d      	ldr	r3, [pc, #564]	@ (8000dcc <MX_GPIO_Init+0x310>)
 8000b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b9c:	f003 0308 	and.w	r3, r3, #8
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ba4:	4b89      	ldr	r3, [pc, #548]	@ (8000dcc <MX_GPIO_Init+0x310>)
 8000ba6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000baa:	4a88      	ldr	r2, [pc, #544]	@ (8000dcc <MX_GPIO_Init+0x310>)
 8000bac:	f043 0310 	orr.w	r3, r3, #16
 8000bb0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bb4:	4b85      	ldr	r3, [pc, #532]	@ (8000dcc <MX_GPIO_Init+0x310>)
 8000bb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bba:	f003 0310 	and.w	r3, r3, #16
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bc2:	4b82      	ldr	r3, [pc, #520]	@ (8000dcc <MX_GPIO_Init+0x310>)
 8000bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bc8:	4a80      	ldr	r2, [pc, #512]	@ (8000dcc <MX_GPIO_Init+0x310>)
 8000bca:	f043 0320 	orr.w	r3, r3, #32
 8000bce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bd2:	4b7e      	ldr	r3, [pc, #504]	@ (8000dcc <MX_GPIO_Init+0x310>)
 8000bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bd8:	f003 0320 	and.w	r3, r3, #32
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_PWR_GPIO_Port, UCPD_PWR_Pin, GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2120      	movs	r1, #32
 8000be4:	487a      	ldr	r0, [pc, #488]	@ (8000dd0 <MX_GPIO_Init+0x314>)
 8000be6:	f003 f935 	bl	8003e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	21c2      	movs	r1, #194	@ 0xc2
 8000bee:	4879      	ldr	r0, [pc, #484]	@ (8000dd4 <MX_GPIO_Init+0x318>)
 8000bf0:	f003 f930 	bl	8003e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WRLS_WKUP_B_GPIO_Port, WRLS_WKUP_B_Pin, GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2140      	movs	r1, #64	@ 0x40
 8000bf8:	4877      	ldr	r0, [pc, #476]	@ (8000dd8 <MX_GPIO_Init+0x31c>)
 8000bfa:	f003 f92b 	bl	8003e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 8000c04:	4875      	ldr	r0, [pc, #468]	@ (8000ddc <MX_GPIO_Init+0x320>)
 8000c06:	f003 f925 	bl	8003e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WRLS_FLOW_Pin Mems_VLX_GPIO_Pin Mems_INT_LPS22HH_Pin */
  GPIO_InitStruct.Pin = WRLS_FLOW_Pin|Mems_VLX_GPIO_Pin|Mems_INT_LPS22HH_Pin;
 8000c0a:	f248 0324 	movw	r3, #32804	@ 0x8024
 8000c0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	486e      	ldr	r0, [pc, #440]	@ (8000dd8 <MX_GPIO_Init+0x31c>)
 8000c20:	f002 ff40 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : WRLS_UART4_RX_Pin WRLS_UART4_TX_Pin */
  GPIO_InitStruct.Pin = WRLS_UART4_RX_Pin|WRLS_UART4_TX_Pin;
 8000c24:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c36:	2308      	movs	r3, #8
 8000c38:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4867      	ldr	r0, [pc, #412]	@ (8000de0 <MX_GPIO_Init+0x324>)
 8000c42:	f002 ff2f 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_UCPD_CC1_Pin */
  GPIO_InitStruct.Pin = USB_UCPD_CC1_Pin;
 8000c46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_UCPD_CC1_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4862      	ldr	r0, [pc, #392]	@ (8000de4 <MX_GPIO_Init+0x328>)
 8000c5c:	f002 ff22 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCTOSPI_F_NCS_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_F_NCS_Pin;
 8000c60:	2320      	movs	r3, #32
 8000c62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8000c70:	2305      	movs	r3, #5
 8000c72:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OCTOSPI_F_NCS_GPIO_Port, &GPIO_InitStruct);
 8000c74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c78:	4619      	mov	r1, r3
 8000c7a:	485b      	ldr	r0, [pc, #364]	@ (8000de8 <MX_GPIO_Init+0x32c>)
 8000c7c:	f002 ff12 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCTOSPI_R_IO5_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_IO5_Pin;
 8000c80:	2301      	movs	r3, #1
 8000c82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8000c90:	2303      	movs	r3, #3
 8000c92:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OCTOSPI_R_IO5_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4853      	ldr	r0, [pc, #332]	@ (8000de8 <MX_GPIO_Init+0x32c>)
 8000c9c:	f002 ff02 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPI_F_IO7_Pin OCTOSPI_F_IO5_Pin OCTOSPI_F_IO6_Pin OCTOSPI_F_IO4_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_F_IO7_Pin|OCTOSPI_F_IO5_Pin|OCTOSPI_F_IO6_Pin|OCTOSPI_F_IO4_Pin;
 8000ca0:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8000ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8000cb2:	2305      	movs	r3, #5
 8000cb4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000cb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4845      	ldr	r0, [pc, #276]	@ (8000dd4 <MX_GPIO_Init+0x318>)
 8000cbe:	f002 fef1 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3_BOOT0_Pin */
  GPIO_InitStruct.Pin = PH3_BOOT0_Pin;
 8000cc2:	2308      	movs	r3, #8
 8000cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PH3_BOOT0_GPIO_Port, &GPIO_InitStruct);
 8000cce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	483f      	ldr	r0, [pc, #252]	@ (8000dd4 <MX_GPIO_Init+0x318>)
 8000cd6:	f002 fee5 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_PWR_Pin */
  GPIO_InitStruct.Pin = UCPD_PWR_Pin;
 8000cda:	2320      	movs	r3, #32
 8000cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(UCPD_PWR_GPIO_Port, &GPIO_InitStruct);
 8000cea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4837      	ldr	r0, [pc, #220]	@ (8000dd0 <MX_GPIO_Init+0x314>)
 8000cf2:	f002 fed7 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : WRLS_SPI2_MOSI_Pin WRLS_SPI2_MISO_Pin WRLS_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = WRLS_SPI2_MOSI_Pin|WRLS_SPI2_MISO_Pin|WRLS_SPI2_SCK_Pin;
 8000cf6:	231a      	movs	r3, #26
 8000cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d06:	2305      	movs	r3, #5
 8000d08:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4836      	ldr	r0, [pc, #216]	@ (8000dec <MX_GPIO_Init+0x330>)
 8000d12:	f002 fec7 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCTOSPI_R_DQS_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_DQS_Pin;
 8000d16:	2308      	movs	r3, #8
 8000d18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8000d26:	2303      	movs	r3, #3
 8000d28:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OCTOSPI_R_DQS_GPIO_Port, &GPIO_InitStruct);
 8000d2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d2e:	4619      	mov	r1, r3
 8000d30:	482f      	ldr	r0, [pc, #188]	@ (8000df0 <MX_GPIO_Init+0x334>)
 8000d32:	f002 feb7 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000d36:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d3c:	2312      	movs	r3, #18
 8000d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d48:	2304      	movs	r3, #4
 8000d4a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d50:	4619      	mov	r1, r3
 8000d52:	481f      	ldr	r0, [pc, #124]	@ (8000dd0 <MX_GPIO_Init+0x314>)
 8000d54:	f002 fea6 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCTOSPI_R_IO7_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_IO7_Pin;
 8000d58:	2380      	movs	r3, #128	@ 0x80
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000d68:	230a      	movs	r3, #10
 8000d6a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OCTOSPI_R_IO7_GPIO_Port, &GPIO_InitStruct);
 8000d6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d70:	4619      	mov	r1, r3
 8000d72:	481e      	ldr	r0, [pc, #120]	@ (8000dec <MX_GPIO_Init+0x330>)
 8000d74:	f002 fe96 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPI_F_IO0_Pin OCTOSPI_F_IO1_Pin OCTOSPI_F_IO2_Pin OCTOSPI_F_IO3_Pin
                           OCTOSPI_F_CLK_P_Pin OCTOSPI_F_DQS_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_F_IO0_Pin|OCTOSPI_F_IO1_Pin|OCTOSPI_F_IO2_Pin|OCTOSPI_F_IO3_Pin
 8000d78:	f241 031f 	movw	r3, #4127	@ 0x101f
 8000d7c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |OCTOSPI_F_CLK_P_Pin|OCTOSPI_F_DQS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8000d8a:	2305      	movs	r3, #5
 8000d8c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d92:	4619      	mov	r1, r3
 8000d94:	4811      	ldr	r0, [pc, #68]	@ (8000ddc <MX_GPIO_Init+0x320>)
 8000d96:	f002 fe85 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Button_Pin */
  GPIO_InitStruct.Pin = USER_Button_Pin;
 8000d9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Button_GPIO_Port, &GPIO_InitStruct);
 8000da8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dac:	4619      	mov	r1, r3
 8000dae:	480c      	ldr	r0, [pc, #48]	@ (8000de0 <MX_GPIO_Init+0x324>)
 8000db0:	f002 fe78 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH4 PH5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000db4:	2330      	movs	r3, #48	@ 0x30
 8000db6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db8:	2312      	movs	r3, #18
 8000dba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8000dc8:	e014      	b.n	8000df4 <MX_GPIO_Init+0x338>
 8000dca:	bf00      	nop
 8000dcc:	46020c00 	.word	0x46020c00
 8000dd0:	42020400 	.word	0x42020400
 8000dd4:	42021c00 	.word	0x42021c00
 8000dd8:	42021800 	.word	0x42021800
 8000ddc:	42021400 	.word	0x42021400
 8000de0:	42020800 	.word	0x42020800
 8000de4:	42020000 	.word	0x42020000
 8000de8:	42022000 	.word	0x42022000
 8000dec:	42020c00 	.word	0x42020c00
 8000df0:	42021000 	.word	0x42021000
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000df4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4886      	ldr	r0, [pc, #536]	@ (8001014 <MX_GPIO_Init+0x558>)
 8000dfc:	f002 fe52 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin Mems_VL53_xshut_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin;
 8000e00:	23c2      	movs	r3, #194	@ 0xc2
 8000e02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e04:	2301      	movs	r3, #1
 8000e06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e14:	4619      	mov	r1, r3
 8000e16:	487f      	ldr	r0, [pc, #508]	@ (8001014 <MX_GPIO_Init+0x558>)
 8000e18:	f002 fe44 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPI_R_IO0_Pin OCTOSPI_R_IO2_Pin OCTOSPI_R_IO1_Pin OCTOSPI_R_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_IO0_Pin|OCTOSPI_R_IO2_Pin|OCTOSPI_R_IO1_Pin|OCTOSPI_R_IO3_Pin;
 8000e1c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000e20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000e2e:	230a      	movs	r3, #10
 8000e30:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e36:	4619      	mov	r1, r3
 8000e38:	4877      	ldr	r0, [pc, #476]	@ (8001018 <MX_GPIO_Init+0x55c>)
 8000e3a:	f002 fe33 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCTOSPI_R_IO4_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_IO4_Pin;
 8000e3e:	2304      	movs	r3, #4
 8000e40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OCTOSPI_R_IO4_GPIO_Port, &GPIO_InitStruct);
 8000e52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e56:	4619      	mov	r1, r3
 8000e58:	486e      	ldr	r0, [pc, #440]	@ (8001014 <MX_GPIO_Init+0x558>)
 8000e5a:	f002 fe23 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_VCP_RX_Pin T_VCP_TX_Pin */
  GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8000e5e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e70:	2307      	movs	r3, #7
 8000e72:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4868      	ldr	r0, [pc, #416]	@ (800101c <MX_GPIO_Init+0x560>)
 8000e7c:	f002 fe12 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_C_P_Pin USB_C_PA11_Pin */
  GPIO_InitStruct.Pin = USB_C_P_Pin|USB_C_PA11_Pin;
 8000e80:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000e84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000e92:	230a      	movs	r3, #10
 8000e94:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	485f      	ldr	r0, [pc, #380]	@ (800101c <MX_GPIO_Init+0x560>)
 8000e9e:	f002 fe01 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CCK1_Pin */
  GPIO_InitStruct.Pin = MIC_CCK1_Pin;
 8000ea2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ea6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8000eb4:	2306      	movs	r3, #6
 8000eb6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(MIC_CCK1_GPIO_Port, &GPIO_InitStruct);
 8000eb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4856      	ldr	r0, [pc, #344]	@ (8001018 <MX_GPIO_Init+0x55c>)
 8000ec0:	f002 fdf0 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_SDINx_Pin MIC_CCK0_Pin */
  GPIO_InitStruct.Pin = MIC_SDINx_Pin|MIC_CCK0_Pin;
 8000ec4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ec8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ede:	4619      	mov	r1, r3
 8000ee0:	484f      	ldr	r0, [pc, #316]	@ (8001020 <MX_GPIO_Init+0x564>)
 8000ee2:	f002 fddf 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : WRLS_WKUP_B_Pin */
  GPIO_InitStruct.Pin = WRLS_WKUP_B_Pin;
 8000ee6:	2340      	movs	r3, #64	@ 0x40
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eea:	2301      	movs	r3, #1
 8000eec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(WRLS_WKUP_B_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000efa:	4619      	mov	r1, r3
 8000efc:	4849      	ldr	r0, [pc, #292]	@ (8001024 <MX_GPIO_Init+0x568>)
 8000efe:	f002 fdd1 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : WRLS_NOTIFY_Pin Mems_INT_IIS2MDC_Pin USB_IANA_Pin */
  GPIO_InitStruct.Pin = WRLS_NOTIFY_Pin|Mems_INT_IIS2MDC_Pin|USB_IANA_Pin;
 8000f02:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 8000f06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f14:	4619      	mov	r1, r3
 8000f16:	4844      	ldr	r0, [pc, #272]	@ (8001028 <MX_GPIO_Init+0x56c>)
 8000f18:	f002 fdc4 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCTOSPI_R_IO6_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_IO6_Pin;
 8000f1c:	2308      	movs	r3, #8
 8000f1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000f2c:	230a      	movs	r3, #10
 8000f2e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OCTOSPI_R_IO6_GPIO_Port, &GPIO_InitStruct);
 8000f30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f34:	4619      	mov	r1, r3
 8000f36:	483d      	ldr	r0, [pc, #244]	@ (800102c <MX_GPIO_Init+0x570>)
 8000f38:	f002 fdb4 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_UCPD_FLT_Pin Mems_ISM330DLC_INT1_Pin */
  GPIO_InitStruct.Pin = USB_UCPD_FLT_Pin|Mems_ISM330DLC_INT1_Pin;
 8000f3c:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8000f40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f42:	2300      	movs	r3, #0
 8000f44:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4833      	ldr	r0, [pc, #204]	@ (8001020 <MX_GPIO_Init+0x564>)
 8000f52:	f002 fda7 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPI_R_CLK_P_Pin OCTOSPI_R_NCS_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_CLK_P_Pin|OCTOSPI_R_NCS_Pin;
 8000f56:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f64:	2303      	movs	r3, #3
 8000f66:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000f68:	230a      	movs	r3, #10
 8000f6a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f70:	4619      	mov	r1, r3
 8000f72:	482f      	ldr	r0, [pc, #188]	@ (8001030 <MX_GPIO_Init+0x574>)
 8000f74:	f002 fd96 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_SENSE_Pin;
 8000f78:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4822      	ldr	r0, [pc, #136]	@ (8001018 <MX_GPIO_Init+0x55c>)
 8000f8e:	f002 fd89 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : WRLS_SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = WRLS_SPI2_NSS_Pin;
 8000f92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fa4:	2305      	movs	r3, #5
 8000fa6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(WRLS_SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8000fa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fac:	4619      	mov	r1, r3
 8000fae:	4820      	ldr	r0, [pc, #128]	@ (8001030 <MX_GPIO_Init+0x574>)
 8000fb0:	f002 fd78 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = USB_UCPD_CC2_Pin;
 8000fb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fb8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_UCPD_CC2_GPIO_Port, &GPIO_InitStruct);
 8000fc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4819      	ldr	r0, [pc, #100]	@ (8001030 <MX_GPIO_Init+0x574>)
 8000fca:	f002 fd6b 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Mems_STSAFE_RESET_Pin WRLS_WKUP_W_Pin */
  GPIO_InitStruct.Pin = Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin;
 8000fce:	f44f 4308 	mov.w	r3, #34816	@ 0x8800
 8000fd2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fe0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	480c      	ldr	r0, [pc, #48]	@ (8001018 <MX_GPIO_Init+0x55c>)
 8000fe8:	f002 fd5c 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_SDIN0_Pin */
  GPIO_InitStruct.Pin = MIC_SDIN0_Pin;
 8000fec:	2302      	movs	r3, #2
 8000fee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8000ffc:	2306      	movs	r3, #6
 8000ffe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(MIC_SDIN0_GPIO_Port, &GPIO_InitStruct);
 8001000:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001004:	4619      	mov	r1, r3
 8001006:	480a      	ldr	r0, [pc, #40]	@ (8001030 <MX_GPIO_Init+0x574>)
 8001008:	f002 fd4c 	bl	8003aa4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800100c:	bf00      	nop
 800100e:	3738      	adds	r7, #56	@ 0x38
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	42021c00 	.word	0x42021c00
 8001018:	42021400 	.word	0x42021400
 800101c:	42020000 	.word	0x42020000
 8001020:	42021000 	.word	0x42021000
 8001024:	42021800 	.word	0x42021800
 8001028:	42020c00 	.word	0x42020c00
 800102c:	42020800 	.word	0x42020800
 8001030:	42020400 	.word	0x42020400

08001034 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	e009      	b.n	800105a <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	1c5a      	adds	r2, r3, #1
 800104a:	60ba      	str	r2, [r7, #8]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fb9e 	bl	8000790 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	3301      	adds	r3, #1
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	429a      	cmp	r2, r3
 8001060:	dbf1      	blt.n	8001046 <_write+0x12>
  }
  return len;
 8001062:	687b      	ldr	r3, [r7, #4]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001070:	b672      	cpsid	i
}
 8001072:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <Error_Handler+0x8>

08001078 <boot_verify_crc>:
uint8_t count = 0;
static uint32_t  fw_base_addr;
static uint32_t  fw_write_offset;

uint8_t boot_verify_crc(uint8_t *data, uint8_t len, uint32_t crc_host)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	460b      	mov	r3, r1
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	72fb      	strb	r3, [r7, #11]
	uint32_t crc_value = 0xFFFFFFFF;
 8001086:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800108a:	61fb      	str	r3, [r7, #28]
	for(uint32_t i = 0; i < len; i++)
 800108c:	2300      	movs	r3, #0
 800108e:	61bb      	str	r3, [r7, #24]
 8001090:	e00f      	b.n	80010b2 <boot_verify_crc+0x3a>
	{
		uint32_t i_data = data[i];
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	4413      	add	r3, r2
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	617b      	str	r3, [r7, #20]
		crc_value = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	2201      	movs	r2, #1
 80010a2:	4619      	mov	r1, r3
 80010a4:	4811      	ldr	r0, [pc, #68]	@ (80010ec <boot_verify_crc+0x74>)
 80010a6:	f000 fe63 	bl	8001d70 <HAL_CRC_Accumulate>
 80010aa:	61f8      	str	r0, [r7, #28]
	for(uint32_t i = 0; i < len; i++)
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	3301      	adds	r3, #1
 80010b0:	61bb      	str	r3, [r7, #24]
 80010b2:	7afb      	ldrb	r3, [r7, #11]
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d3eb      	bcc.n	8001092 <boot_verify_crc+0x1a>
	}
	 __HAL_CRC_DR_RESET(&hcrc);
 80010ba:	4b0c      	ldr	r3, [pc, #48]	@ (80010ec <boot_verify_crc+0x74>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	689a      	ldr	r2, [r3, #8]
 80010c0:	4b0a      	ldr	r3, [pc, #40]	@ (80010ec <boot_verify_crc+0x74>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f042 0201 	orr.w	r2, r2, #1
 80010c8:	609a      	str	r2, [r3, #8]
	if (crc_value == crc_host)
 80010ca:	69fa      	ldr	r2, [r7, #28]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d104      	bne.n	80010dc <boot_verify_crc+0x64>
	{
		printf("CRCs match each other \n");
 80010d2:	4807      	ldr	r0, [pc, #28]	@ (80010f0 <boot_verify_crc+0x78>)
 80010d4:	f008 fb74 	bl	80097c0 <puts>
		return 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	e003      	b.n	80010e4 <boot_verify_crc+0x6c>
	}
	printf("CRC doesn't match : : Firmware Update Failed! \n");
 80010dc:	4805      	ldr	r0, [pc, #20]	@ (80010f4 <boot_verify_crc+0x7c>)
 80010de:	f008 fb6f 	bl	80097c0 <puts>
	return 1;
 80010e2:	2301      	movs	r3, #1

}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3720      	adds	r7, #32
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	200000a0 	.word	0x200000a0
 80010f0:	0800a4d8 	.word	0x0800a4d8
 80010f4:	0800a4f0 	.word	0x0800a4f0

080010f8 <get_inactive_bank_base>:


static uint32_t get_inactive_bank_base(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08e      	sub	sp, #56	@ 0x38
 80010fc:	af00      	add	r7, sp, #0
    FLASH_OBProgramInitTypeDef obcfg = {0};
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	2234      	movs	r2, #52	@ 0x34
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f008 fb63 	bl	80097d0 <memset>
    HAL_FLASHEx_OBGetConfig(&obcfg);
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	4618      	mov	r0, r3
 800110e:	f002 f97b 	bl	8003408 <HAL_FLASHEx_OBGetConfig>

    if (obcfg.USERConfig & OB_SWAP_BANK_ENABLE) {
 8001112:	6a3b      	ldr	r3, [r7, #32]
 8001114:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d002      	beq.n	8001122 <get_inactive_bank_base+0x2a>
        // bank2 is at 0x0800_0000, so bank1 is inactive
        return FLASH_BASE;
 800111c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001120:	e015      	b.n	800114e <get_inactive_bank_base+0x56>
    } else {
        // bank1 is at 0x0800_0000, so bank2 is inactive
        return FLASH_BANK2_BASE;
 8001122:	4b0d      	ldr	r3, [pc, #52]	@ (8001158 <get_inactive_bank_base+0x60>)
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800112a:	4293      	cmp	r3, r2
 800112c:	d00d      	beq.n	800114a <get_inactive_bank_base+0x52>
 800112e:	4b0a      	ldr	r3, [pc, #40]	@ (8001158 <get_inactive_bank_base+0x60>)
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d006      	beq.n	8001144 <get_inactive_bank_base+0x4c>
 8001136:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <get_inactive_bank_base+0x60>)
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	029b      	lsls	r3, r3, #10
 800113c:	085b      	lsrs	r3, r3, #1
 800113e:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001142:	e004      	b.n	800114e <get_inactive_bank_base+0x56>
 8001144:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 8001148:	e001      	b.n	800114e <get_inactive_bank_base+0x56>
 800114a:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
    }
}
 800114e:	4618      	mov	r0, r3
 8001150:	3738      	adds	r7, #56	@ 0x38
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	0bfa07a0 	.word	0x0bfa07a0

0800115c <update_firmware>:


uint8_t update_firmware(uint8_t *data, uint8_t size){
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	70fb      	strb	r3, [r7, #3]
    // Extract host CRC (last 4 bytes, little-endian)
    uint16_t payload_len = size - 4;
 8001168:	78fb      	ldrb	r3, [r7, #3]
 800116a:	b29b      	uxth	r3, r3
 800116c:	3b04      	subs	r3, #4
 800116e:	83fb      	strh	r3, [r7, #30]
    uint32_t crc_host =  (uint32_t)data[payload_len]
 8001170:	8bfb      	ldrh	r3, [r7, #30]
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4619      	mov	r1, r3
                       | ((uint32_t)data[payload_len + 1] << 8)
 800117a:	8bfb      	ldrh	r3, [r7, #30]
 800117c:	3301      	adds	r3, #1
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	4413      	add	r3, r2
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	021b      	lsls	r3, r3, #8
 8001186:	ea41 0203 	orr.w	r2, r1, r3
                       | ((uint32_t)data[payload_len + 2] << 16)
 800118a:	8bfb      	ldrh	r3, [r7, #30]
 800118c:	3302      	adds	r3, #2
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	440b      	add	r3, r1
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	041b      	lsls	r3, r3, #16
 8001196:	431a      	orrs	r2, r3
                       | ((uint32_t)data[payload_len + 3] << 24);
 8001198:	8bfb      	ldrh	r3, [r7, #30]
 800119a:	3303      	adds	r3, #3
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	440b      	add	r3, r1
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	061b      	lsls	r3, r3, #24
    uint32_t crc_host =  (uint32_t)data[payload_len]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]

    // Verify CRC
    if (boot_verify_crc(data, payload_len, crc_host)) {
 80011a8:	8bfb      	ldrh	r3, [r7, #30]
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4619      	mov	r1, r3
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ff61 	bl	8001078 <boot_verify_crc>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <update_firmware+0x64>
        return 1;  // CRC mismatch
 80011bc:	2301      	movs	r3, #1
 80011be:	e05a      	b.n	8001276 <update_firmware+0x11a>
    }

    // On first chunk, erase the inactive bank
    count++;
 80011c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001280 <update_firmware+0x124>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	3301      	adds	r3, #1
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001280 <update_firmware+0x124>)
 80011ca:	701a      	strb	r2, [r3, #0]
    if (count == 1) {
 80011cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001280 <update_firmware+0x124>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d121      	bne.n	8001218 <update_firmware+0xbc>
        fw_base_addr    = get_inactive_bank_base();
 80011d4:	f7ff ff90 	bl	80010f8 <get_inactive_bank_base>
 80011d8:	4603      	mov	r3, r0
 80011da:	4a2a      	ldr	r2, [pc, #168]	@ (8001284 <update_firmware+0x128>)
 80011dc:	6013      	str	r3, [r2, #0]
        fw_write_offset = 0;
 80011de:	4b2a      	ldr	r3, [pc, #168]	@ (8001288 <update_firmware+0x12c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
        erase_bank(fw_base_addr, BANK_PAGES);
 80011e4:	4b27      	ldr	r3, [pc, #156]	@ (8001284 <update_firmware+0x128>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b28      	ldr	r3, [pc, #160]	@ (800128c <update_firmware+0x130>)
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80011f0:	428b      	cmp	r3, r1
 80011f2:	d00c      	beq.n	800120e <update_firmware+0xb2>
 80011f4:	4b25      	ldr	r3, [pc, #148]	@ (800128c <update_firmware+0x130>)
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d006      	beq.n	800120a <update_firmware+0xae>
 80011fc:	4b23      	ldr	r3, [pc, #140]	@ (800128c <update_firmware+0x130>)
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	029b      	lsls	r3, r3, #10
 8001202:	085b      	lsrs	r3, r3, #1
 8001204:	0b5b      	lsrs	r3, r3, #13
 8001206:	b29b      	uxth	r3, r3
 8001208:	e002      	b.n	8001210 <update_firmware+0xb4>
 800120a:	2380      	movs	r3, #128	@ 0x80
 800120c:	e000      	b.n	8001210 <update_firmware+0xb4>
 800120e:	2380      	movs	r3, #128	@ 0x80
 8001210:	4619      	mov	r1, r3
 8001212:	4610      	mov	r0, r2
 8001214:	f7ff f9ee 	bl	80005f4 <erase_bank>
    }

    // If this is the final marker (e.g., size == 5), print VT and swap banks
    if (size == 5) {
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	2b05      	cmp	r3, #5
 800121c:	d110      	bne.n	8001240 <update_firmware+0xe4>
        uint32_t app_base = get_inactive_bank_base();
 800121e:	f7ff ff6b 	bl	80010f8 <get_inactive_bank_base>
 8001222:	60f8      	str	r0, [r7, #12]
        uint32_t *vt = (uint32_t *)app_base;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	60bb      	str	r3, [r7, #8]
        printf("SP: 0x%08lX, Reset Handler: 0x%08lX\n", vt[0], vt[1]);
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	6819      	ldr	r1, [r3, #0]
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	3304      	adds	r3, #4
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	4816      	ldr	r0, [pc, #88]	@ (8001290 <update_firmware+0x134>)
 8001236:	f008 fa5b 	bl	80096f0 <iprintf>

        toggle_bank();  // Swaps banks and resets
 800123a:	f7ff fa71 	bl	8000720 <toggle_bank>
 800123e:	e019      	b.n	8001274 <update_firmware+0x118>
    } else {
        // Write payload to flash
        uint32_t addr = fw_base_addr + fw_write_offset;
 8001240:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <update_firmware+0x128>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b10      	ldr	r3, [pc, #64]	@ (8001288 <update_firmware+0x12c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4413      	add	r3, r2
 800124a:	617b      	str	r3, [r7, #20]
        store_flash_memory(addr, data, payload_len);
 800124c:	8bfb      	ldrh	r3, [r7, #30]
 800124e:	461a      	mov	r2, r3
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	6978      	ldr	r0, [r7, #20]
 8001254:	f7ff fa16 	bl	8000684 <store_flash_memory>

        // Pad to 16-byte boundary if needed
        uint32_t padded = ((payload_len + 15) / 16) * 16;
 8001258:	8bfb      	ldrh	r3, [r7, #30]
 800125a:	330f      	adds	r3, #15
 800125c:	2b00      	cmp	r3, #0
 800125e:	da00      	bge.n	8001262 <update_firmware+0x106>
 8001260:	330f      	adds	r3, #15
 8001262:	111b      	asrs	r3, r3, #4
 8001264:	011b      	lsls	r3, r3, #4
 8001266:	613b      	str	r3, [r7, #16]
        fw_write_offset += padded;
 8001268:	4b07      	ldr	r3, [pc, #28]	@ (8001288 <update_firmware+0x12c>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4413      	add	r3, r2
 8001270:	4a05      	ldr	r2, [pc, #20]	@ (8001288 <update_firmware+0x12c>)
 8001272:	6013      	str	r3, [r2, #0]
    }

    return 0;
 8001274:	2300      	movs	r3, #0
//	fw_write_offset += (size - 4);
//	}
//
//
//	return 0;
}
 8001276:	4618      	mov	r0, r3
 8001278:	3720      	adds	r7, #32
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200003da 	.word	0x200003da
 8001284:	200003dc 	.word	0x200003dc
 8001288:	200003e0 	.word	0x200003e0
 800128c:	0bfa07a0 	.word	0x0bfa07a0
 8001290:	0800a520 	.word	0x0800a520

08001294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800129a:	4b0a      	ldr	r3, [pc, #40]	@ (80012c4 <HAL_MspInit+0x30>)
 800129c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012a0:	4a08      	ldr	r2, [pc, #32]	@ (80012c4 <HAL_MspInit+0x30>)
 80012a2:	f043 0304 	orr.w	r3, r3, #4
 80012a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80012aa:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <HAL_MspInit+0x30>)
 80012ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80012b8:	f002 fef0 	bl	800409c <HAL_PWREx_EnableVddIO2>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	46020c00 	.word	0x46020c00

080012c8 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001304 <HAL_CRC_MspInit+0x3c>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d10e      	bne.n	80012f8 <HAL_CRC_MspInit+0x30>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80012da:	4b0b      	ldr	r3, [pc, #44]	@ (8001308 <HAL_CRC_MspInit+0x40>)
 80012dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012e0:	4a09      	ldr	r2, [pc, #36]	@ (8001308 <HAL_CRC_MspInit+0x40>)
 80012e2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012e6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80012ea:	4b07      	ldr	r3, [pc, #28]	@ (8001308 <HAL_CRC_MspInit+0x40>)
 80012ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80012f8:	bf00      	nop
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	40023000 	.word	0x40023000
 8001308:	46020c00 	.word	0x46020c00

0800130c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b0bc      	sub	sp, #240	@ 0xf0
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001324:	f107 0310 	add.w	r3, r7, #16
 8001328:	22c8      	movs	r2, #200	@ 0xc8
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f008 fa4f 	bl	80097d0 <memset>
  if(huart->Instance==USART3)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a6d      	ldr	r2, [pc, #436]	@ (80014ec <HAL_UART_MspInit+0x1e0>)
 8001338:	4293      	cmp	r3, r2
 800133a:	f040 80d3 	bne.w	80014e4 <HAL_UART_MspInit+0x1d8>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800133e:	f04f 0204 	mov.w	r2, #4
 8001342:	f04f 0300 	mov.w	r3, #0
 8001346:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800134a:	2300      	movs	r3, #0
 800134c:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800134e:	f107 0310 	add.w	r3, r7, #16
 8001352:	4618      	mov	r0, r3
 8001354:	f004 f95e 	bl	8005614 <HAL_RCCEx_PeriphCLKConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800135e:	f7ff fe85 	bl	800106c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001362:	4b63      	ldr	r3, [pc, #396]	@ (80014f0 <HAL_UART_MspInit+0x1e4>)
 8001364:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001368:	4a61      	ldr	r2, [pc, #388]	@ (80014f0 <HAL_UART_MspInit+0x1e4>)
 800136a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800136e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001372:	4b5f      	ldr	r3, [pc, #380]	@ (80014f0 <HAL_UART_MspInit+0x1e4>)
 8001374:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001378:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001380:	4b5b      	ldr	r3, [pc, #364]	@ (80014f0 <HAL_UART_MspInit+0x1e4>)
 8001382:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001386:	4a5a      	ldr	r2, [pc, #360]	@ (80014f0 <HAL_UART_MspInit+0x1e4>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001390:	4b57      	ldr	r3, [pc, #348]	@ (80014f0 <HAL_UART_MspInit+0x1e4>)
 8001392:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA7     ------> USART3_TX
    PA5     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5;
 800139e:	23a0      	movs	r3, #160	@ 0xa0
 80013a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	2302      	movs	r3, #2
 80013a6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013b6:	2307      	movs	r3, #7
 80013b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013bc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80013c0:	4619      	mov	r1, r3
 80013c2:	484c      	ldr	r0, [pc, #304]	@ (80014f4 <HAL_UART_MspInit+0x1e8>)
 80013c4:	f002 fb6e 	bl	8003aa4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* GPDMA1_REQUEST_USART3_TX Init */
    handle_GPDMA1_Channel11.Instance = GPDMA1_Channel11;
 80013c8:	4b4b      	ldr	r3, [pc, #300]	@ (80014f8 <HAL_UART_MspInit+0x1ec>)
 80013ca:	4a4c      	ldr	r2, [pc, #304]	@ (80014fc <HAL_UART_MspInit+0x1f0>)
 80013cc:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel11.Init.Request = GPDMA1_REQUEST_USART3_TX;
 80013ce:	4b4a      	ldr	r3, [pc, #296]	@ (80014f8 <HAL_UART_MspInit+0x1ec>)
 80013d0:	221d      	movs	r2, #29
 80013d2:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel11.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80013d4:	4b48      	ldr	r3, [pc, #288]	@ (80014f8 <HAL_UART_MspInit+0x1ec>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel11.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013da:	4b47      	ldr	r3, [pc, #284]	@ (80014f8 <HAL_UART_MspInit+0x1ec>)
 80013dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013e0:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel11.Init.SrcInc = DMA_SINC_FIXED;
 80013e2:	4b45      	ldr	r3, [pc, #276]	@ (80014f8 <HAL_UART_MspInit+0x1ec>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel11.Init.DestInc = DMA_DINC_FIXED;
 80013e8:	4b43      	ldr	r3, [pc, #268]	@ (80014f8 <HAL_UART_MspInit+0x1ec>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel11.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80013ee:	4b42      	ldr	r3, [pc, #264]	@ (80014f8 <HAL_UART_MspInit+0x1ec>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel11.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80013f4:	4b40      	ldr	r3, [pc, #256]	@ (80014f8 <HAL_UART_MspInit+0x1ec>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel11.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80013fa:	4b3f      	ldr	r3, [pc, #252]	@ (80014f8 <HAL_UART_MspInit+0x1ec>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel11.Init.SrcBurstLength = 1;
 8001400:	4b3d      	ldr	r3, [pc, #244]	@ (80014f8 <HAL_UART_MspInit+0x1ec>)
 8001402:	2201      	movs	r2, #1
 8001404:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel11.Init.DestBurstLength = 1;
 8001406:	4b3c      	ldr	r3, [pc, #240]	@ (80014f8 <HAL_UART_MspInit+0x1ec>)
 8001408:	2201      	movs	r2, #1
 800140a:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel11.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT1|DMA_DEST_ALLOCATED_PORT1;
 800140c:	4b3a      	ldr	r3, [pc, #232]	@ (80014f8 <HAL_UART_MspInit+0x1ec>)
 800140e:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001412:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel11.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001414:	4b38      	ldr	r3, [pc, #224]	@ (80014f8 <HAL_UART_MspInit+0x1ec>)
 8001416:	2200      	movs	r2, #0
 8001418:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel11.Init.Mode = DMA_NORMAL;
 800141a:	4b37      	ldr	r3, [pc, #220]	@ (80014f8 <HAL_UART_MspInit+0x1ec>)
 800141c:	2200      	movs	r2, #0
 800141e:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel11) != HAL_OK)
 8001420:	4835      	ldr	r0, [pc, #212]	@ (80014f8 <HAL_UART_MspInit+0x1ec>)
 8001422:	f000 fe41 	bl	80020a8 <HAL_DMA_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 800142c:	f7ff fe1e 	bl	800106c <Error_Handler>
    }

    __HAL_LINKDMA(huart, hdmatx, handle_GPDMA1_Channel11);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a31      	ldr	r2, [pc, #196]	@ (80014f8 <HAL_UART_MspInit+0x1ec>)
 8001434:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001436:	4a30      	ldr	r2, [pc, #192]	@ (80014f8 <HAL_UART_MspInit+0x1ec>)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel11, DMA_CHANNEL_NPRIV) != HAL_OK)
 800143c:	2110      	movs	r1, #16
 800143e:	482e      	ldr	r0, [pc, #184]	@ (80014f8 <HAL_UART_MspInit+0x1ec>)
 8001440:	f001 f9c4 	bl	80027cc <HAL_DMA_ConfigChannelAttributes>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 800144a:	f7ff fe0f 	bl	800106c <Error_Handler>
    }

    /* GPDMA1_REQUEST_USART3_RX Init */
    handle_GPDMA1_Channel10.Instance = GPDMA1_Channel10;
 800144e:	4b2c      	ldr	r3, [pc, #176]	@ (8001500 <HAL_UART_MspInit+0x1f4>)
 8001450:	4a2c      	ldr	r2, [pc, #176]	@ (8001504 <HAL_UART_MspInit+0x1f8>)
 8001452:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel10.Init.Request = GPDMA1_REQUEST_USART3_RX;
 8001454:	4b2a      	ldr	r3, [pc, #168]	@ (8001500 <HAL_UART_MspInit+0x1f4>)
 8001456:	221c      	movs	r2, #28
 8001458:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel10.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800145a:	4b29      	ldr	r3, [pc, #164]	@ (8001500 <HAL_UART_MspInit+0x1f4>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel10.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001460:	4b27      	ldr	r3, [pc, #156]	@ (8001500 <HAL_UART_MspInit+0x1f4>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel10.Init.SrcInc = DMA_SINC_FIXED;
 8001466:	4b26      	ldr	r3, [pc, #152]	@ (8001500 <HAL_UART_MspInit+0x1f4>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel10.Init.DestInc = DMA_DINC_INCREMENTED;
 800146c:	4b24      	ldr	r3, [pc, #144]	@ (8001500 <HAL_UART_MspInit+0x1f4>)
 800146e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001472:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel10.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001474:	4b22      	ldr	r3, [pc, #136]	@ (8001500 <HAL_UART_MspInit+0x1f4>)
 8001476:	2200      	movs	r2, #0
 8001478:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel10.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800147a:	4b21      	ldr	r3, [pc, #132]	@ (8001500 <HAL_UART_MspInit+0x1f4>)
 800147c:	2200      	movs	r2, #0
 800147e:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel10.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001480:	4b1f      	ldr	r3, [pc, #124]	@ (8001500 <HAL_UART_MspInit+0x1f4>)
 8001482:	2200      	movs	r2, #0
 8001484:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel10.Init.SrcBurstLength = 1;
 8001486:	4b1e      	ldr	r3, [pc, #120]	@ (8001500 <HAL_UART_MspInit+0x1f4>)
 8001488:	2201      	movs	r2, #1
 800148a:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel10.Init.DestBurstLength = 1;
 800148c:	4b1c      	ldr	r3, [pc, #112]	@ (8001500 <HAL_UART_MspInit+0x1f4>)
 800148e:	2201      	movs	r2, #1
 8001490:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel10.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001492:	4b1b      	ldr	r3, [pc, #108]	@ (8001500 <HAL_UART_MspInit+0x1f4>)
 8001494:	2200      	movs	r2, #0
 8001496:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel10.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001498:	4b19      	ldr	r3, [pc, #100]	@ (8001500 <HAL_UART_MspInit+0x1f4>)
 800149a:	2200      	movs	r2, #0
 800149c:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel10.Init.Mode = DMA_NORMAL;
 800149e:	4b18      	ldr	r3, [pc, #96]	@ (8001500 <HAL_UART_MspInit+0x1f4>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel10) != HAL_OK)
 80014a4:	4816      	ldr	r0, [pc, #88]	@ (8001500 <HAL_UART_MspInit+0x1f4>)
 80014a6:	f000 fdff 	bl	80020a8 <HAL_DMA_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <HAL_UART_MspInit+0x1a8>
    {
      Error_Handler();
 80014b0:	f7ff fddc 	bl	800106c <Error_Handler>
    }

    __HAL_LINKDMA(huart, hdmarx, handle_GPDMA1_Channel10);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a12      	ldr	r2, [pc, #72]	@ (8001500 <HAL_UART_MspInit+0x1f4>)
 80014b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80014bc:	4a10      	ldr	r2, [pc, #64]	@ (8001500 <HAL_UART_MspInit+0x1f4>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel10, DMA_CHANNEL_NPRIV) != HAL_OK)
 80014c2:	2110      	movs	r1, #16
 80014c4:	480e      	ldr	r0, [pc, #56]	@ (8001500 <HAL_UART_MspInit+0x1f4>)
 80014c6:	f001 f981 	bl	80027cc <HAL_DMA_ConfigChannelAttributes>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <HAL_UART_MspInit+0x1c8>
    {
      Error_Handler();
 80014d0:	f7ff fdcc 	bl	800106c <Error_Handler>
    }

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2100      	movs	r1, #0
 80014d8:	203f      	movs	r0, #63	@ 0x3f
 80014da:	f000 fb09 	bl	8001af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014de:	203f      	movs	r0, #63	@ 0x3f
 80014e0:	f000 fb20 	bl	8001b24 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 80014e4:	bf00      	nop
 80014e6:	37f0      	adds	r7, #240	@ 0xf0
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40004800 	.word	0x40004800
 80014f0:	46020c00 	.word	0x46020c00
 80014f4:	42020000 	.word	0x42020000
 80014f8:	20000158 	.word	0x20000158
 80014fc:	400205d0 	.word	0x400205d0
 8001500:	200001d0 	.word	0x200001d0
 8001504:	40020550 	.word	0x40020550

08001508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800150c:	bf00      	nop
 800150e:	e7fd      	b.n	800150c <NMI_Handler+0x4>

08001510 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN HardFault_IRQn 0 */
    uint32_t cfsr = SCB->CFSR;
 8001516:	4b0b      	ldr	r3, [pc, #44]	@ (8001544 <HardFault_Handler+0x34>)
 8001518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800151a:	60fb      	str	r3, [r7, #12]
    uint32_t hfsr = SCB->HFSR;
 800151c:	4b09      	ldr	r3, [pc, #36]	@ (8001544 <HardFault_Handler+0x34>)
 800151e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001520:	60bb      	str	r3, [r7, #8]
    uint32_t mmfar = SCB->MMFAR;
 8001522:	4b08      	ldr	r3, [pc, #32]	@ (8001544 <HardFault_Handler+0x34>)
 8001524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001526:	607b      	str	r3, [r7, #4]
    uint32_t bfar  = SCB->BFAR;
 8001528:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <HardFault_Handler+0x34>)
 800152a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800152c:	603b      	str	r3, [r7, #0]
    printf("HARD FAULT\n CFSR=0x%08lX HFSR=0x%08lX\n MMFAR=0x%08lX BFAR=0x%08lX\n",
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	68ba      	ldr	r2, [r7, #8]
 8001536:	68f9      	ldr	r1, [r7, #12]
 8001538:	4803      	ldr	r0, [pc, #12]	@ (8001548 <HardFault_Handler+0x38>)
 800153a:	f008 f8d9 	bl	80096f0 <iprintf>
           cfsr, hfsr, mmfar, bfar);
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153e:	bf00      	nop
 8001540:	e7fd      	b.n	800153e <HardFault_Handler+0x2e>
 8001542:	bf00      	nop
 8001544:	e000ed00 	.word	0xe000ed00
 8001548:	0800a548 	.word	0x0800a548

0800154c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <MemManage_Handler+0x4>

08001554 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <BusFault_Handler+0x4>

0800155c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <UsageFault_Handler+0x4>

08001564 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001592:	f000 f9b1 	bl	80018f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80015a0:	4802      	ldr	r0, [pc, #8]	@ (80015ac <USART3_IRQHandler+0x10>)
 80015a2:	f006 fd67 	bl	8008074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200000c4 	.word	0x200000c4

080015b0 <GPDMA1_Channel10_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 10 global interrupt.
  */
void GPDMA1_Channel10_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel10_IRQn 0 */

  /* USER CODE END GPDMA1_Channel10_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel10);
 80015b4:	4802      	ldr	r0, [pc, #8]	@ (80015c0 <GPDMA1_Channel10_IRQHandler+0x10>)
 80015b6:	f000 ffa8 	bl	800250a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel10_IRQn 1 */

  /* USER CODE END GPDMA1_Channel10_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200001d0 	.word	0x200001d0

080015c4 <GPDMA1_Channel11_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 11 global interrupt.
  */
void GPDMA1_Channel11_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel11_IRQn 0 */

  /* USER CODE END GPDMA1_Channel11_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel11);
 80015c8:	4802      	ldr	r0, [pc, #8]	@ (80015d4 <GPDMA1_Channel11_IRQHandler+0x10>)
 80015ca:	f000 ff9e 	bl	800250a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel11_IRQn 1 */

  /* USER CODE END GPDMA1_Channel11_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000158 	.word	0x20000158

080015d8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	e00a      	b.n	8001600 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015ea:	f3af 8000 	nop.w
 80015ee:	4601      	mov	r1, r0
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	1c5a      	adds	r2, r3, #1
 80015f4:	60ba      	str	r2, [r7, #8]
 80015f6:	b2ca      	uxtb	r2, r1
 80015f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	3301      	adds	r3, #1
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	697a      	ldr	r2, [r7, #20]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	429a      	cmp	r2, r3
 8001606:	dbf0      	blt.n	80015ea <_read+0x12>
  }

  return len;
 8001608:	687b      	ldr	r3, [r7, #4]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800161a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800163a:	605a      	str	r2, [r3, #4]
  return 0;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <_isatty>:

int _isatty(int file)
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001652:	2301      	movs	r3, #1
}
 8001654:	4618      	mov	r0, r3
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001684:	4a14      	ldr	r2, [pc, #80]	@ (80016d8 <_sbrk+0x5c>)
 8001686:	4b15      	ldr	r3, [pc, #84]	@ (80016dc <_sbrk+0x60>)
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001690:	4b13      	ldr	r3, [pc, #76]	@ (80016e0 <_sbrk+0x64>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d102      	bne.n	800169e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001698:	4b11      	ldr	r3, [pc, #68]	@ (80016e0 <_sbrk+0x64>)
 800169a:	4a12      	ldr	r2, [pc, #72]	@ (80016e4 <_sbrk+0x68>)
 800169c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800169e:	4b10      	ldr	r3, [pc, #64]	@ (80016e0 <_sbrk+0x64>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d207      	bcs.n	80016bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016ac:	f008 f898 	bl	80097e0 <__errno>
 80016b0:	4603      	mov	r3, r0
 80016b2:	220c      	movs	r2, #12
 80016b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016ba:	e009      	b.n	80016d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016bc:	4b08      	ldr	r3, [pc, #32]	@ (80016e0 <_sbrk+0x64>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016c2:	4b07      	ldr	r3, [pc, #28]	@ (80016e0 <_sbrk+0x64>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	4a05      	ldr	r2, [pc, #20]	@ (80016e0 <_sbrk+0x64>)
 80016cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ce:	68fb      	ldr	r3, [r7, #12]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	200c0000 	.word	0x200c0000
 80016dc:	00000400 	.word	0x00000400
 80016e0:	200003e4 	.word	0x200003e4
 80016e4:	20000538 	.word	0x20000538

080016e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016ec:	4b18      	ldr	r3, [pc, #96]	@ (8001750 <SystemInit+0x68>)
 80016ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016f2:	4a17      	ldr	r2, [pc, #92]	@ (8001750 <SystemInit+0x68>)
 80016f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80016fc:	4b15      	ldr	r3, [pc, #84]	@ (8001754 <SystemInit+0x6c>)
 80016fe:	2201      	movs	r2, #1
 8001700:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001702:	4b14      	ldr	r3, [pc, #80]	@ (8001754 <SystemInit+0x6c>)
 8001704:	2200      	movs	r2, #0
 8001706:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001708:	4b12      	ldr	r3, [pc, #72]	@ (8001754 <SystemInit+0x6c>)
 800170a:	2200      	movs	r2, #0
 800170c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800170e:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <SystemInit+0x6c>)
 8001710:	2200      	movs	r2, #0
 8001712:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001714:	4b0f      	ldr	r3, [pc, #60]	@ (8001754 <SystemInit+0x6c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a0e      	ldr	r2, [pc, #56]	@ (8001754 <SystemInit+0x6c>)
 800171a:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800171e:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001722:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001724:	4b0b      	ldr	r3, [pc, #44]	@ (8001754 <SystemInit+0x6c>)
 8001726:	2200      	movs	r2, #0
 8001728:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800172a:	4b0a      	ldr	r3, [pc, #40]	@ (8001754 <SystemInit+0x6c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a09      	ldr	r2, [pc, #36]	@ (8001754 <SystemInit+0x6c>)
 8001730:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001734:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001736:	4b07      	ldr	r3, [pc, #28]	@ (8001754 <SystemInit+0x6c>)
 8001738:	2200      	movs	r2, #0
 800173a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800173c:	4b04      	ldr	r3, [pc, #16]	@ (8001750 <SystemInit+0x68>)
 800173e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001742:	609a      	str	r2, [r3, #8]
  #endif
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000ed00 	.word	0xe000ed00
 8001754:	46020c00 	.word	0x46020c00

08001758 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001758:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001790 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800175c:	f7ff ffc4 	bl	80016e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001760:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001762:	e003      	b.n	800176c <LoopCopyDataInit>

08001764 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001764:	4b0b      	ldr	r3, [pc, #44]	@ (8001794 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001766:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001768:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800176a:	3104      	adds	r1, #4

0800176c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800176c:	480a      	ldr	r0, [pc, #40]	@ (8001798 <LoopForever+0xa>)
	ldr	r3, =_edata
 800176e:	4b0b      	ldr	r3, [pc, #44]	@ (800179c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001770:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001772:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001774:	d3f6      	bcc.n	8001764 <CopyDataInit>
	ldr	r2, =_sbss
 8001776:	4a0a      	ldr	r2, [pc, #40]	@ (80017a0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001778:	e002      	b.n	8001780 <LoopFillZerobss>

0800177a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800177a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800177c:	f842 3b04 	str.w	r3, [r2], #4

08001780 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001780:	4b08      	ldr	r3, [pc, #32]	@ (80017a4 <LoopForever+0x16>)
	cmp	r2, r3
 8001782:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001784:	d3f9      	bcc.n	800177a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001786:	f008 f831 	bl	80097ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800178a:	f7ff f849 	bl	8000820 <main>

0800178e <LoopForever>:

LoopForever:
    b LoopForever
 800178e:	e7fe      	b.n	800178e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001790:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001794:	0800a6d0 	.word	0x0800a6d0
	ldr	r0, =_sdata
 8001798:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800179c:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 80017a0:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 80017a4:	20000538 	.word	0x20000538

080017a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017a8:	e7fe      	b.n	80017a8 <ADC1_IRQHandler>
	...

080017ac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b0:	4b12      	ldr	r3, [pc, #72]	@ (80017fc <HAL_Init+0x50>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a11      	ldr	r2, [pc, #68]	@ (80017fc <HAL_Init+0x50>)
 80017b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017bc:	2003      	movs	r0, #3
 80017be:	f000 f98c 	bl	8001ada <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80017c2:	f003 fd49 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 80017c6:	4602      	mov	r2, r0
 80017c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001800 <HAL_Init+0x54>)
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	f003 030f 	and.w	r3, r3, #15
 80017d0:	490c      	ldr	r1, [pc, #48]	@ (8001804 <HAL_Init+0x58>)
 80017d2:	5ccb      	ldrb	r3, [r1, r3]
 80017d4:	fa22 f303 	lsr.w	r3, r2, r3
 80017d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001808 <HAL_Init+0x5c>)
 80017da:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80017dc:	2004      	movs	r0, #4
 80017de:	f000 f9d1 	bl	8001b84 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017e2:	200f      	movs	r0, #15
 80017e4:	f000 f812 	bl	800180c <HAL_InitTick>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e002      	b.n	80017f8 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017f2:	f7ff fd4f 	bl	8001294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40022000 	.word	0x40022000
 8001800:	46020c00 	.word	0x46020c00
 8001804:	0800a58c 	.word	0x0800a58c
 8001808:	20000000 	.word	0x20000000

0800180c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001818:	4b33      	ldr	r3, [pc, #204]	@ (80018e8 <HAL_InitTick+0xdc>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d101      	bne.n	8001824 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e05c      	b.n	80018de <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001824:	4b31      	ldr	r3, [pc, #196]	@ (80018ec <HAL_InitTick+0xe0>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b04      	cmp	r3, #4
 800182e:	d10c      	bne.n	800184a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001830:	4b2f      	ldr	r3, [pc, #188]	@ (80018f0 <HAL_InitTick+0xe4>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b2c      	ldr	r3, [pc, #176]	@ (80018e8 <HAL_InitTick+0xdc>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	4619      	mov	r1, r3
 800183a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800183e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001842:	fbb2 f3f3 	udiv	r3, r2, r3
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	e037      	b.n	80018ba <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800184a:	f000 f9f3 	bl	8001c34 <HAL_SYSTICK_GetCLKSourceConfig>
 800184e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	2b02      	cmp	r3, #2
 8001854:	d023      	beq.n	800189e <HAL_InitTick+0x92>
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	2b02      	cmp	r3, #2
 800185a:	d82d      	bhi.n	80018b8 <HAL_InitTick+0xac>
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_InitTick+0x5e>
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d00d      	beq.n	8001884 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001868:	e026      	b.n	80018b8 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800186a:	4b21      	ldr	r3, [pc, #132]	@ (80018f0 <HAL_InitTick+0xe4>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	4b1e      	ldr	r3, [pc, #120]	@ (80018e8 <HAL_InitTick+0xdc>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	4619      	mov	r1, r3
 8001874:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001878:	fbb3 f3f1 	udiv	r3, r3, r1
 800187c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001880:	60fb      	str	r3, [r7, #12]
        break;
 8001882:	e01a      	b.n	80018ba <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001884:	4b18      	ldr	r3, [pc, #96]	@ (80018e8 <HAL_InitTick+0xdc>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	461a      	mov	r2, r3
 800188a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800188e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001892:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001896:	fbb2 f3f3 	udiv	r3, r2, r3
 800189a:	60fb      	str	r3, [r7, #12]
        break;
 800189c:	e00d      	b.n	80018ba <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800189e:	4b12      	ldr	r3, [pc, #72]	@ (80018e8 <HAL_InitTick+0xdc>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	461a      	mov	r2, r3
 80018a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80018ac:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80018b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b4:	60fb      	str	r3, [r7, #12]
        break;
 80018b6:	e000      	b.n	80018ba <HAL_InitTick+0xae>
        break;
 80018b8:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	f000 f940 	bl	8001b40 <HAL_SYSTICK_Config>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e009      	b.n	80018de <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018ca:	2200      	movs	r2, #0
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018d2:	f000 f90d 	bl	8001af0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80018d6:	4a07      	ldr	r2, [pc, #28]	@ (80018f4 <HAL_InitTick+0xe8>)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000008 	.word	0x20000008
 80018ec:	e000e010 	.word	0xe000e010
 80018f0:	20000000 	.word	0x20000000
 80018f4:	20000004 	.word	0x20000004

080018f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018fc:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <HAL_IncTick+0x20>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	461a      	mov	r2, r3
 8001902:	4b06      	ldr	r3, [pc, #24]	@ (800191c <HAL_IncTick+0x24>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4413      	add	r3, r2
 8001908:	4a04      	ldr	r2, [pc, #16]	@ (800191c <HAL_IncTick+0x24>)
 800190a:	6013      	str	r3, [r2, #0]
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20000008 	.word	0x20000008
 800191c:	200003e8 	.word	0x200003e8

08001920 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return uwTick;
 8001924:	4b03      	ldr	r3, [pc, #12]	@ (8001934 <HAL_GetTick+0x14>)
 8001926:	681b      	ldr	r3, [r3, #0]
}
 8001928:	4618      	mov	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	200003e8 	.word	0x200003e8

08001938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001940:	f7ff ffee 	bl	8001920 <HAL_GetTick>
 8001944:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001950:	d005      	beq.n	800195e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001952:	4b0a      	ldr	r3, [pc, #40]	@ (800197c <HAL_Delay+0x44>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	461a      	mov	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4413      	add	r3, r2
 800195c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800195e:	bf00      	nop
 8001960:	f7ff ffde 	bl	8001920 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	429a      	cmp	r2, r3
 800196e:	d8f7      	bhi.n	8001960 <HAL_Delay+0x28>
  {
  }
}
 8001970:	bf00      	nop
 8001972:	bf00      	nop
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000008 	.word	0x20000008

08001980 <__NVIC_SetPriorityGrouping>:
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001990:	4b0c      	ldr	r3, [pc, #48]	@ (80019c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800199c:	4013      	ands	r3, r2
 800199e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019b2:	4a04      	ldr	r2, [pc, #16]	@ (80019c4 <__NVIC_SetPriorityGrouping+0x44>)
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	60d3      	str	r3, [r2, #12]
}
 80019b8:	bf00      	nop
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <__NVIC_GetPriorityGrouping>:
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019cc:	4b04      	ldr	r3, [pc, #16]	@ (80019e0 <__NVIC_GetPriorityGrouping+0x18>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	0a1b      	lsrs	r3, r3, #8
 80019d2:	f003 0307 	and.w	r3, r3, #7
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <__NVIC_EnableIRQ>:
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	db0b      	blt.n	8001a0e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	f003 021f 	and.w	r2, r3, #31
 80019fc:	4907      	ldr	r1, [pc, #28]	@ (8001a1c <__NVIC_EnableIRQ+0x38>)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	095b      	lsrs	r3, r3, #5
 8001a04:	2001      	movs	r0, #1
 8001a06:	fa00 f202 	lsl.w	r2, r0, r2
 8001a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e000e100 	.word	0xe000e100

08001a20 <__NVIC_SetPriority>:
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	6039      	str	r1, [r7, #0]
 8001a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	db0a      	blt.n	8001a4a <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	490c      	ldr	r1, [pc, #48]	@ (8001a6c <__NVIC_SetPriority+0x4c>)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	0112      	lsls	r2, r2, #4
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	440b      	add	r3, r1
 8001a44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001a48:	e00a      	b.n	8001a60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4908      	ldr	r1, [pc, #32]	@ (8001a70 <__NVIC_SetPriority+0x50>)
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	3b04      	subs	r3, #4
 8001a58:	0112      	lsls	r2, r2, #4
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	761a      	strb	r2, [r3, #24]
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000e100 	.word	0xe000e100
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <NVIC_EncodePriority>:
{
 8001a74:	b480      	push	{r7}
 8001a76:	b089      	sub	sp, #36	@ 0x24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f1c3 0307 	rsb	r3, r3, #7
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	bf28      	it	cs
 8001a92:	2304      	movcs	r3, #4
 8001a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	2b06      	cmp	r3, #6
 8001a9c:	d902      	bls.n	8001aa4 <NVIC_EncodePriority+0x30>
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3b03      	subs	r3, #3
 8001aa2:	e000      	b.n	8001aa6 <NVIC_EncodePriority+0x32>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43da      	mvns	r2, r3
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001abc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac6:	43d9      	mvns	r1, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001acc:	4313      	orrs	r3, r2
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3724      	adds	r7, #36	@ 0x24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff ff4c 	bl	8001980 <__NVIC_SetPriorityGrouping>
}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
 8001afc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001afe:	f7ff ff63 	bl	80019c8 <__NVIC_GetPriorityGrouping>
 8001b02:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	68b9      	ldr	r1, [r7, #8]
 8001b08:	6978      	ldr	r0, [r7, #20]
 8001b0a:	f7ff ffb3 	bl	8001a74 <NVIC_EncodePriority>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b14:	4611      	mov	r1, r2
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff ff82 	bl	8001a20 <__NVIC_SetPriority>
}
 8001b1c:	bf00      	nop
 8001b1e:	3718      	adds	r7, #24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff ff56 	bl	80019e4 <__NVIC_EnableIRQ>
}
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b50:	d301      	bcc.n	8001b56 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001b52:	2301      	movs	r3, #1
 8001b54:	e00d      	b.n	8001b72 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001b56:	4a0a      	ldr	r2, [pc, #40]	@ (8001b80 <HAL_SYSTICK_Config+0x40>)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001b5e:	4b08      	ldr	r3, [pc, #32]	@ (8001b80 <HAL_SYSTICK_Config+0x40>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001b64:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <HAL_SYSTICK_Config+0x40>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a05      	ldr	r2, [pc, #20]	@ (8001b80 <HAL_SYSTICK_Config+0x40>)
 8001b6a:	f043 0303 	orr.w	r3, r3, #3
 8001b6e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	e000e010 	.word	0xe000e010

08001b84 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d844      	bhi.n	8001c1c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001b92:	a201      	add	r2, pc, #4	@ (adr r2, 8001b98 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b98:	08001bbb 	.word	0x08001bbb
 8001b9c:	08001bd9 	.word	0x08001bd9
 8001ba0:	08001bfb 	.word	0x08001bfb
 8001ba4:	08001c1d 	.word	0x08001c1d
 8001ba8:	08001bad 	.word	0x08001bad
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001bac:	4b1f      	ldr	r3, [pc, #124]	@ (8001c2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a1e      	ldr	r2, [pc, #120]	@ (8001c2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001bb2:	f043 0304 	orr.w	r3, r3, #4
 8001bb6:	6013      	str	r3, [r2, #0]
      break;
 8001bb8:	e031      	b.n	8001c1e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001bba:	4b1c      	ldr	r3, [pc, #112]	@ (8001c2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a1b      	ldr	r2, [pc, #108]	@ (8001c2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001bc0:	f023 0304 	bic.w	r3, r3, #4
 8001bc4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bcc:	4a18      	ldr	r2, [pc, #96]	@ (8001c30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001bce:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001bd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001bd6:	e022      	b.n	8001c1e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001bd8:	4b14      	ldr	r3, [pc, #80]	@ (8001c2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a13      	ldr	r2, [pc, #76]	@ (8001c2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001bde:	f023 0304 	bic.w	r3, r3, #4
 8001be2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001be4:	4b12      	ldr	r3, [pc, #72]	@ (8001c30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bea:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001bee:	4a10      	ldr	r2, [pc, #64]	@ (8001c30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001bf0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001bf4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001bf8:	e011      	b.n	8001c1e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8001c2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a0b      	ldr	r2, [pc, #44]	@ (8001c2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001c00:	f023 0304 	bic.w	r3, r3, #4
 8001c04:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001c06:	4b0a      	ldr	r3, [pc, #40]	@ (8001c30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c0c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001c10:	4a07      	ldr	r2, [pc, #28]	@ (8001c30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001c12:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001c16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001c1a:	e000      	b.n	8001c1e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001c1c:	bf00      	nop
  }
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000e010 	.word	0xe000e010
 8001c30:	46020c00 	.word	0x46020c00

08001c34 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001c3a:	4b19      	ldr	r3, [pc, #100]	@ (8001ca0 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0304 	and.w	r3, r3, #4
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d002      	beq.n	8001c4c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001c46:	2304      	movs	r3, #4
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	e021      	b.n	8001c90 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8001c4c:	4b15      	ldr	r3, [pc, #84]	@ (8001ca4 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8001c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c52:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001c56:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001c5e:	d011      	beq.n	8001c84 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001c66:	d810      	bhi.n	8001c8a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d004      	beq.n	8001c78 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c74:	d003      	beq.n	8001c7e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001c76:	e008      	b.n	8001c8a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	607b      	str	r3, [r7, #4]
        break;
 8001c7c:	e008      	b.n	8001c90 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	607b      	str	r3, [r7, #4]
        break;
 8001c82:	e005      	b.n	8001c90 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001c84:	2302      	movs	r3, #2
 8001c86:	607b      	str	r3, [r7, #4]
        break;
 8001c88:	e002      	b.n	8001c90 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
        break;
 8001c8e:	bf00      	nop
    }
  }
  return systick_source;
 8001c90:	687b      	ldr	r3, [r7, #4]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000e010 	.word	0xe000e010
 8001ca4:	46020c00 	.word	0x46020c00

08001ca8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e054      	b.n	8001d64 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	7f5b      	ldrb	r3, [r3, #29]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d105      	bne.n	8001cd0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff fafc 	bl	80012c8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	791b      	ldrb	r3, [r3, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d10c      	bne.n	8001cf8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a22      	ldr	r2, [pc, #136]	@ (8001d6c <HAL_CRC_Init+0xc4>)
 8001ce4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 0218 	bic.w	r2, r2, #24
 8001cf4:	609a      	str	r2, [r3, #8]
 8001cf6:	e00c      	b.n	8001d12 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6899      	ldr	r1, [r3, #8]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	461a      	mov	r2, r3
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f942 	bl	8001f8c <HAL_CRCEx_Polynomial_Set>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e028      	b.n	8001d64 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	795b      	ldrb	r3, [r3, #5]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d105      	bne.n	8001d26 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d22:	611a      	str	r2, [r3, #16]
 8001d24:	e004      	b.n	8001d30 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	6912      	ldr	r2, [r2, #16]
 8001d2e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695a      	ldr	r2, [r3, #20]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	699a      	ldr	r2, [r3, #24]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	04c11db7 	.word	0x04c11db7

08001d70 <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2202      	movs	r2, #2
 8001d84:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	2b03      	cmp	r3, #3
 8001d8c:	d006      	beq.n	8001d9c <HAL_CRC_Accumulate+0x2c>
 8001d8e:	2b03      	cmp	r3, #3
 8001d90:	d829      	bhi.n	8001de6 <HAL_CRC_Accumulate+0x76>
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d019      	beq.n	8001dca <HAL_CRC_Accumulate+0x5a>
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d01e      	beq.n	8001dd8 <HAL_CRC_Accumulate+0x68>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 8001d9a:	e024      	b.n	8001de6 <HAL_CRC_Accumulate+0x76>
      for (index = 0U; index < BufferLength; index++)
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	e00a      	b.n	8001db8 <HAL_CRC_Accumulate+0x48>
        hcrc->Instance->DR = pBuffer[index];
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	441a      	add	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6812      	ldr	r2, [r2, #0]
 8001db0:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	3301      	adds	r3, #1
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d3f0      	bcc.n	8001da2 <HAL_CRC_Accumulate+0x32>
      temp = hcrc->Instance->DR;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	613b      	str	r3, [r7, #16]
      break;
 8001dc8:	e00e      	b.n	8001de8 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	68b9      	ldr	r1, [r7, #8]
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f000 f812 	bl	8001df8 <CRC_Handle_8>
 8001dd4:	6138      	str	r0, [r7, #16]
      break;
 8001dd6:	e007      	b.n	8001de8 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	68b9      	ldr	r1, [r7, #8]
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f000 f89b 	bl	8001f18 <CRC_Handle_16>
 8001de2:	6138      	str	r0, [r7, #16]
      break;
 8001de4:	e000      	b.n	8001de8 <HAL_CRC_Accumulate+0x78>
      break;
 8001de6:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2201      	movs	r2, #1
 8001dec:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8001dee:	693b      	ldr	r3, [r7, #16]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b089      	sub	sp, #36	@ 0x24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001e04:	2300      	movs	r3, #0
 8001e06:	61fb      	str	r3, [r7, #28]
 8001e08:	e023      	b.n	8001e52 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	4413      	add	r3, r2
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	68b9      	ldr	r1, [r7, #8]
 8001e1e:	440b      	add	r3, r1
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001e24:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	3302      	adds	r3, #2
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	440b      	add	r3, r1
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001e34:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	3303      	adds	r3, #3
 8001e3c:	68b9      	ldr	r1, [r7, #8]
 8001e3e:	440b      	add	r3, r1
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001e48:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001e4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	61fb      	str	r3, [r7, #28]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	089b      	lsrs	r3, r3, #2
 8001e56:	69fa      	ldr	r2, [r7, #28]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d3d6      	bcc.n	8001e0a <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d04f      	beq.n	8001f06 <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d107      	bne.n	8001e80 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	68ba      	ldr	r2, [r7, #8]
 8001e76:	4413      	add	r3, r2
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	6812      	ldr	r2, [r2, #0]
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d117      	bne.n	8001eba <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	4413      	add	r3, r2
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	b21b      	sxth	r3, r3
 8001e96:	021b      	lsls	r3, r3, #8
 8001e98:	b21a      	sxth	r2, r3
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	440b      	add	r3, r1
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	b21b      	sxth	r3, r3
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	b21b      	sxth	r3, r3
 8001eac:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	8b7a      	ldrh	r2, [r7, #26]
 8001eb8:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	d120      	bne.n	8001f06 <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	68ba      	ldr	r2, [r7, #8]
 8001eca:	4413      	add	r3, r2
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	b21b      	sxth	r3, r3
 8001ed0:	021b      	lsls	r3, r3, #8
 8001ed2:	b21a      	sxth	r2, r3
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	3301      	adds	r3, #1
 8001eda:	68b9      	ldr	r1, [r7, #8]
 8001edc:	440b      	add	r3, r1
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	b21b      	sxth	r3, r3
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	b21b      	sxth	r3, r3
 8001ee6:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	8b7a      	ldrh	r2, [r7, #26]
 8001ef2:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	3302      	adds	r3, #2
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	4413      	add	r3, r2
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	6812      	ldr	r2, [r2, #0]
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3724      	adds	r7, #36	@ 0x24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b087      	sub	sp, #28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	e013      	b.n	8001f52 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	4413      	add	r3, r2
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	041a      	lsls	r2, r3, #16
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	3302      	adds	r3, #2
 8001f3c:	68b9      	ldr	r1, [r7, #8]
 8001f3e:	440b      	add	r3, r1
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	4619      	mov	r1, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	085b      	lsrs	r3, r3, #1
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d3e6      	bcc.n	8001f2a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d009      	beq.n	8001f7a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	4413      	add	r3, r2
 8001f74:	881a      	ldrh	r2, [r3, #0]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	371c      	adds	r7, #28
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001f9c:	231f      	movs	r3, #31
 8001f9e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d102      	bne.n	8001fb0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	75fb      	strb	r3, [r7, #23]
 8001fae:	e063      	b.n	8002078 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001fb0:	bf00      	nop
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1e5a      	subs	r2, r3, #1
 8001fb6:	613a      	str	r2, [r7, #16]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d009      	beq.n	8001fd0 <HAL_CRCEx_Polynomial_Set+0x44>
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	f003 031f 	and.w	r3, r3, #31
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0f0      	beq.n	8001fb2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b18      	cmp	r3, #24
 8001fd4:	d846      	bhi.n	8002064 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001fd6:	a201      	add	r2, pc, #4	@ (adr r2, 8001fdc <HAL_CRCEx_Polynomial_Set+0x50>)
 8001fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fdc:	0800206b 	.word	0x0800206b
 8001fe0:	08002065 	.word	0x08002065
 8001fe4:	08002065 	.word	0x08002065
 8001fe8:	08002065 	.word	0x08002065
 8001fec:	08002065 	.word	0x08002065
 8001ff0:	08002065 	.word	0x08002065
 8001ff4:	08002065 	.word	0x08002065
 8001ff8:	08002065 	.word	0x08002065
 8001ffc:	08002059 	.word	0x08002059
 8002000:	08002065 	.word	0x08002065
 8002004:	08002065 	.word	0x08002065
 8002008:	08002065 	.word	0x08002065
 800200c:	08002065 	.word	0x08002065
 8002010:	08002065 	.word	0x08002065
 8002014:	08002065 	.word	0x08002065
 8002018:	08002065 	.word	0x08002065
 800201c:	0800204d 	.word	0x0800204d
 8002020:	08002065 	.word	0x08002065
 8002024:	08002065 	.word	0x08002065
 8002028:	08002065 	.word	0x08002065
 800202c:	08002065 	.word	0x08002065
 8002030:	08002065 	.word	0x08002065
 8002034:	08002065 	.word	0x08002065
 8002038:	08002065 	.word	0x08002065
 800203c:	08002041 	.word	0x08002041
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	2b06      	cmp	r3, #6
 8002044:	d913      	bls.n	800206e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800204a:	e010      	b.n	800206e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	2b07      	cmp	r3, #7
 8002050:	d90f      	bls.n	8002072 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002056:	e00c      	b.n	8002072 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	2b0f      	cmp	r3, #15
 800205c:	d90b      	bls.n	8002076 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002062:	e008      	b.n	8002076 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	75fb      	strb	r3, [r7, #23]
        break;
 8002068:	e006      	b.n	8002078 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800206a:	bf00      	nop
 800206c:	e004      	b.n	8002078 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800206e:	bf00      	nop
 8002070:	e002      	b.n	8002078 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002072:	bf00      	nop
 8002074:	e000      	b.n	8002078 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002076:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002078:	7dfb      	ldrb	r3, [r7, #23]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10d      	bne.n	800209a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f023 0118 	bic.w	r1, r3, #24
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	430a      	orrs	r2, r1
 8002098:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800209a:	7dfb      	ldrb	r3, [r7, #23]
}
 800209c:	4618      	mov	r0, r3
 800209e:	371c      	adds	r7, #28
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80020b0:	f7ff fc36 	bl	8001920 <HAL_GetTick>
 80020b4:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e0db      	b.n	8002278 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a6e      	ldr	r2, [pc, #440]	@ (8002280 <HAL_DMA_Init+0x1d8>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	f000 809f 	beq.w	800220a <HAL_DMA_Init+0x162>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a6c      	ldr	r2, [pc, #432]	@ (8002284 <HAL_DMA_Init+0x1dc>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	f000 8099 	beq.w	800220a <HAL_DMA_Init+0x162>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a6a      	ldr	r2, [pc, #424]	@ (8002288 <HAL_DMA_Init+0x1e0>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	f000 8093 	beq.w	800220a <HAL_DMA_Init+0x162>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a68      	ldr	r2, [pc, #416]	@ (800228c <HAL_DMA_Init+0x1e4>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	f000 808d 	beq.w	800220a <HAL_DMA_Init+0x162>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a66      	ldr	r2, [pc, #408]	@ (8002290 <HAL_DMA_Init+0x1e8>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	f000 8087 	beq.w	800220a <HAL_DMA_Init+0x162>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a64      	ldr	r2, [pc, #400]	@ (8002294 <HAL_DMA_Init+0x1ec>)
 8002102:	4293      	cmp	r3, r2
 8002104:	f000 8081 	beq.w	800220a <HAL_DMA_Init+0x162>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a62      	ldr	r2, [pc, #392]	@ (8002298 <HAL_DMA_Init+0x1f0>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d07b      	beq.n	800220a <HAL_DMA_Init+0x162>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a61      	ldr	r2, [pc, #388]	@ (800229c <HAL_DMA_Init+0x1f4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d076      	beq.n	800220a <HAL_DMA_Init+0x162>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a5f      	ldr	r2, [pc, #380]	@ (80022a0 <HAL_DMA_Init+0x1f8>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d071      	beq.n	800220a <HAL_DMA_Init+0x162>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a5e      	ldr	r2, [pc, #376]	@ (80022a4 <HAL_DMA_Init+0x1fc>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d06c      	beq.n	800220a <HAL_DMA_Init+0x162>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a5c      	ldr	r2, [pc, #368]	@ (80022a8 <HAL_DMA_Init+0x200>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d067      	beq.n	800220a <HAL_DMA_Init+0x162>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a5b      	ldr	r2, [pc, #364]	@ (80022ac <HAL_DMA_Init+0x204>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d062      	beq.n	800220a <HAL_DMA_Init+0x162>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a59      	ldr	r2, [pc, #356]	@ (80022b0 <HAL_DMA_Init+0x208>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d05d      	beq.n	800220a <HAL_DMA_Init+0x162>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a58      	ldr	r2, [pc, #352]	@ (80022b4 <HAL_DMA_Init+0x20c>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d058      	beq.n	800220a <HAL_DMA_Init+0x162>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a56      	ldr	r2, [pc, #344]	@ (80022b8 <HAL_DMA_Init+0x210>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d053      	beq.n	800220a <HAL_DMA_Init+0x162>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a55      	ldr	r2, [pc, #340]	@ (80022bc <HAL_DMA_Init+0x214>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d04e      	beq.n	800220a <HAL_DMA_Init+0x162>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a53      	ldr	r2, [pc, #332]	@ (80022c0 <HAL_DMA_Init+0x218>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d049      	beq.n	800220a <HAL_DMA_Init+0x162>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a52      	ldr	r2, [pc, #328]	@ (80022c4 <HAL_DMA_Init+0x21c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d044      	beq.n	800220a <HAL_DMA_Init+0x162>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a50      	ldr	r2, [pc, #320]	@ (80022c8 <HAL_DMA_Init+0x220>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d03f      	beq.n	800220a <HAL_DMA_Init+0x162>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a4f      	ldr	r2, [pc, #316]	@ (80022cc <HAL_DMA_Init+0x224>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d03a      	beq.n	800220a <HAL_DMA_Init+0x162>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a4d      	ldr	r2, [pc, #308]	@ (80022d0 <HAL_DMA_Init+0x228>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d035      	beq.n	800220a <HAL_DMA_Init+0x162>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a4c      	ldr	r2, [pc, #304]	@ (80022d4 <HAL_DMA_Init+0x22c>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d030      	beq.n	800220a <HAL_DMA_Init+0x162>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a4a      	ldr	r2, [pc, #296]	@ (80022d8 <HAL_DMA_Init+0x230>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d02b      	beq.n	800220a <HAL_DMA_Init+0x162>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a49      	ldr	r2, [pc, #292]	@ (80022dc <HAL_DMA_Init+0x234>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d026      	beq.n	800220a <HAL_DMA_Init+0x162>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a47      	ldr	r2, [pc, #284]	@ (80022e0 <HAL_DMA_Init+0x238>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d021      	beq.n	800220a <HAL_DMA_Init+0x162>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a46      	ldr	r2, [pc, #280]	@ (80022e4 <HAL_DMA_Init+0x23c>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d01c      	beq.n	800220a <HAL_DMA_Init+0x162>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a44      	ldr	r2, [pc, #272]	@ (80022e8 <HAL_DMA_Init+0x240>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d017      	beq.n	800220a <HAL_DMA_Init+0x162>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a43      	ldr	r2, [pc, #268]	@ (80022ec <HAL_DMA_Init+0x244>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d012      	beq.n	800220a <HAL_DMA_Init+0x162>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a41      	ldr	r2, [pc, #260]	@ (80022f0 <HAL_DMA_Init+0x248>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d00d      	beq.n	800220a <HAL_DMA_Init+0x162>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a40      	ldr	r2, [pc, #256]	@ (80022f4 <HAL_DMA_Init+0x24c>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d008      	beq.n	800220a <HAL_DMA_Init+0x162>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a3e      	ldr	r2, [pc, #248]	@ (80022f8 <HAL_DMA_Init+0x250>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d003      	beq.n	800220a <HAL_DMA_Init+0x162>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a3d      	ldr	r2, [pc, #244]	@ (80022fc <HAL_DMA_Init+0x254>)
 8002208:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2202      	movs	r2, #2
 8002216:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	695a      	ldr	r2, [r3, #20]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f042 0206 	orr.w	r2, r2, #6
 8002228:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800222a:	e00f      	b.n	800224c <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800222c:	f7ff fb78 	bl	8001920 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b05      	cmp	r3, #5
 8002238:	d908      	bls.n	800224c <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2210      	movs	r2, #16
 800223e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2203      	movs	r2, #3
 8002244:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e015      	b.n	8002278 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1e8      	bne.n	800222c <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 fb18 	bl	8002890 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40020050 	.word	0x40020050
 8002284:	50020050 	.word	0x50020050
 8002288:	400200d0 	.word	0x400200d0
 800228c:	500200d0 	.word	0x500200d0
 8002290:	40020150 	.word	0x40020150
 8002294:	50020150 	.word	0x50020150
 8002298:	400201d0 	.word	0x400201d0
 800229c:	500201d0 	.word	0x500201d0
 80022a0:	40020250 	.word	0x40020250
 80022a4:	50020250 	.word	0x50020250
 80022a8:	400202d0 	.word	0x400202d0
 80022ac:	500202d0 	.word	0x500202d0
 80022b0:	40020350 	.word	0x40020350
 80022b4:	50020350 	.word	0x50020350
 80022b8:	400203d0 	.word	0x400203d0
 80022bc:	500203d0 	.word	0x500203d0
 80022c0:	40020450 	.word	0x40020450
 80022c4:	50020450 	.word	0x50020450
 80022c8:	400204d0 	.word	0x400204d0
 80022cc:	500204d0 	.word	0x500204d0
 80022d0:	40020550 	.word	0x40020550
 80022d4:	50020550 	.word	0x50020550
 80022d8:	400205d0 	.word	0x400205d0
 80022dc:	500205d0 	.word	0x500205d0
 80022e0:	40020650 	.word	0x40020650
 80022e4:	50020650 	.word	0x50020650
 80022e8:	400206d0 	.word	0x400206d0
 80022ec:	500206d0 	.word	0x500206d0
 80022f0:	40020750 	.word	0x40020750
 80022f4:	50020750 	.word	0x50020750
 80022f8:	400207d0 	.word	0x400207d0
 80022fc:	500207d0 	.word	0x500207d0

08002300 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
 800230c:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e04f      	b.n	80023b8 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800231e:	2b01      	cmp	r3, #1
 8002320:	d101      	bne.n	8002326 <HAL_DMA_Start_IT+0x26>
 8002322:	2302      	movs	r3, #2
 8002324:	e048      	b.n	80023b8 <HAL_DMA_Start_IT+0xb8>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b01      	cmp	r3, #1
 8002338:	d136      	bne.n	80023a8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2202      	movs	r2, #2
 800233e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f000 fa78 	bl	8002844 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	695a      	ldr	r2, [r3, #20]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8002362:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002368:	2b00      	cmp	r3, #0
 800236a:	d007      	beq.n	800237c <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	695a      	ldr	r2, [r3, #20]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800237a:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002380:	2b00      	cmp	r3, #0
 8002382:	d007      	beq.n	8002394 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002392:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0201 	orr.w	r2, r2, #1
 80023a2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
 80023a6:	e007      	b.n	80023b8 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2240      	movs	r2, #64	@ 0x40
 80023ac:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80023c8:	f7ff faaa 	bl	8001920 <HAL_GetTick>
 80023cc:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e06b      	b.n	80024b0 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d008      	beq.n	80023f6 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2220      	movs	r2, #32
 80023e8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e05c      	b.n	80024b0 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	695a      	ldr	r2, [r3, #20]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f042 0204 	orr.w	r2, r2, #4
 8002404:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2205      	movs	r2, #5
 800240a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800240e:	e020      	b.n	8002452 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002410:	f7ff fa86 	bl	8001920 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b05      	cmp	r3, #5
 800241c:	d919      	bls.n	8002452 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002422:	f043 0210 	orr.w	r2, r3, #16
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2203      	movs	r2, #3
 800242e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002442:	2201      	movs	r2, #1
 8002444:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e02e      	b.n	80024b0 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0d7      	beq.n	8002410 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	695a      	ldr	r2, [r3, #20]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0202 	orr.w	r2, r2, #2
 800246e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2204      	movs	r2, #4
 8002474:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8002480:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800248e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002492:	2b00      	cmp	r3, #0
 8002494:	d007      	beq.n	80024a6 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800249a:	2201      	movs	r2, #1
 800249c:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2200      	movs	r2, #0
 80024a4:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e019      	b.n	80024fe <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d004      	beq.n	80024e0 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2220      	movs	r2, #32
 80024da:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e00e      	b.n	80024fe <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2204      	movs	r2, #4
 80024e4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6812      	ldr	r2, [r2, #0]
 80024f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80024f6:	f043 0304 	orr.w	r3, r3, #4
 80024fa:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b086      	sub	sp, #24
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800251a:	f023 030f 	bic.w	r3, r3, #15
 800251e:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002528:	3b50      	subs	r3, #80	@ 0x50
 800252a:	09db      	lsrs	r3, r3, #7
 800252c:	f003 031f 	and.w	r3, r3, #31
 8002530:	2201      	movs	r2, #1
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	4013      	ands	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 813b 	beq.w	80027c0 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002554:	2b00      	cmp	r3, #0
 8002556:	d011      	beq.n	800257c <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00a      	beq.n	800257c <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800256e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002574:	f043 0201 	orr.w	r2, r3, #1
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002586:	2b00      	cmp	r3, #0
 8002588:	d011      	beq.n	80025ae <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00a      	beq.n	80025ae <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80025a0:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a6:	f043 0202 	orr.w	r2, r3, #2
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d011      	beq.n	80025e0 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00a      	beq.n	80025e0 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80025d2:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d8:	f043 0204 	orr.w	r2, r3, #4
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d011      	beq.n	8002612 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002604:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800260a:	f043 0208 	orr.w	r2, r3, #8
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800261c:	2b00      	cmp	r3, #0
 800261e:	d013      	beq.n	8002648 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00c      	beq.n	8002648 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002636:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d04c      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d045      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800266c:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b04      	cmp	r3, #4
 8002678:	d12e      	bne.n	80026d8 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	695a      	ldr	r2, [r3, #20]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002688:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	695a      	ldr	r2, [r3, #20]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f042 0202 	orr.w	r2, r2, #2
 8002698:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d007      	beq.n	80026be <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026b2:	2201      	movs	r2, #1
 80026b4:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2200      	movs	r2, #0
 80026bc:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d07a      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	4798      	blx	r3
        }

        return;
 80026d6:	e075      	b.n	80027c4 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2205      	movs	r2, #5
 80026dc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d039      	beq.n	8002772 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002708:	2b00      	cmp	r3, #0
 800270a:	d032      	beq.n	8002772 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002710:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002714:	2b00      	cmp	r3, #0
 8002716:	d012      	beq.n	800273e <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800271e:	2b00      	cmp	r3, #0
 8002720:	d116      	bne.n	8002750 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002728:	2b00      	cmp	r3, #0
 800272a:	d111      	bne.n	8002750 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002738:	2201      	movs	r2, #1
 800273a:	731a      	strb	r2, [r3, #12]
 800273c:	e008      	b.n	8002750 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002744:	2b00      	cmp	r3, #0
 8002746:	d103      	bne.n	8002750 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002758:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002776:	2b00      	cmp	r3, #0
 8002778:	d025      	beq.n	80027c6 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	695a      	ldr	r2, [r3, #20]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f042 0202 	orr.w	r2, r2, #2
 8002788:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027a2:	2201      	movs	r2, #1
 80027a4:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d007      	beq.n	80027c6 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	4798      	blx	r3
 80027be:	e002      	b.n	80027c6 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 80027c0:	bf00      	nop
 80027c2:	e000      	b.n	80027c6 <HAL_DMA_IRQHandler+0x2bc>
        return;
 80027c4:	bf00      	nop
    }
  }
}
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e02b      	b.n	8002838 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80027e8:	f023 030f 	bic.w	r3, r3, #15
 80027ec:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f6:	3b50      	subs	r3, #80	@ 0x50
 80027f8:	09db      	lsrs	r3, r3, #7
 80027fa:	f003 031f 	and.w	r3, r3, #31
 80027fe:	2201      	movs	r2, #1
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	f003 0310 	and.w	r3, r3, #16
 800280c:	2b00      	cmp	r3, #0
 800280e:	d012      	beq.n	8002836 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	f003 0311 	and.w	r3, r3, #17
 8002816:	2b11      	cmp	r3, #17
 8002818:	d106      	bne.n	8002828 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	431a      	orrs	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	e006      	b.n	8002836 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	43db      	mvns	r3, r3
 8002830:	401a      	ands	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
 8002850:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002858:	0c1b      	lsrs	r3, r3, #16
 800285a:	041b      	lsls	r3, r3, #16
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	b291      	uxth	r1, r2
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	430b      	orrs	r3, r1
 8002866:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8002870:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002882:	bf00      	nop
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
	...

08002890 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	695a      	ldr	r2, [r3, #20]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	431a      	orrs	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a53      	ldr	r2, [pc, #332]	@ (8002a1c <DMA_Init+0x18c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	f000 80a0 	beq.w	8002a16 <DMA_Init+0x186>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a51      	ldr	r2, [pc, #324]	@ (8002a20 <DMA_Init+0x190>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	f000 809a 	beq.w	8002a16 <DMA_Init+0x186>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a4f      	ldr	r2, [pc, #316]	@ (8002a24 <DMA_Init+0x194>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	f000 8094 	beq.w	8002a16 <DMA_Init+0x186>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a4d      	ldr	r2, [pc, #308]	@ (8002a28 <DMA_Init+0x198>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	f000 808e 	beq.w	8002a16 <DMA_Init+0x186>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a4b      	ldr	r2, [pc, #300]	@ (8002a2c <DMA_Init+0x19c>)
 8002900:	4293      	cmp	r3, r2
 8002902:	f000 8088 	beq.w	8002a16 <DMA_Init+0x186>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a49      	ldr	r2, [pc, #292]	@ (8002a30 <DMA_Init+0x1a0>)
 800290c:	4293      	cmp	r3, r2
 800290e:	f000 8082 	beq.w	8002a16 <DMA_Init+0x186>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a47      	ldr	r2, [pc, #284]	@ (8002a34 <DMA_Init+0x1a4>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d07c      	beq.n	8002a16 <DMA_Init+0x186>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a45      	ldr	r2, [pc, #276]	@ (8002a38 <DMA_Init+0x1a8>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d077      	beq.n	8002a16 <DMA_Init+0x186>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a44      	ldr	r2, [pc, #272]	@ (8002a3c <DMA_Init+0x1ac>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d072      	beq.n	8002a16 <DMA_Init+0x186>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a42      	ldr	r2, [pc, #264]	@ (8002a40 <DMA_Init+0x1b0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d06d      	beq.n	8002a16 <DMA_Init+0x186>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a41      	ldr	r2, [pc, #260]	@ (8002a44 <DMA_Init+0x1b4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d068      	beq.n	8002a16 <DMA_Init+0x186>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a3f      	ldr	r2, [pc, #252]	@ (8002a48 <DMA_Init+0x1b8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d063      	beq.n	8002a16 <DMA_Init+0x186>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a3e      	ldr	r2, [pc, #248]	@ (8002a4c <DMA_Init+0x1bc>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d05e      	beq.n	8002a16 <DMA_Init+0x186>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a3c      	ldr	r2, [pc, #240]	@ (8002a50 <DMA_Init+0x1c0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d059      	beq.n	8002a16 <DMA_Init+0x186>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a3b      	ldr	r2, [pc, #236]	@ (8002a54 <DMA_Init+0x1c4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d054      	beq.n	8002a16 <DMA_Init+0x186>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a39      	ldr	r2, [pc, #228]	@ (8002a58 <DMA_Init+0x1c8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d04f      	beq.n	8002a16 <DMA_Init+0x186>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a38      	ldr	r2, [pc, #224]	@ (8002a5c <DMA_Init+0x1cc>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d04a      	beq.n	8002a16 <DMA_Init+0x186>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a36      	ldr	r2, [pc, #216]	@ (8002a60 <DMA_Init+0x1d0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d045      	beq.n	8002a16 <DMA_Init+0x186>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a35      	ldr	r2, [pc, #212]	@ (8002a64 <DMA_Init+0x1d4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d040      	beq.n	8002a16 <DMA_Init+0x186>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a33      	ldr	r2, [pc, #204]	@ (8002a68 <DMA_Init+0x1d8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d03b      	beq.n	8002a16 <DMA_Init+0x186>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a32      	ldr	r2, [pc, #200]	@ (8002a6c <DMA_Init+0x1dc>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d036      	beq.n	8002a16 <DMA_Init+0x186>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a30      	ldr	r2, [pc, #192]	@ (8002a70 <DMA_Init+0x1e0>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d031      	beq.n	8002a16 <DMA_Init+0x186>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a2f      	ldr	r2, [pc, #188]	@ (8002a74 <DMA_Init+0x1e4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d02c      	beq.n	8002a16 <DMA_Init+0x186>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a2d      	ldr	r2, [pc, #180]	@ (8002a78 <DMA_Init+0x1e8>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d027      	beq.n	8002a16 <DMA_Init+0x186>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a2c      	ldr	r2, [pc, #176]	@ (8002a7c <DMA_Init+0x1ec>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d022      	beq.n	8002a16 <DMA_Init+0x186>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a2a      	ldr	r2, [pc, #168]	@ (8002a80 <DMA_Init+0x1f0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d01d      	beq.n	8002a16 <DMA_Init+0x186>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a29      	ldr	r2, [pc, #164]	@ (8002a84 <DMA_Init+0x1f4>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d018      	beq.n	8002a16 <DMA_Init+0x186>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a27      	ldr	r2, [pc, #156]	@ (8002a88 <DMA_Init+0x1f8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d013      	beq.n	8002a16 <DMA_Init+0x186>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a26      	ldr	r2, [pc, #152]	@ (8002a8c <DMA_Init+0x1fc>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d00e      	beq.n	8002a16 <DMA_Init+0x186>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a24      	ldr	r2, [pc, #144]	@ (8002a90 <DMA_Init+0x200>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d009      	beq.n	8002a16 <DMA_Init+0x186>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a23      	ldr	r2, [pc, #140]	@ (8002a94 <DMA_Init+0x204>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d004      	beq.n	8002a16 <DMA_Init+0x186>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a21      	ldr	r2, [pc, #132]	@ (8002a98 <DMA_Init+0x208>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d142      	bne.n	8002a9c <DMA_Init+0x20c>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e041      	b.n	8002a9e <DMA_Init+0x20e>
 8002a1a:	bf00      	nop
 8002a1c:	40020050 	.word	0x40020050
 8002a20:	50020050 	.word	0x50020050
 8002a24:	400200d0 	.word	0x400200d0
 8002a28:	500200d0 	.word	0x500200d0
 8002a2c:	40020150 	.word	0x40020150
 8002a30:	50020150 	.word	0x50020150
 8002a34:	400201d0 	.word	0x400201d0
 8002a38:	500201d0 	.word	0x500201d0
 8002a3c:	40020250 	.word	0x40020250
 8002a40:	50020250 	.word	0x50020250
 8002a44:	400202d0 	.word	0x400202d0
 8002a48:	500202d0 	.word	0x500202d0
 8002a4c:	40020350 	.word	0x40020350
 8002a50:	50020350 	.word	0x50020350
 8002a54:	400203d0 	.word	0x400203d0
 8002a58:	500203d0 	.word	0x500203d0
 8002a5c:	40020450 	.word	0x40020450
 8002a60:	50020450 	.word	0x50020450
 8002a64:	400204d0 	.word	0x400204d0
 8002a68:	500204d0 	.word	0x500204d0
 8002a6c:	40020550 	.word	0x40020550
 8002a70:	50020550 	.word	0x50020550
 8002a74:	400205d0 	.word	0x400205d0
 8002a78:	500205d0 	.word	0x500205d0
 8002a7c:	40020650 	.word	0x40020650
 8002a80:	50020650 	.word	0x50020650
 8002a84:	400206d0 	.word	0x400206d0
 8002a88:	500206d0 	.word	0x500206d0
 8002a8c:	40020750 	.word	0x40020750
 8002a90:	50020750 	.word	0x50020750
 8002a94:	400207d0 	.word	0x400207d0
 8002a98:	500207d0 	.word	0x500207d0
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d012      	beq.n	8002ac8 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	051b      	lsls	r3, r3, #20
 8002aae:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002ab2:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002ac0:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ace:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002afa:	f040 80b0 	bne.w	8002c5e <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a82      	ldr	r2, [pc, #520]	@ (8002d0c <DMA_Init+0x47c>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	f000 80a0 	beq.w	8002c4a <DMA_Init+0x3ba>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a80      	ldr	r2, [pc, #512]	@ (8002d10 <DMA_Init+0x480>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	f000 809a 	beq.w	8002c4a <DMA_Init+0x3ba>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a7e      	ldr	r2, [pc, #504]	@ (8002d14 <DMA_Init+0x484>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	f000 8094 	beq.w	8002c4a <DMA_Init+0x3ba>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a7c      	ldr	r2, [pc, #496]	@ (8002d18 <DMA_Init+0x488>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	f000 808e 	beq.w	8002c4a <DMA_Init+0x3ba>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a7a      	ldr	r2, [pc, #488]	@ (8002d1c <DMA_Init+0x48c>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	f000 8088 	beq.w	8002c4a <DMA_Init+0x3ba>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a78      	ldr	r2, [pc, #480]	@ (8002d20 <DMA_Init+0x490>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	f000 8082 	beq.w	8002c4a <DMA_Init+0x3ba>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a76      	ldr	r2, [pc, #472]	@ (8002d24 <DMA_Init+0x494>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d07c      	beq.n	8002c4a <DMA_Init+0x3ba>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a74      	ldr	r2, [pc, #464]	@ (8002d28 <DMA_Init+0x498>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d077      	beq.n	8002c4a <DMA_Init+0x3ba>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a73      	ldr	r2, [pc, #460]	@ (8002d2c <DMA_Init+0x49c>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d072      	beq.n	8002c4a <DMA_Init+0x3ba>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a71      	ldr	r2, [pc, #452]	@ (8002d30 <DMA_Init+0x4a0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d06d      	beq.n	8002c4a <DMA_Init+0x3ba>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a70      	ldr	r2, [pc, #448]	@ (8002d34 <DMA_Init+0x4a4>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d068      	beq.n	8002c4a <DMA_Init+0x3ba>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a6e      	ldr	r2, [pc, #440]	@ (8002d38 <DMA_Init+0x4a8>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d063      	beq.n	8002c4a <DMA_Init+0x3ba>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a6d      	ldr	r2, [pc, #436]	@ (8002d3c <DMA_Init+0x4ac>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d05e      	beq.n	8002c4a <DMA_Init+0x3ba>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a6b      	ldr	r2, [pc, #428]	@ (8002d40 <DMA_Init+0x4b0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d059      	beq.n	8002c4a <DMA_Init+0x3ba>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a6a      	ldr	r2, [pc, #424]	@ (8002d44 <DMA_Init+0x4b4>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d054      	beq.n	8002c4a <DMA_Init+0x3ba>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a68      	ldr	r2, [pc, #416]	@ (8002d48 <DMA_Init+0x4b8>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d04f      	beq.n	8002c4a <DMA_Init+0x3ba>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a67      	ldr	r2, [pc, #412]	@ (8002d4c <DMA_Init+0x4bc>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d04a      	beq.n	8002c4a <DMA_Init+0x3ba>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a65      	ldr	r2, [pc, #404]	@ (8002d50 <DMA_Init+0x4c0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d045      	beq.n	8002c4a <DMA_Init+0x3ba>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a64      	ldr	r2, [pc, #400]	@ (8002d54 <DMA_Init+0x4c4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d040      	beq.n	8002c4a <DMA_Init+0x3ba>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a62      	ldr	r2, [pc, #392]	@ (8002d58 <DMA_Init+0x4c8>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d03b      	beq.n	8002c4a <DMA_Init+0x3ba>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a61      	ldr	r2, [pc, #388]	@ (8002d5c <DMA_Init+0x4cc>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d036      	beq.n	8002c4a <DMA_Init+0x3ba>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a5f      	ldr	r2, [pc, #380]	@ (8002d60 <DMA_Init+0x4d0>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d031      	beq.n	8002c4a <DMA_Init+0x3ba>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a5e      	ldr	r2, [pc, #376]	@ (8002d64 <DMA_Init+0x4d4>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d02c      	beq.n	8002c4a <DMA_Init+0x3ba>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a5c      	ldr	r2, [pc, #368]	@ (8002d68 <DMA_Init+0x4d8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d027      	beq.n	8002c4a <DMA_Init+0x3ba>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a5b      	ldr	r2, [pc, #364]	@ (8002d6c <DMA_Init+0x4dc>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d022      	beq.n	8002c4a <DMA_Init+0x3ba>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a59      	ldr	r2, [pc, #356]	@ (8002d70 <DMA_Init+0x4e0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d01d      	beq.n	8002c4a <DMA_Init+0x3ba>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a58      	ldr	r2, [pc, #352]	@ (8002d74 <DMA_Init+0x4e4>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d018      	beq.n	8002c4a <DMA_Init+0x3ba>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a56      	ldr	r2, [pc, #344]	@ (8002d78 <DMA_Init+0x4e8>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d013      	beq.n	8002c4a <DMA_Init+0x3ba>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a55      	ldr	r2, [pc, #340]	@ (8002d7c <DMA_Init+0x4ec>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d00e      	beq.n	8002c4a <DMA_Init+0x3ba>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a53      	ldr	r2, [pc, #332]	@ (8002d80 <DMA_Init+0x4f0>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d009      	beq.n	8002c4a <DMA_Init+0x3ba>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a52      	ldr	r2, [pc, #328]	@ (8002d84 <DMA_Init+0x4f4>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d004      	beq.n	8002c4a <DMA_Init+0x3ba>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a50      	ldr	r2, [pc, #320]	@ (8002d88 <DMA_Init+0x4f8>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d101      	bne.n	8002c4e <DMA_Init+0x3be>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <DMA_Init+0x3c0>
 8002c4e:	2300      	movs	r3, #0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00d      	beq.n	8002c70 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	e008      	b.n	8002c70 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c66:	d103      	bne.n	8002c70 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c6e:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c76:	4b45      	ldr	r3, [pc, #276]	@ (8002d8c <DMA_Init+0x4fc>)
 8002c78:	4013      	ands	r3, r2
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6812      	ldr	r2, [r2, #0]
 8002c7e:	68f9      	ldr	r1, [r7, #12]
 8002c80:	430b      	orrs	r3, r1
 8002c82:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a36      	ldr	r2, [pc, #216]	@ (8002d6c <DMA_Init+0x4dc>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d022      	beq.n	8002cdc <DMA_Init+0x44c>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a35      	ldr	r2, [pc, #212]	@ (8002d70 <DMA_Init+0x4e0>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d01d      	beq.n	8002cdc <DMA_Init+0x44c>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a33      	ldr	r2, [pc, #204]	@ (8002d74 <DMA_Init+0x4e4>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d018      	beq.n	8002cdc <DMA_Init+0x44c>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a32      	ldr	r2, [pc, #200]	@ (8002d78 <DMA_Init+0x4e8>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d013      	beq.n	8002cdc <DMA_Init+0x44c>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a30      	ldr	r2, [pc, #192]	@ (8002d7c <DMA_Init+0x4ec>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d00e      	beq.n	8002cdc <DMA_Init+0x44c>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a2f      	ldr	r2, [pc, #188]	@ (8002d80 <DMA_Init+0x4f0>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d009      	beq.n	8002cdc <DMA_Init+0x44c>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a2d      	ldr	r2, [pc, #180]	@ (8002d84 <DMA_Init+0x4f4>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d004      	beq.n	8002cdc <DMA_Init+0x44c>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a2c      	ldr	r2, [pc, #176]	@ (8002d88 <DMA_Init+0x4f8>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d101      	bne.n	8002ce0 <DMA_Init+0x450>
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e000      	b.n	8002ce2 <DMA_Init+0x452>
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d007      	beq.n	8002cf6 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2200      	movs	r2, #0
 8002cec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8002cfe:	bf00      	nop
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40020050 	.word	0x40020050
 8002d10:	50020050 	.word	0x50020050
 8002d14:	400200d0 	.word	0x400200d0
 8002d18:	500200d0 	.word	0x500200d0
 8002d1c:	40020150 	.word	0x40020150
 8002d20:	50020150 	.word	0x50020150
 8002d24:	400201d0 	.word	0x400201d0
 8002d28:	500201d0 	.word	0x500201d0
 8002d2c:	40020250 	.word	0x40020250
 8002d30:	50020250 	.word	0x50020250
 8002d34:	400202d0 	.word	0x400202d0
 8002d38:	500202d0 	.word	0x500202d0
 8002d3c:	40020350 	.word	0x40020350
 8002d40:	50020350 	.word	0x50020350
 8002d44:	400203d0 	.word	0x400203d0
 8002d48:	500203d0 	.word	0x500203d0
 8002d4c:	40020450 	.word	0x40020450
 8002d50:	50020450 	.word	0x50020450
 8002d54:	400204d0 	.word	0x400204d0
 8002d58:	500204d0 	.word	0x500204d0
 8002d5c:	40020550 	.word	0x40020550
 8002d60:	50020550 	.word	0x50020550
 8002d64:	400205d0 	.word	0x400205d0
 8002d68:	500205d0 	.word	0x500205d0
 8002d6c:	40020650 	.word	0x40020650
 8002d70:	50020650 	.word	0x50020650
 8002d74:	400206d0 	.word	0x400206d0
 8002d78:	500206d0 	.word	0x500206d0
 8002d7c:	40020750 	.word	0x40020750
 8002d80:	50020750 	.word	0x50020750
 8002d84:	400207d0 	.word	0x400207d0
 8002d88:	500207d0 	.word	0x500207d0
 8002d8c:	3cc03180 	.word	0x3cc03180

08002d90 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_DMAEx_List_Start_IT+0x16>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e082      	b.n	8002eb0 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002db0:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dbc:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8002dbe:	7dfb      	ldrb	r3, [r7, #23]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d005      	beq.n	8002dd0 <HAL_DMAEx_List_Start_IT+0x40>
 8002dc4:	7dfb      	ldrb	r3, [r7, #23]
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d16a      	bne.n	8002ea0 <HAL_DMAEx_List_Start_IT+0x110>
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d067      	beq.n	8002ea0 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d157      	bne.n	8002e8c <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_DMAEx_List_Start_IT+0x5a>
 8002de6:	2302      	movs	r3, #2
 8002de8:	e062      	b.n	8002eb0 <HAL_DMAEx_List_Start_IT+0x120>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2202      	movs	r2, #2
 8002df6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dfe:	2202      	movs	r2, #2
 8002e00:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695a      	ldr	r2, [r3, #20]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8002e1e:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d007      	beq.n	8002e38 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695a      	ldr	r2, [r3, #20]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e36:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d007      	beq.n	8002e50 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695a      	ldr	r2, [r3, #20]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e4e:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f107 010c 	add.w	r1, r7, #12
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 f82b 	bl	8002eb8 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4619      	mov	r1, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	0c0b      	lsrs	r3, r1, #16
 8002e70:	041b      	lsls	r3, r3, #16
 8002e72:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002e80:	4013      	ands	r3, r2
 8002e82:	68f9      	ldr	r1, [r7, #12]
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6812      	ldr	r2, [r2, #0]
 8002e88:	430b      	orrs	r3, r1
 8002e8a:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	695a      	ldr	r2, [r3, #20]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0201 	orr.w	r2, r2, #1
 8002e9a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	e007      	b.n	8002eb0 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2240      	movs	r2, #64	@ 0x40
 8002ea4:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00c      	beq.n	8002eea <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d002      	beq.n	8002edc <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8002f10 <DMA_List_GetCLLRNodeInfo+0x58>)
 8002eda:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00f      	beq.n	8002f02 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2207      	movs	r2, #7
 8002ee6:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8002ee8:	e00b      	b.n	8002f02 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d002      	beq.n	8002ef6 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	4a08      	ldr	r2, [pc, #32]	@ (8002f14 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8002ef4:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d002      	beq.n	8002f02 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2205      	movs	r2, #5
 8002f00:	601a      	str	r2, [r3, #0]
}
 8002f02:	bf00      	nop
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	fe010000 	.word	0xfe010000
 8002f14:	f8010000 	.word	0xf8010000

08002f18 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t DataAddress)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002f24:	4b1f      	ldr	r3, [pc, #124]	@ (8002fa4 <HAL_FLASH_Program+0x8c>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d101      	bne.n	8002f30 <HAL_FLASH_Program+0x18>
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	e034      	b.n	8002f9a <HAL_FLASH_Program+0x82>
 8002f30:	4b1c      	ldr	r3, [pc, #112]	@ (8002fa4 <HAL_FLASH_Program+0x8c>)
 8002f32:	2201      	movs	r2, #1
 8002f34:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002f36:	4b1b      	ldr	r3, [pc, #108]	@ (8002fa4 <HAL_FLASH_Program+0x8c>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002f3c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002f40:	f000 f8ba 	bl	80030b8 <FLASH_WaitForLastOperation>
 8002f44:	4603      	mov	r3, r0
 8002f46:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8002f48:	7dfb      	ldrb	r3, [r7, #23]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d121      	bne.n	8002f92 <HAL_FLASH_Program+0x7a>
  {
    /* Set current operation type */
    pFlash.ProcedureOnGoing = TypeProgram;
 8002f4e:	4a15      	ldr	r2, [pc, #84]	@ (8002fa4 <HAL_FLASH_Program+0x8c>)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8002f54:	4b14      	ldr	r3, [pc, #80]	@ (8002fa8 <HAL_FLASH_Program+0x90>)
 8002f56:	613b      	str	r3, [r7, #16]

    if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_QUADWORD)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d104      	bne.n	8002f6c <HAL_FLASH_Program+0x54>
    {
      /* Program a quad-word (128-bit) at a specified address */
      FLASH_Program_QuadWord(Address, DataAddress);
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	68b8      	ldr	r0, [r7, #8]
 8002f66:	f000 f8ed 	bl	8003144 <FLASH_Program_QuadWord>
 8002f6a:	e003      	b.n	8002f74 <HAL_FLASH_Program+0x5c>
    }
    else
    {
      /* Program a burst of 8 quad-words at a specified address */
      FLASH_Program_Burst(Address, DataAddress);
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	68b8      	ldr	r0, [r7, #8]
 8002f70:	f000 f924 	bl	80031bc <FLASH_Program_Burst>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002f74:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002f78:	f000 f89e 	bl	80030b8 <FLASH_WaitForLastOperation>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG (and BWR Bit in Burst programming mode) */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK)));
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	401a      	ands	r2, r3
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002f92:	4b04      	ldr	r3, [pc, #16]	@ (8002fa4 <HAL_FLASH_Program+0x8c>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8002f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	2000000c 	.word	0x2000000c
 8002fa8:	40022028 	.word	0x40022028

08002fac <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 8002fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe4 <HAL_FLASH_Unlock+0x38>)
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	da0b      	bge.n	8002fd6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 8002fbe:	4b09      	ldr	r3, [pc, #36]	@ (8002fe4 <HAL_FLASH_Unlock+0x38>)
 8002fc0:	4a09      	ldr	r2, [pc, #36]	@ (8002fe8 <HAL_FLASH_Unlock+0x3c>)
 8002fc2:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 8002fc4:	4b07      	ldr	r3, [pc, #28]	@ (8002fe4 <HAL_FLASH_Unlock+0x38>)
 8002fc6:	4a09      	ldr	r2, [pc, #36]	@ (8002fec <HAL_FLASH_Unlock+0x40>)
 8002fc8:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 8002fca:	4b06      	ldr	r3, [pc, #24]	@ (8002fe4 <HAL_FLASH_Unlock+0x38>)
 8002fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	da01      	bge.n	8002fd6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8002fd6:	79fb      	ldrb	r3, [r7, #7]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	40022000 	.word	0x40022000
 8002fe8:	45670123 	.word	0x45670123
 8002fec:	cdef89ab 	.word	0xcdef89ab

08002ff0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->NSCR, FLASH_NSCR_LOCK);
 8002ffa:	4b09      	ldr	r3, [pc, #36]	@ (8003020 <HAL_FLASH_Lock+0x30>)
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ffe:	4a08      	ldr	r2, [pc, #32]	@ (8003020 <HAL_FLASH_Lock+0x30>)
 8003000:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003004:	6293      	str	r3, [r2, #40]	@ 0x28

  /* verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 8003006:	4b06      	ldr	r3, [pc, #24]	@ (8003020 <HAL_FLASH_Lock+0x30>)
 8003008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300a:	2b00      	cmp	r3, #0
 800300c:	da01      	bge.n	8003012 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	71fb      	strb	r3, [r7, #7]
      status = HAL_OK;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8003012:	79fb      	ldrb	r3, [r7, #7]
}
 8003014:	4618      	mov	r0, r3
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	40022000 	.word	0x40022000

08003024 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_OPTLOCK) != 0U)
 8003028:	4b0c      	ldr	r3, [pc, #48]	@ (800305c <HAL_FLASH_OB_Unlock+0x38>)
 800302a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800302c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00d      	beq.n	8003050 <HAL_FLASH_OB_Unlock+0x2c>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8003034:	4b09      	ldr	r3, [pc, #36]	@ (800305c <HAL_FLASH_OB_Unlock+0x38>)
 8003036:	4a0a      	ldr	r2, [pc, #40]	@ (8003060 <HAL_FLASH_OB_Unlock+0x3c>)
 8003038:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800303a:	4b08      	ldr	r3, [pc, #32]	@ (800305c <HAL_FLASH_OB_Unlock+0x38>)
 800303c:	4a09      	ldr	r2, [pc, #36]	@ (8003064 <HAL_FLASH_OB_Unlock+0x40>)
 800303e:	611a      	str	r2, [r3, #16]

    /* Verify that the Option Bytes are unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_NSCR_OPTLOCK) != 0U)
 8003040:	4b06      	ldr	r3, [pc, #24]	@ (800305c <HAL_FLASH_OB_Unlock+0x38>)
 8003042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003044:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <HAL_FLASH_OB_Unlock+0x2c>
    {
      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e000      	b.n	8003052 <HAL_FLASH_OB_Unlock+0x2e>
    }
  }

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	40022000 	.word	0x40022000
 8003060:	08192a3b 	.word	0x08192a3b
 8003064:	4c5d6e7f 	.word	0x4c5d6e7f

08003068 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->NSCR, FLASH_NSCR_OPTLOCK);
 800306c:	4b09      	ldr	r3, [pc, #36]	@ (8003094 <HAL_FLASH_OB_Lock+0x2c>)
 800306e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003070:	4a08      	ldr	r2, [pc, #32]	@ (8003094 <HAL_FLASH_OB_Lock+0x2c>)
 8003072:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003076:	6293      	str	r3, [r2, #40]	@ 0x28

  /* Verify that the Option Bytes are locked */
  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_OPTLOCK) != 0U)
 8003078:	4b06      	ldr	r3, [pc, #24]	@ (8003094 <HAL_FLASH_OB_Lock+0x2c>)
 800307a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <HAL_FLASH_OB_Lock+0x20>
  {
    return HAL_OK;
 8003084:	2300      	movs	r3, #0
 8003086:	e000      	b.n	800308a <HAL_FLASH_OB_Lock+0x22>
  }

  return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
}
 800308a:	4618      	mov	r0, r3
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	40022000 	.word	0x40022000

08003098 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  /* Set the bit to force the option byte reloading */
  SET_BIT(FLASH->NSCR, FLASH_NSCR_OBL_LAUNCH);
 800309c:	4b05      	ldr	r3, [pc, #20]	@ (80030b4 <HAL_FLASH_OB_Launch+0x1c>)
 800309e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a0:	4a04      	ldr	r2, [pc, #16]	@ (80030b4 <HAL_FLASH_OB_Launch+0x1c>)
 80030a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80030a6:	6293      	str	r3, [r2, #40]	@ 0x28

  /* We should not reach here : Option byte launch generates Option byte reset
     so return error */
  return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	40022000 	.word	0x40022000

080030b8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY and WDW flags to be reset.
     Even if the FLASH operation fails, the BUSY & WDW flags will be reset, and an error flag will be set */

  uint32_t timeout = HAL_GetTick() + Timeout;
 80030c0:	f7fe fc2e 	bl	8001920 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4413      	add	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]
  uint32_t error;
  __IO uint32_t *reg_sr;

  /* Access to SECSR or NSSR registers depends on operation type */
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);
 80030cc:	4b1b      	ldr	r3, [pc, #108]	@ (800313c <FLASH_WaitForLastOperation+0x84>)
 80030ce:	613b      	str	r3, [r7, #16]

  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WDW)) != 0U)
 80030d0:	e00b      	b.n	80030ea <FLASH_WaitForLastOperation+0x32>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030d8:	d007      	beq.n	80030ea <FLASH_WaitForLastOperation+0x32>
    {
      if (HAL_GetTick() >= timeout)
 80030da:	f7fe fc21 	bl	8001920 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d801      	bhi.n	80030ea <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e023      	b.n	8003132 <FLASH_WaitForLastOperation+0x7a>
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WDW)) != 0U)
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1ed      	bne.n	80030d2 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH operation error flags */
  error = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	f242 03fa 	movw	r3, #8442	@ 0x20fa
 80030fe:	4013      	ands	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  error |= (FLASH->NSSR & FLASH_FLAG_OPTWERR);
#endif /* __ARM_FEATURE_CMSE */

  if (error != 0U)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00a      	beq.n	800311e <FLASH_WaitForLastOperation+0x66>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8003108:	4b0d      	ldr	r3, [pc, #52]	@ (8003140 <FLASH_WaitForLastOperation+0x88>)
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4313      	orrs	r3, r2
 8003110:	4a0b      	ldr	r2, [pc, #44]	@ (8003140 <FLASH_WaitForLastOperation+0x88>)
 8003112:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    (*reg_sr) = error;
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	601a      	str	r2, [r3, #0]
    {
      FLASH->NSSR = FLASH_FLAG_OPTWERR;
    }
#endif /* __ARM_FEATURE_CMSE */

    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e009      	b.n	8003132 <FLASH_WaitForLastOperation+0x7a>
  }

  /* Check FLASH End of Operation flag  */
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d002      	beq.n	8003130 <FLASH_WaitForLastOperation+0x78>
  {
    /* Clear FLASH End of Operation pending bit */
    (*reg_sr) = FLASH_FLAG_EOP;
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	2201      	movs	r2, #1
 800312e:	601a      	str	r2, [r3, #0]
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3718      	adds	r7, #24
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40022020 	.word	0x40022020
 8003140:	2000000c 	.word	0x2000000c

08003144 <FLASH_Program_QuadWord>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord(uint32_t Address, uint32_t DataAddress)
{
 8003144:	b480      	push	{r7}
 8003146:	b08b      	sub	sp, #44	@ 0x2c
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 800314e:	2304      	movs	r3, #4
 8003150:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t *dest_addr = (uint32_t *)Address;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 800315c:	4b16      	ldr	r3, [pc, #88]	@ (80031b8 <FLASH_Program_QuadWord+0x74>)
 800315e:	61bb      	str	r3, [r7, #24]

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_NSCR_PG);
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f043 0201 	orr.w	r2, r3, #1
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	601a      	str	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800316c:	f3ef 8310 	mrs	r3, PRIMASK
 8003170:	613b      	str	r3, [r7, #16]
  return(result);
 8003172:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8003174:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003176:	b672      	cpsid	i
}
 8003178:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	6a3b      	ldr	r3, [r7, #32]
 8003180:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	3304      	adds	r3, #4
 8003186:	623b      	str	r3, [r7, #32]
    src_addr++;
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	3304      	adds	r3, #4
 800318c:	61fb      	str	r3, [r7, #28]
    index--;
 800318e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003192:	3b01      	subs	r3, #1
 8003194:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while (index != 0U);
 8003198:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1ec      	bne.n	800317a <FLASH_Program_QuadWord+0x36>
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f383 8810 	msr	PRIMASK, r3
}
 80031aa:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80031ac:	bf00      	nop
 80031ae:	372c      	adds	r7, #44	@ 0x2c
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	40022028 	.word	0x40022028

080031bc <FLASH_Program_Burst>:
  * @param  Address: specifies the address to be programmed.
  * @param  DataAddress: specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Burst(uint32_t Address, uint32_t DataAddress)
{
 80031bc:	b480      	push	{r7}
 80031be:	b08b      	sub	sp, #44	@ 0x2c
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint8_t burst_index = FLASH_NB_WORDS_IN_BURST;
 80031c6:	2320      	movs	r3, #32
 80031c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t *dest_addr = (uint32_t *)Address;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80031d4:	4b17      	ldr	r3, [pc, #92]	@ (8003234 <FLASH_Program_Burst+0x78>)
 80031d6:	61bb      	str	r3, [r7, #24]

  /* Set PG and BWR bits */
  SET_BIT((*reg_cr), (FLASH_NSCR_PG | FLASH_NSCR_BWR));
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80031e8:	f3ef 8310 	mrs	r3, PRIMASK
 80031ec:	613b      	str	r3, [r7, #16]
  return(result);
 80031ee:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80031f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80031f2:	b672      	cpsid	i
}
 80031f4:	bf00      	nop
  __disable_irq();

  /* Program the burst */
  do
  {
    *dest_addr = *src_addr;
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80031fe:	6a3b      	ldr	r3, [r7, #32]
 8003200:	3304      	adds	r3, #4
 8003202:	623b      	str	r3, [r7, #32]
    src_addr++;
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	3304      	adds	r3, #4
 8003208:	61fb      	str	r3, [r7, #28]
    burst_index--;
 800320a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800320e:	3b01      	subs	r3, #1
 8003210:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while (burst_index != 0U);
 8003214:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1ec      	bne.n	80031f6 <FLASH_Program_Burst+0x3a>
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f383 8810 	msr	PRIMASK, r3
}
 8003226:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8003228:	bf00      	nop
 800322a:	372c      	adds	r7, #44	@ 0x2c
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	40022028 	.word	0x40022028

08003238 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased).
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003242:	4b33      	ldr	r3, [pc, #204]	@ (8003310 <HAL_FLASHEx_Erase+0xd8>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d101      	bne.n	800324e <HAL_FLASHEx_Erase+0x16>
 800324a:	2302      	movs	r3, #2
 800324c:	e05c      	b.n	8003308 <HAL_FLASHEx_Erase+0xd0>
 800324e:	4b30      	ldr	r3, [pc, #192]	@ (8003310 <HAL_FLASHEx_Erase+0xd8>)
 8003250:	2201      	movs	r2, #1
 8003252:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003254:	4b2e      	ldr	r3, [pc, #184]	@ (8003310 <HAL_FLASHEx_Erase+0xd8>)
 8003256:	2200      	movs	r2, #0
 8003258:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800325a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800325e:	f7ff ff2b 	bl	80030b8 <FLASH_WaitForLastOperation>
 8003262:	4603      	mov	r3, r0
 8003264:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8003266:	7dfb      	ldrb	r3, [r7, #23]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d149      	bne.n	8003300 <HAL_FLASHEx_Erase+0xc8>
  {
    /* Current operation type */
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a27      	ldr	r2, [pc, #156]	@ (8003310 <HAL_FLASHEx_Erase+0xd8>)
 8003272:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH->NSCR);
 8003274:	4b27      	ldr	r3, [pc, #156]	@ (8003314 <HAL_FLASHEx_Erase+0xdc>)
 8003276:	60fb      	str	r3, [r7, #12]

    if ((pEraseInit->TypeErase & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003280:	f248 0204 	movw	r2, #32772	@ 0x8004
 8003284:	4293      	cmp	r3, r2
 8003286:	d10b      	bne.n	80032a0 <HAL_FLASHEx_Erase+0x68>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	4618      	mov	r0, r3
 800328e:	f000 f909 	bl	80034a4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003292:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003296:	f7ff ff0f 	bl	80030b8 <FLASH_WaitForLastOperation>
 800329a:	4603      	mov	r3, r0
 800329c:	75fb      	strb	r3, [r7, #23]
 800329e:	e025      	b.n	80032ec <HAL_FLASHEx_Erase+0xb4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80032a6:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	613b      	str	r3, [r7, #16]
 80032ae:	e015      	b.n	80032dc <HAL_FLASHEx_Erase+0xa4>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	4619      	mov	r1, r3
 80032b6:	6938      	ldr	r0, [r7, #16]
 80032b8:	f000 f91a 	bl	80034f0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80032bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80032c0:	f7ff fefa 	bl	80030b8 <FLASH_WaitForLastOperation>
 80032c4:	4603      	mov	r3, r0
 80032c6:	75fb      	strb	r3, [r7, #23]

        if (status != HAL_OK)
 80032c8:	7dfb      	ldrb	r3, [r7, #23]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_FLASHEx_Erase+0x9e>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	601a      	str	r2, [r3, #0]
          break;
 80032d4:	e00a      	b.n	80032ec <HAL_FLASHEx_Erase+0xb4>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	3301      	adds	r3, #1
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	4413      	add	r3, r2
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d3e1      	bcc.n	80032b0 <HAL_FLASHEx_Erase+0x78>
        }
      }
    }

    /* If the erase operation is completed, disable the associated bits */
    CLEAR_BIT((*reg_cr), (pEraseInit->TypeErase) & (~(FLASH_NON_SECURE_MASK)));
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032f8:	43db      	mvns	r3, r3
 80032fa:	401a      	ands	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003300:	4b03      	ldr	r3, [pc, #12]	@ (8003310 <HAL_FLASHEx_Erase+0xd8>)
 8003302:	2200      	movs	r2, #0
 8003304:	701a      	strb	r2, [r3, #0]

  return status;
 8003306:	7dfb      	ldrb	r3, [r7, #23]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	2000000c 	.word	0x2000000c
 8003314:	40022028 	.word	0x40022028

08003318 <HAL_FLASHEx_OBProgram>:
  *         - after a power reset (BOR reset or exit from Standby/Shutdown modes)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003320:	4b37      	ldr	r3, [pc, #220]	@ (8003400 <HAL_FLASHEx_OBProgram+0xe8>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d101      	bne.n	800332c <HAL_FLASHEx_OBProgram+0x14>
 8003328:	2302      	movs	r3, #2
 800332a:	e064      	b.n	80033f6 <HAL_FLASHEx_OBProgram+0xde>
 800332c:	4b34      	ldr	r3, [pc, #208]	@ (8003400 <HAL_FLASHEx_OBProgram+0xe8>)
 800332e:	2201      	movs	r2, #1
 8003330:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003332:	4b33      	ldr	r3, [pc, #204]	@ (8003400 <HAL_FLASHEx_OBProgram+0xe8>)
 8003334:	2200      	movs	r2, #0
 8003336:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003338:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800333c:	f7ff febc 	bl	80030b8 <FLASH_WaitForLastOperation>
 8003340:	4603      	mov	r3, r0
 8003342:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003344:	7bfb      	ldrb	r3, [r7, #15]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d151      	bne.n	80033ee <HAL_FLASHEx_OBProgram+0xd6>
  {
    /* Write protection configuration */
    if ((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d009      	beq.n	800336a <HAL_FLASHEx_OBProgram+0x52>
    {
      /* Configure of Write protection on the selected area */
      FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset, pOBInit->WRPLock);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6858      	ldr	r0, [r3, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6899      	ldr	r1, [r3, #8]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	7c1b      	ldrb	r3, [r3, #16]
 8003366:	f000 f8f3 	bl	8003550 <FLASH_OB_WRPConfig>
    }

    /* Read protection configuration */
    if ((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d004      	beq.n	8003380 <HAL_FLASHEx_OBProgram+0x68>
    {
      /* Configure the Read protection level */
      FLASH_OB_RDPConfig(pOBInit->RDPLevel);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	4618      	mov	r0, r3
 800337c:	f000 f92e 	bl	80035dc <FLASH_OB_RDPConfig>
    }

    /* Read protection key configuration */
    if ((pOBInit->OptionType & OPTIONBYTE_RDPKEY) != 0U)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003388:	2b00      	cmp	r3, #0
 800338a:	d008      	beq.n	800339e <HAL_FLASHEx_OBProgram+0x86>
    {
      /* Configure the Read protection key */
      FLASH_OB_RDPKeyConfig(pOBInit->RDPKeyType, pOBInit->RDPKey1, pOBInit->RDPKey2);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003398:	461a      	mov	r2, r3
 800339a:	f000 f933 	bl	8003604 <FLASH_OB_RDPKeyConfig>
    }

    /* User Configuration */
    if ((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0304 	and.w	r3, r3, #4
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d007      	beq.n	80033ba <HAL_FLASHEx_OBProgram+0xa2>
    {
      /* Configure the user option bytes */
      FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699a      	ldr	r2, [r3, #24]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	4619      	mov	r1, r3
 80033b4:	4610      	mov	r0, r2
 80033b6:	f000 f943 	bl	8003640 <FLASH_OB_UserConfig>
      FLASH_OB_BootLockConfig(pOBInit->BootLock);
    }
#endif /* __ARM_FEATURE_CMSE */

    /* Boot address configuration */
    if ((pOBInit->OptionType & OPTIONBYTE_BOOTADDR) != 0U)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d007      	beq.n	80033d6 <HAL_FLASHEx_OBProgram+0xbe>
    {
      /* Configure the boot address */
      FLASH_OB_BootAddrConfig(pOBInit->BootAddrConfig, pOBInit->BootAddr);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1a      	ldr	r2, [r3, #32]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ce:	4619      	mov	r1, r3
 80033d0:	4610      	mov	r0, r2
 80033d2:	f000 fa8b 	bl	80038ec <FLASH_OB_BootAddrConfig>
    }

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->NSCR, FLASH_NSCR_OPTSTRT);
 80033d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003404 <HAL_FLASHEx_OBProgram+0xec>)
 80033d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033da:	4a0a      	ldr	r2, [pc, #40]	@ (8003404 <HAL_FLASHEx_OBProgram+0xec>)
 80033dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033e0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80033e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80033e6:	f7ff fe67 	bl	80030b8 <FLASH_WaitForLastOperation>
 80033ea:	4603      	mov	r3, r0
 80033ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80033ee:	4b04      	ldr	r3, [pc, #16]	@ (8003400 <HAL_FLASHEx_OBProgram+0xe8>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	701a      	strb	r2, [r3, #0]

  return status;
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	2000000c 	.word	0x2000000c
 8003404:	40022000 	.word	0x40022000

08003408 <HAL_FLASHEx_OBGetConfig>:
  *         Boot Address, else no information will be returned
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2206      	movs	r2, #6
 8003414:	601a      	str	r2, [r3, #0]

  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d00b      	beq.n	8003436 <HAL_FLASHEx_OBGetConfig+0x2e>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b02      	cmp	r3, #2
 8003424:	d007      	beq.n	8003436 <HAL_FLASHEx_OBGetConfig+0x2e>
      (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800342a:	2b04      	cmp	r3, #4
 800342c:	d003      	beq.n	8003436 <HAL_FLASHEx_OBGetConfig+0x2e>
      (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b08      	cmp	r3, #8
 8003434:	d111      	bne.n	800345a <HAL_FLASHEx_OBGetConfig+0x52>
  {
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f043 0201 	orr.w	r2, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	601a      	str	r2, [r3, #0]
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset), &(pOBInit->WRPLock));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6858      	ldr	r0, [r3, #4]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f103 0108 	add.w	r1, r3, #8
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f103 020c 	add.w	r2, r3, #12
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3310      	adds	r3, #16
 8003456:	f000 fa63 	bl	8003920 <FLASH_OB_GetWRP>
  }

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 800345a:	f000 fad3 	bl	8003a04 <FLASH_OB_GetRDP>
 800345e:	4602      	mov	r2, r0
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	615a      	str	r2, [r3, #20]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8003464:	f000 faea 	bl	8003a3c <FLASH_OB_GetUser>
 8003468:	4602      	mov	r2, r0
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	61da      	str	r2, [r3, #28]
  /* Get the value of the selected boot address */
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((pOBInit->BootAddrConfig == OB_BOOTADDR_NS0) || (pOBInit->BootAddrConfig == OB_BOOTADDR_NS1) ||
      (pOBInit->BootAddrConfig == OB_BOOTADDR_SEC0))
#else
  if ((pOBInit->BootAddrConfig == OB_BOOTADDR_NS0) || (pOBInit->BootAddrConfig == OB_BOOTADDR_NS1))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d003      	beq.n	800347e <HAL_FLASHEx_OBGetConfig+0x76>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d10d      	bne.n	800349a <HAL_FLASHEx_OBGetConfig+0x92>
#endif /* __ARM_FEATURE_CMSE */
  {
    pOBInit->OptionType |= OPTIONBYTE_BOOTADDR;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f043 0208 	orr.w	r2, r3, #8
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	601a      	str	r2, [r3, #0]
    FLASH_OB_GetBootAddr(pOBInit->BootAddrConfig, &(pOBInit->BootAddr));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1a      	ldr	r2, [r3, #32]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3324      	adds	r3, #36	@ 0x24
 8003492:	4619      	mov	r1, r3
 8003494:	4610      	mov	r0, r2
 8003496:	f000 fae5 	bl	8003a64 <FLASH_OB_GetBootAddr>
  }
}
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
	...

080034a4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80034ac:	4b0f      	ldr	r3, [pc, #60]	@ (80034ec <FLASH_MassErase+0x48>)
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Set the Mass Erase Bit for the bank 1 and proceed to erase */
  if ((Banks & FLASH_BANK_1) != 0U)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d007      	beq.n	80034ca <FLASH_MassErase+0x26>
  {
    SET_BIT((*reg_cr), FLASH_NSCR_MER1 | FLASH_NSCR_STRT);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034c2:	f043 0304 	orr.w	r3, r3, #4
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	6013      	str	r3, [r2, #0]
  }

  /* Set the Mass Erase Bit for the bank 2 and proceed to erase */
  if ((Banks & FLASH_BANK_2) != 0U)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d005      	beq.n	80034e0 <FLASH_MassErase+0x3c>
  {
    SET_BIT((*reg_cr), FLASH_NSCR_MER2 | FLASH_NSCR_STRT);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f443 32c0 	orr.w	r2, r3, #98304	@ 0x18000
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	601a      	str	r2, [r3, #0]
  }
}
 80034e0:	bf00      	nop
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	40022028 	.word	0x40022028

080034f0 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));
  assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80034fa:	4b14      	ldr	r3, [pc, #80]	@ (800354c <FLASH_PageErase+0x5c>)
 80034fc:	60fb      	str	r3, [r7, #12]

  if ((Banks & FLASH_BANK_1) != 0U)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d006      	beq.n	8003516 <FLASH_PageErase+0x26>
  {
    CLEAR_BIT((*reg_cr), FLASH_NSCR_BKER);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	e005      	b.n	8003522 <FLASH_PageErase+0x32>
  }
  else
  {
    SET_BIT((*reg_cr), FLASH_NSCR_BKER);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	601a      	str	r2, [r3, #0]
  }

  /* Proceed to erase the page */
  MODIFY_REG((*reg_cr), (FLASH_NSCR_PNB | FLASH_NSCR_PER | FLASH_NSCR_STRT), \
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f423 3381 	bic.w	r3, r3, #66048	@ 0x10200
 800352a:	f423 73fd 	bic.w	r3, r3, #506	@ 0x1fa
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	00d2      	lsls	r2, r2, #3
 8003532:	4313      	orrs	r3, r2
 8003534:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003538:	f043 0302 	orr.w	r3, r3, #2
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	6013      	str	r3, [r2, #0]
             ((Page << FLASH_NSCR_PNB_Pos) | FLASH_NSCR_PER | FLASH_NSCR_STRT));
}
 8003540:	bf00      	nop
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	40022028 	.word	0x40022028

08003550 <FLASH_OB_WRPConfig>:
  *
  * @retval None
  */
static void FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRPEndOffset,
                               FunctionalState WRPLock)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
 800355c:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRPEndOffset));
  assert_param(IS_FUNCTIONAL_STATE(WRPLock));

  /* Configure the write protected area */
  if (WRPArea == OB_WRPAREA_BANK1_AREAA)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d10a      	bne.n	800357a <FLASH_OB_WRPConfig+0x2a>
  {
    FLASH->WRP1AR = (((uint32_t)(~WRPLock) << FLASH_WRP1AR_UNLOCK_Pos)       | \
 8003564:	78fb      	ldrb	r3, [r7, #3]
 8003566:	43db      	mvns	r3, r3
 8003568:	07da      	lsls	r2, r3, #31
                     (WRPEndOffset << FLASH_WRP1AR_WRP1A_PEND_Pos) | \
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	041b      	lsls	r3, r3, #16
    FLASH->WRP1AR = (((uint32_t)(~WRPLock) << FLASH_WRP1AR_UNLOCK_Pos)       | \
 800356e:	431a      	orrs	r2, r3
 8003570:	4919      	ldr	r1, [pc, #100]	@ (80035d8 <FLASH_OB_WRPConfig+0x88>)
                     (WRPEndOffset << FLASH_WRP1AR_WRP1A_PEND_Pos) | \
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	4313      	orrs	r3, r2
    FLASH->WRP1AR = (((uint32_t)(~WRPLock) << FLASH_WRP1AR_UNLOCK_Pos)       | \
 8003576:	658b      	str	r3, [r1, #88]	@ 0x58
  }
  else
  {
    /* Empty statement (to be compliant MISRA 15.7) */
  }
}
 8003578:	e028      	b.n	80035cc <FLASH_OB_WRPConfig+0x7c>
  else if (WRPArea == OB_WRPAREA_BANK1_AREAB)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2b02      	cmp	r3, #2
 800357e:	d10a      	bne.n	8003596 <FLASH_OB_WRPConfig+0x46>
    FLASH->WRP1BR = (((uint32_t)(~WRPLock) << FLASH_WRP1BR_UNLOCK_Pos)       | \
 8003580:	78fb      	ldrb	r3, [r7, #3]
 8003582:	43db      	mvns	r3, r3
 8003584:	07da      	lsls	r2, r3, #31
                     (WRPEndOffset << FLASH_WRP1BR_WRP1B_PEND_Pos) | \
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	041b      	lsls	r3, r3, #16
    FLASH->WRP1BR = (((uint32_t)(~WRPLock) << FLASH_WRP1BR_UNLOCK_Pos)       | \
 800358a:	431a      	orrs	r2, r3
 800358c:	4912      	ldr	r1, [pc, #72]	@ (80035d8 <FLASH_OB_WRPConfig+0x88>)
                     (WRPEndOffset << FLASH_WRP1BR_WRP1B_PEND_Pos) | \
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	4313      	orrs	r3, r2
    FLASH->WRP1BR = (((uint32_t)(~WRPLock) << FLASH_WRP1BR_UNLOCK_Pos)       | \
 8003592:	65cb      	str	r3, [r1, #92]	@ 0x5c
}
 8003594:	e01a      	b.n	80035cc <FLASH_OB_WRPConfig+0x7c>
  else if (WRPArea == OB_WRPAREA_BANK2_AREAA)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2b04      	cmp	r3, #4
 800359a:	d10a      	bne.n	80035b2 <FLASH_OB_WRPConfig+0x62>
    FLASH->WRP2AR = (((uint32_t)(~WRPLock) << FLASH_WRP2AR_UNLOCK_Pos)       | \
 800359c:	78fb      	ldrb	r3, [r7, #3]
 800359e:	43db      	mvns	r3, r3
 80035a0:	07da      	lsls	r2, r3, #31
                     (WRPEndOffset << FLASH_WRP2AR_WRP2A_PEND_Pos) | \
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	041b      	lsls	r3, r3, #16
    FLASH->WRP2AR = (((uint32_t)(~WRPLock) << FLASH_WRP2AR_UNLOCK_Pos)       | \
 80035a6:	431a      	orrs	r2, r3
 80035a8:	490b      	ldr	r1, [pc, #44]	@ (80035d8 <FLASH_OB_WRPConfig+0x88>)
                     (WRPEndOffset << FLASH_WRP2AR_WRP2A_PEND_Pos) | \
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	4313      	orrs	r3, r2
    FLASH->WRP2AR = (((uint32_t)(~WRPLock) << FLASH_WRP2AR_UNLOCK_Pos)       | \
 80035ae:	668b      	str	r3, [r1, #104]	@ 0x68
}
 80035b0:	e00c      	b.n	80035cc <FLASH_OB_WRPConfig+0x7c>
  else if (WRPArea == OB_WRPAREA_BANK2_AREAB)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d109      	bne.n	80035cc <FLASH_OB_WRPConfig+0x7c>
    FLASH->WRP2BR = (((uint32_t)(~WRPLock) << FLASH_WRP2BR_UNLOCK_Pos)       | \
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	43db      	mvns	r3, r3
 80035bc:	07da      	lsls	r2, r3, #31
                     (WRPEndOffset << FLASH_WRP2BR_WRP2B_PEND_Pos) | \
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	041b      	lsls	r3, r3, #16
    FLASH->WRP2BR = (((uint32_t)(~WRPLock) << FLASH_WRP2BR_UNLOCK_Pos)       | \
 80035c2:	431a      	orrs	r2, r3
 80035c4:	4904      	ldr	r1, [pc, #16]	@ (80035d8 <FLASH_OB_WRPConfig+0x88>)
                     (WRPEndOffset << FLASH_WRP2BR_WRP2B_PEND_Pos) | \
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	4313      	orrs	r3, r2
    FLASH->WRP2BR = (((uint32_t)(~WRPLock) << FLASH_WRP2BR_UNLOCK_Pos)       | \
 80035ca:	66cb      	str	r3, [r1, #108]	@ 0x6c
}
 80035cc:	bf00      	nop
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	40022000 	.word	0x40022000

080035dc <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval None
  */
static void FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Configure the RDP level in the option bytes register */
  MODIFY_REG(FLASH->OPTR, FLASH_OPTR_RDP, RDPLevel);
 80035e4:	4b06      	ldr	r3, [pc, #24]	@ (8003600 <FLASH_OB_RDPConfig+0x24>)
 80035e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80035ec:	4904      	ldr	r1, [pc, #16]	@ (8003600 <FLASH_OB_RDPConfig+0x24>)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	640b      	str	r3, [r1, #64]	@ 0x40
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	40022000 	.word	0x40022000

08003604 <FLASH_OB_RDPKeyConfig>:
  * @param  RDPKey1 specifies the RDP key 1.
  * @param  RDPKey2 specifies the RDP key 2.
  * @retval None
  */
static void FLASH_OB_RDPKeyConfig(uint32_t RDPKeyType, uint32_t RDPKey1, uint32_t RDPKey2)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_RDP_KEY_TYPE(RDPKeyType));

  /* Configure the RDP OEM key */
  if (RDPKeyType == OB_RDP_KEY_OEM1)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d106      	bne.n	8003624 <FLASH_OB_RDPKeyConfig+0x20>
  {
    WRITE_REG(FLASH->OEM1KEYR1, RDPKey1);
 8003616:	4a09      	ldr	r2, [pc, #36]	@ (800363c <FLASH_OB_RDPKeyConfig+0x38>)
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	6713      	str	r3, [r2, #112]	@ 0x70
    WRITE_REG(FLASH->OEM1KEYR2, RDPKey2);
 800361c:	4a07      	ldr	r2, [pc, #28]	@ (800363c <FLASH_OB_RDPKeyConfig+0x38>)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6753      	str	r3, [r2, #116]	@ 0x74
  else
  {
    WRITE_REG(FLASH->OEM2KEYR1, RDPKey1);
    WRITE_REG(FLASH->OEM2KEYR2, RDPKey2);
  }
}
 8003622:	e005      	b.n	8003630 <FLASH_OB_RDPKeyConfig+0x2c>
    WRITE_REG(FLASH->OEM2KEYR1, RDPKey1);
 8003624:	4a05      	ldr	r2, [pc, #20]	@ (800363c <FLASH_OB_RDPKeyConfig+0x38>)
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	6793      	str	r3, [r2, #120]	@ 0x78
    WRITE_REG(FLASH->OEM2KEYR2, RDPKey2);
 800362a:	4a04      	ldr	r2, [pc, #16]	@ (800363c <FLASH_OB_RDPKeyConfig+0x38>)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	67d3      	str	r3, [r2, #124]	@ 0x7c
}
 8003630:	bf00      	nop
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	40022000 	.word	0x40022000

08003640 <FLASH_OB_UserConfig>:
  *         @ref FLASH_OB_USER_PA15_PUPEN, @ref FLASH_OB_USER_IO_VDD_HSLV,
  *         @ref FLASH_OB_USER_IO_VDDIO2_HSLV and @ref OB_USER_TZEN
  * @retval None
  */
static void FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
 800364a:	2300      	movs	r3, #0
 800364c:	60fb      	str	r3, [r7, #12]
  uint32_t optr_reg_mask = 0;
 800364e:	2300      	movs	r3, #0
 8003650:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  if ((UserType & OB_USER_BOR_LEV) != 0U)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b00      	cmp	r3, #0
 800365a:	d009      	beq.n	8003670 <FLASH_OB_UserConfig+0x30>
  {
    /* BOR level option byte should be modified */
    assert_param(IS_OB_USER_BOR_LEVEL(UserConfig & FLASH_OPTR_BOR_LEV));

    /* Set value and mask for BOR level option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_BOR_LEV);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4313      	orrs	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_BOR_LEV;
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800366e:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_NRST_STOP) != 0U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d009      	beq.n	800368e <FLASH_OB_UserConfig+0x4e>
  {
    /* nRST_STOP option byte should be modified */
    assert_param(IS_OB_USER_STOP(UserConfig & FLASH_OPTR_nRST_STOP));

    /* Set value and mask for nRST_STOP option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STOP);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4313      	orrs	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_nRST_STOP;
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800368c:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_NRST_STDBY) != 0U)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b00      	cmp	r3, #0
 8003696:	d009      	beq.n	80036ac <FLASH_OB_UserConfig+0x6c>
  {
    /* nRST_STDBY option byte should be modified */
    assert_param(IS_OB_USER_STANDBY(UserConfig & FLASH_OPTR_nRST_STDBY));

    /* Set value and mask for nRST_STDBY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STDBY);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_nRST_STDBY;
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80036aa:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_NRST_SHDW) != 0U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d009      	beq.n	80036ca <FLASH_OB_UserConfig+0x8a>
  {
    /* nRST_SHDW option byte should be modified */
    assert_param(IS_OB_USER_SHUTDOWN(UserConfig & FLASH_OPTR_nRST_SHDW));

    /* Set value and mask for nRST_SHDW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_SHDW);
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_nRST_SHDW;
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036c8:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_SRAM_RST) != 0U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f003 0310 	and.w	r3, r3, #16
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d009      	beq.n	80036e8 <FLASH_OB_UserConfig+0xa8>
  {
    /* SRAM_RST option byte should be modified */
    assert_param(IS_OB_USER_SRAM_RST(UserConfig & FLASH_OPTR_SRAM_RST));

    /* Set value and mask for SRAM_RST option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM_RST);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	4313      	orrs	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_SRAM_RST;
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036e6:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_IWDG_SW) != 0U)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f003 0320 	and.w	r3, r3, #32
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d009      	beq.n	8003706 <FLASH_OB_UserConfig+0xc6>
  {
    /* IWDG_SW option byte should be modified */
    assert_param(IS_OB_USER_IWDG(UserConfig & FLASH_OPTR_IWDG_SW));

    /* Set value and mask for IWDG_SW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_SW);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_IWDG_SW;
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003704:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_IWDG_STOP) != 0U)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800370c:	2b00      	cmp	r3, #0
 800370e:	d009      	beq.n	8003724 <FLASH_OB_UserConfig+0xe4>
  {
    /* IWDG_STOP option byte should be modified */
    assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTR_IWDG_STOP));

    /* Set value and mask for IWDG_STOP option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STOP);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	4313      	orrs	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_IWDG_STOP;
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003722:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_IWDG_STDBY) != 0U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800372a:	2b00      	cmp	r3, #0
 800372c:	d009      	beq.n	8003742 <FLASH_OB_UserConfig+0x102>
  {
    /* IWDG_STDBY option byte should be modified */
    assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTR_IWDG_STDBY));

    /* Set value and mask for IWDG_STDBY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STDBY);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	4313      	orrs	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_IWDG_STDBY;
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003740:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_WWDG_SW) != 0U)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003748:	2b00      	cmp	r3, #0
 800374a:	d009      	beq.n	8003760 <FLASH_OB_UserConfig+0x120>
  {
    /* WWDG_SW option byte should be modified */
    assert_param(IS_OB_USER_WWDG(UserConfig & FLASH_OPTR_WWDG_SW));

    /* Set value and mask for WWDG_SW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_WWDG_SW);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	4313      	orrs	r3, r2
 8003756:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_WWDG_SW;
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800375e:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_SWAP_BANK) != 0U)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003766:	2b00      	cmp	r3, #0
 8003768:	d009      	beq.n	800377e <FLASH_OB_UserConfig+0x13e>
  {
    /* SWAP_BANK option byte should be modified */
    assert_param(IS_OB_USER_SWAP_BANK(UserConfig & FLASH_OPTR_SWAP_BANK));

    /* Set value and mask for SWAP_BANK option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_SWAP_BANK);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	4313      	orrs	r3, r2
 8003774:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_SWAP_BANK;
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800377c:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_DUALBANK) != 0U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003784:	2b00      	cmp	r3, #0
 8003786:	d009      	beq.n	800379c <FLASH_OB_UserConfig+0x15c>
  {
    /* DUALBANK option byte should be modified */
    assert_param(IS_OB_USER_DUALBANK(UserConfig & FLASH_OPTR_DUALBANK));

    /* Set value and mask for DUALBANK option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_DUALBANK);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	4313      	orrs	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_DUALBANK;
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800379a:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_BKPRAM_ECC) != 0U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d009      	beq.n	80037ba <FLASH_OB_UserConfig+0x17a>
  {
    /* BKPRAM_ECC option byte should be modified */
    assert_param(IS_OB_USER_BKPRAM_ECC(UserConfig & FLASH_OPTR_BKPRAM_ECC));

    /* Set value and mask for BKPRAM_ECC option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_BKPRAM_ECC);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_BKPRAM_ECC;
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80037b8:	60bb      	str	r3, [r7, #8]
  }
#if defined(SRAM3_BASE)
  if ((UserType & OB_USER_SRAM3_ECC) != 0U)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d009      	beq.n	80037d8 <FLASH_OB_UserConfig+0x198>
  {
    /* SRAM3_ECC option byte should be modified */
    assert_param(IS_OB_USER_SRAM3_ECC(UserConfig & FLASH_OPTR_SRAM3_ECC));

    /* Set value and mask for SRAM3_ECC option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM3_ECC);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_SRAM3_ECC;
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80037d6:	60bb      	str	r3, [r7, #8]
  }
#endif /* SRAM3_BASE */
  if ((UserType & OB_USER_SRAM2_ECC) != 0U)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d009      	beq.n	80037f6 <FLASH_OB_UserConfig+0x1b6>
  {
    /* SRAM2_ECC option byte should be modified */
    assert_param(IS_OB_USER_SRAM2_ECC(UserConfig & FLASH_OPTR_SRAM2_ECC));

    /* Set value and mask for SRAM2_ECC option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_ECC);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_SRAM2_ECC;
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037f4:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_SRAM2_RST) != 0U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d009      	beq.n	8003814 <FLASH_OB_UserConfig+0x1d4>
  {
    /* SRAM2_RST option byte should be modified */
    assert_param(IS_OB_USER_SRAM2_RST(UserConfig & FLASH_OPTR_SRAM2_RST));

    /* Set value and mask for SRAM2_RST option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_RST);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4313      	orrs	r3, r2
 800380a:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_SRAM2_RST;
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003812:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_NSWBOOT0) != 0U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d009      	beq.n	8003832 <FLASH_OB_UserConfig+0x1f2>
  {
    /* nSWBOOT0 option byte should be modified */
    assert_param(IS_OB_USER_SWBOOT0(UserConfig & FLASH_OPTR_nSWBOOT0));

    /* Set value and mask for nSWBOOT0 option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_nSWBOOT0);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	4313      	orrs	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_nSWBOOT0;
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003830:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_NBOOT0) != 0U)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d009      	beq.n	8003850 <FLASH_OB_UserConfig+0x210>
  {
    /* nBOOT0 option byte should be modified */
    assert_param(IS_OB_USER_BOOT0(UserConfig & FLASH_OPTR_nBOOT0));

    /* Set value and mask for nBOOT0 option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT0);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	4313      	orrs	r3, r2
 8003846:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_nBOOT0;
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800384e:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_PA15_PUPEN) != 0U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d009      	beq.n	800386e <FLASH_OB_UserConfig+0x22e>
  {
    /* PA15_PUPEN option byte should be modified */
    assert_param(IS_OB_USER_PA15_PUPEN(UserConfig & FLASH_OPTR_PA15_PUPEN));

    /* Set value and mask for nBOOT0 option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_PA15_PUPEN);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	4313      	orrs	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_PA15_PUPEN;
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800386c:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_IO_VDD_HSLV) != 0U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d009      	beq.n	800388c <FLASH_OB_UserConfig+0x24c>
  {
    /* IO_VDD_HSLV option byte should be modified */
    assert_param(IS_OB_USER_IO_VDD_HSLV(UserConfig & FLASH_OPTR_IO_VDD_HSLV));

    /* Set value and mask for IO_VDD_HSLV option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_IO_VDD_HSLV);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4313      	orrs	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_IO_VDD_HSLV;
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800388a:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_IO_VDDIO2_HSLV) != 0U)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d009      	beq.n	80038aa <FLASH_OB_UserConfig+0x26a>
  {
    /* IO_VDDIO2_HSLV option byte should be modified */
    assert_param(IS_OB_USER_IO_VDDIO2_HSLV(UserConfig & FLASH_OPTR_IO_VDDIO2_HSLV));

    /* Set value and mask for IO_VDDIO2_HSLV option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_IO_VDDIO2_HSLV);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	4313      	orrs	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_IO_VDDIO2_HSLV;
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80038a8:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_TZEN) != 0U)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d009      	beq.n	80038c8 <FLASH_OB_UserConfig+0x288>
  {
    /* TZEN option byte should be modified */
    assert_param(IS_OB_USER_TZEN(UserConfig & FLASH_OPTR_TZEN));

    /* Set value and mask for TZEN option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_TZEN);
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	4313      	orrs	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_TZEN;
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80038c6:	60bb      	str	r3, [r7, #8]
  }

  /* Configure the option bytes register */
  MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
 80038c8:	4b07      	ldr	r3, [pc, #28]	@ (80038e8 <FLASH_OB_UserConfig+0x2a8>)
 80038ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	43db      	mvns	r3, r3
 80038d0:	401a      	ands	r2, r3
 80038d2:	4905      	ldr	r1, [pc, #20]	@ (80038e8 <FLASH_OB_UserConfig+0x2a8>)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	640b      	str	r3, [r1, #64]	@ 0x40
}
 80038da:	bf00      	nop
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	40022000 	.word	0x40022000

080038ec <FLASH_OB_BootAddrConfig>:
  *          This parameter can be page number between 0 and 0xFFFFFF00
  *
  * @retval None
  */
static void FLASH_OB_BootAddrConfig(uint32_t BootAddrConfig, uint32_t BootAddr)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_OB_BOOTADDR_CONFIG(BootAddrConfig));

  if (BootAddrConfig == OB_BOOTADDR_NS0)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d103      	bne.n	8003904 <FLASH_OB_BootAddrConfig+0x18>
  {
    FLASH->NSBOOTADD0R = BootAddr;
 80038fc:	4a07      	ldr	r2, [pc, #28]	@ (800391c <FLASH_OB_BootAddrConfig+0x30>)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	6453      	str	r3, [r2, #68]	@ 0x44
#endif /* __ARM_FEATURE_CMSE */
  else
  {
    /* Empty statement (to be compliant MISRA 15.7) */
  }
}
 8003902:	e005      	b.n	8003910 <FLASH_OB_BootAddrConfig+0x24>
  else if (BootAddrConfig == OB_BOOTADDR_NS1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b02      	cmp	r3, #2
 8003908:	d102      	bne.n	8003910 <FLASH_OB_BootAddrConfig+0x24>
    FLASH->NSBOOTADD1R = BootAddr;
 800390a:	4a04      	ldr	r2, [pc, #16]	@ (800391c <FLASH_OB_BootAddrConfig+0x30>)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	40022000 	.word	0x40022000

08003920 <FLASH_OB_GetWRP>:
  *
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t *WRPStartOffset, uint32_t *WRPEndOffset,
                            FunctionalState *WRPLock)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	603b      	str	r3, [r7, #0]
  /* Get the configuration of the write protected area */
  if (WRPArea == OB_WRPAREA_BANK1_AREAA)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d115      	bne.n	8003960 <FLASH_OB_GetWRP+0x40>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_PSTRT);
 8003934:	4b32      	ldr	r3, [pc, #200]	@ (8003a00 <FLASH_OB_GetWRP+0xe0>)
 8003936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003938:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	601a      	str	r2, [r3, #0]
    *WRPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_PEND) >> FLASH_WRP1AR_WRP1A_PEND_Pos);
 8003940:	4b2f      	ldr	r3, [pc, #188]	@ (8003a00 <FLASH_OB_GetWRP+0xe0>)
 8003942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003944:	0c1b      	lsrs	r3, r3, #16
 8003946:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	601a      	str	r2, [r3, #0]
    *WRPLock = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_UNLOCK) != 0U) ? DISABLE : ENABLE;
 800394e:	4b2c      	ldr	r3, [pc, #176]	@ (8003a00 <FLASH_OB_GetWRP+0xe0>)
 8003950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003952:	43db      	mvns	r3, r3
 8003954:	0fdb      	lsrs	r3, r3, #31
 8003956:	b2db      	uxtb	r3, r3
 8003958:	461a      	mov	r2, r3
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* Empty statement (to be compliant MISRA 15.7) */
  }
}
 800395e:	e049      	b.n	80039f4 <FLASH_OB_GetWRP+0xd4>
  else if (WRPArea == OB_WRPAREA_BANK1_AREAB)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2b02      	cmp	r3, #2
 8003964:	d115      	bne.n	8003992 <FLASH_OB_GetWRP+0x72>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_PSTRT);
 8003966:	4b26      	ldr	r3, [pc, #152]	@ (8003a00 <FLASH_OB_GetWRP+0xe0>)
 8003968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800396a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	601a      	str	r2, [r3, #0]
    *WRPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_PEND) >> FLASH_WRP1BR_WRP1B_PEND_Pos);
 8003972:	4b23      	ldr	r3, [pc, #140]	@ (8003a00 <FLASH_OB_GetWRP+0xe0>)
 8003974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003976:	0c1b      	lsrs	r3, r3, #16
 8003978:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	601a      	str	r2, [r3, #0]
    *WRPLock = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_UNLOCK) != 0U) ? DISABLE : ENABLE;
 8003980:	4b1f      	ldr	r3, [pc, #124]	@ (8003a00 <FLASH_OB_GetWRP+0xe0>)
 8003982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003984:	43db      	mvns	r3, r3
 8003986:	0fdb      	lsrs	r3, r3, #31
 8003988:	b2db      	uxtb	r3, r3
 800398a:	461a      	mov	r2, r3
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	701a      	strb	r2, [r3, #0]
}
 8003990:	e030      	b.n	80039f4 <FLASH_OB_GetWRP+0xd4>
  else if (WRPArea == OB_WRPAREA_BANK2_AREAA)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2b04      	cmp	r3, #4
 8003996:	d115      	bne.n	80039c4 <FLASH_OB_GetWRP+0xa4>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_PSTRT);
 8003998:	4b19      	ldr	r3, [pc, #100]	@ (8003a00 <FLASH_OB_GetWRP+0xe0>)
 800399a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800399c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	601a      	str	r2, [r3, #0]
    *WRPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_PEND) >> FLASH_WRP2AR_WRP2A_PEND_Pos);
 80039a4:	4b16      	ldr	r3, [pc, #88]	@ (8003a00 <FLASH_OB_GetWRP+0xe0>)
 80039a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039a8:	0c1b      	lsrs	r3, r3, #16
 80039aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	601a      	str	r2, [r3, #0]
    *WRPLock = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_UNLOCK) != 0U) ? DISABLE : ENABLE;
 80039b2:	4b13      	ldr	r3, [pc, #76]	@ (8003a00 <FLASH_OB_GetWRP+0xe0>)
 80039b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039b6:	43db      	mvns	r3, r3
 80039b8:	0fdb      	lsrs	r3, r3, #31
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	461a      	mov	r2, r3
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	701a      	strb	r2, [r3, #0]
}
 80039c2:	e017      	b.n	80039f4 <FLASH_OB_GetWRP+0xd4>
  else if (WRPArea == OB_WRPAREA_BANK2_AREAB)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2b08      	cmp	r3, #8
 80039c8:	d114      	bne.n	80039f4 <FLASH_OB_GetWRP+0xd4>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_PSTRT);
 80039ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003a00 <FLASH_OB_GetWRP+0xe0>)
 80039cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	601a      	str	r2, [r3, #0]
    *WRPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_PEND) >> FLASH_WRP2BR_WRP2B_PEND_Pos);
 80039d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003a00 <FLASH_OB_GetWRP+0xe0>)
 80039d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039da:	0c1b      	lsrs	r3, r3, #16
 80039dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	601a      	str	r2, [r3, #0]
    *WRPLock = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_UNLOCK) != 0U) ? DISABLE : ENABLE;
 80039e4:	4b06      	ldr	r3, [pc, #24]	@ (8003a00 <FLASH_OB_GetWRP+0xe0>)
 80039e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039e8:	43db      	mvns	r3, r3
 80039ea:	0fdb      	lsrs	r3, r3, #31
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	461a      	mov	r2, r3
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	701a      	strb	r2, [r3, #0]
}
 80039f4:	bf00      	nop
 80039f6:	3714      	adds	r7, #20
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	40022000 	.word	0x40022000

08003a04 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0_5: No debug access to secure area
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 8003a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a38 <FLASH_OB_GetRDP+0x34>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	607b      	str	r3, [r7, #4]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_0_5) && (rdp_level != OB_RDP_LEVEL_2))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2baa      	cmp	r3, #170	@ 0xaa
 8003a16:	d007      	beq.n	8003a28 <FLASH_OB_GetRDP+0x24>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b55      	cmp	r3, #85	@ 0x55
 8003a1c:	d004      	beq.n	8003a28 <FLASH_OB_GetRDP+0x24>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2bcc      	cmp	r3, #204	@ 0xcc
 8003a22:	d001      	beq.n	8003a28 <FLASH_OB_GetRDP+0x24>
  {
    return (OB_RDP_LEVEL_1);
 8003a24:	23bb      	movs	r3, #187	@ 0xbb
 8003a26:	e000      	b.n	8003a2a <FLASH_OB_GetRDP+0x26>
  }
  else
  {
    return rdp_level;
 8003a28:	687b      	ldr	r3, [r7, #4]
  }
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	40022000 	.word	0x40022000

08003a3c <FLASH_OB_GetUser>:
  *         @ref FLASH_OB_USER_nSWBOOT0, @ref FLASH_OB_USER_nBOOT0,
  *         @ref FLASH_OB_USER_PA15_PUPEN, @ref FLASH_OB_USER_IO_VDD_HSLV,
  *         @ref FLASH_OB_USER_IO_VDDIO2_HSLV and @ref OB_USER_TZEN
  */
static uint32_t FLASH_OB_GetUser(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
  uint32_t user_config = READ_REG(FLASH->OPTR);
 8003a42:	4b07      	ldr	r3, [pc, #28]	@ (8003a60 <FLASH_OB_GetUser+0x24>)
 8003a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a46:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a4e:	607b      	str	r3, [r7, #4]

  return user_config;
 8003a50:	687b      	ldr	r3, [r7, #4]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	40022000 	.word	0x40022000

08003a64 <FLASH_OB_GetBootAddr>:
  * @param[out]  BootAddr specifies the boot address value
  *
  * @retval None
  */
static void FLASH_OB_GetBootAddr(uint32_t BootAddrConfig, uint32_t *BootAddr)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  if (BootAddrConfig == OB_BOOTADDR_NS0)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d106      	bne.n	8003a82 <FLASH_OB_GetBootAddr+0x1e>
  {
    *BootAddr = (FLASH->NSBOOTADD0R & FLASH_NSBOOTADD0R_NSBOOTADD0);
 8003a74:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa0 <FLASH_OB_GetBootAddr+0x3c>)
 8003a76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a78:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	601a      	str	r2, [r3, #0]
#endif /* __ARM_FEATURE_CMSE */
  else
  {
    /* Empty statement (to be compliant MISRA 15.7) */
  }
}
 8003a80:	e008      	b.n	8003a94 <FLASH_OB_GetBootAddr+0x30>
  else if (BootAddrConfig == OB_BOOTADDR_NS1)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d105      	bne.n	8003a94 <FLASH_OB_GetBootAddr+0x30>
    *BootAddr = (FLASH->NSBOOTADD1R & FLASH_NSBOOTADD1R_NSBOOTADD1);
 8003a88:	4b05      	ldr	r3, [pc, #20]	@ (8003aa0 <FLASH_OB_GetBootAddr+0x3c>)
 8003a8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a8c:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	601a      	str	r2, [r3, #0]
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	40022000 	.word	0x40022000

08003aa4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b089      	sub	sp, #36	@ 0x24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003ab6:	e1ba      	b.n	8003e2e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	2101      	movs	r1, #1
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f000 81aa 	beq.w	8003e28 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a55      	ldr	r2, [pc, #340]	@ (8003c2c <HAL_GPIO_Init+0x188>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d15d      	bne.n	8003b98 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	43db      	mvns	r3, r3
 8003aec:	69fa      	ldr	r2, [r7, #28]
 8003aee:	4013      	ands	r3, r2
 8003af0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f003 0201 	and.w	r2, r3, #1
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	69fa      	ldr	r2, [r7, #28]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	69fa      	ldr	r2, [r7, #28]
 8003b0a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003b0c:	4a48      	ldr	r2, [pc, #288]	@ (8003c30 <HAL_GPIO_Init+0x18c>)
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b14:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8003b16:	4a46      	ldr	r2, [pc, #280]	@ (8003c30 <HAL_GPIO_Init+0x18c>)
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	4413      	add	r3, r2
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	08da      	lsrs	r2, r3, #3
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	3208      	adds	r2, #8
 8003b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b2e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	f003 0307 	and.w	r3, r3, #7
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	220f      	movs	r2, #15
 8003b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3e:	43db      	mvns	r3, r3
 8003b40:	69fa      	ldr	r2, [r7, #28]
 8003b42:	4013      	ands	r3, r2
 8003b44:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	220b      	movs	r2, #11
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	69fa      	ldr	r2, [r7, #28]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	08da      	lsrs	r2, r3, #3
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	3208      	adds	r2, #8
 8003b62:	69f9      	ldr	r1, [r7, #28]
 8003b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	2203      	movs	r2, #3
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	69fa      	ldr	r2, [r7, #28]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	2202      	movs	r2, #2
 8003b86:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8a:	69fa      	ldr	r2, [r7, #28]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	69fa      	ldr	r2, [r7, #28]
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	e067      	b.n	8003c68 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d003      	beq.n	8003ba8 <HAL_GPIO_Init+0x104>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b12      	cmp	r3, #18
 8003ba6:	d145      	bne.n	8003c34 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	08da      	lsrs	r2, r3, #3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3208      	adds	r2, #8
 8003bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bb4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	220f      	movs	r2, #15
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	69fa      	ldr	r2, [r7, #28]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	f003 020f 	and.w	r2, r3, #15
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	69fa      	ldr	r2, [r7, #28]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	08da      	lsrs	r2, r3, #3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	3208      	adds	r2, #8
 8003bee:	69f9      	ldr	r1, [r7, #28]
 8003bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	2203      	movs	r2, #3
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	43db      	mvns	r3, r3
 8003c06:	69fa      	ldr	r2, [r7, #28]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 0203 	and.w	r2, r3, #3
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	69fa      	ldr	r2, [r7, #28]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	69fa      	ldr	r2, [r7, #28]
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	e01e      	b.n	8003c68 <HAL_GPIO_Init+0x1c4>
 8003c2a:	bf00      	nop
 8003c2c:	46020000 	.word	0x46020000
 8003c30:	0800a5e4 	.word	0x0800a5e4
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	2203      	movs	r2, #3
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	43db      	mvns	r3, r3
 8003c46:	69fa      	ldr	r2, [r7, #28]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f003 0203 	and.w	r2, r3, #3
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	69fa      	ldr	r2, [r7, #28]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	69fa      	ldr	r2, [r7, #28]
 8003c66:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d00b      	beq.n	8003c88 <HAL_GPIO_Init+0x1e4>
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d007      	beq.n	8003c88 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c7c:	2b11      	cmp	r3, #17
 8003c7e:	d003      	beq.n	8003c88 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b12      	cmp	r3, #18
 8003c86:	d130      	bne.n	8003cea <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	2203      	movs	r2, #3
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	69fa      	ldr	r2, [r7, #28]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	68da      	ldr	r2, [r3, #12]
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	69fa      	ldr	r2, [r7, #28]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	69fa      	ldr	r2, [r7, #28]
 8003cb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	69fa      	ldr	r2, [r7, #28]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	091b      	lsrs	r3, r3, #4
 8003cd4:	f003 0201 	and.w	r2, r3, #1
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	69fa      	ldr	r2, [r7, #28]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	69fa      	ldr	r2, [r7, #28]
 8003ce8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2b03      	cmp	r3, #3
 8003cf0:	d017      	beq.n	8003d22 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	2203      	movs	r2, #3
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	43db      	mvns	r3, r3
 8003d04:	69fa      	ldr	r2, [r7, #28]
 8003d06:	4013      	ands	r3, r2
 8003d08:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	689a      	ldr	r2, [r3, #8]
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	fa02 f303 	lsl.w	r3, r2, r3
 8003d16:	69fa      	ldr	r2, [r7, #28]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	69fa      	ldr	r2, [r7, #28]
 8003d20:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d07c      	beq.n	8003e28 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003d2e:	4a47      	ldr	r2, [pc, #284]	@ (8003e4c <HAL_GPIO_Init+0x3a8>)
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	089b      	lsrs	r3, r3, #2
 8003d34:	3318      	adds	r3, #24
 8003d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d3a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	220f      	movs	r2, #15
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	69fa      	ldr	r2, [r7, #28]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	0a9a      	lsrs	r2, r3, #10
 8003d56:	4b3e      	ldr	r3, [pc, #248]	@ (8003e50 <HAL_GPIO_Init+0x3ac>)
 8003d58:	4013      	ands	r3, r2
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	f002 0203 	and.w	r2, r2, #3
 8003d60:	00d2      	lsls	r2, r2, #3
 8003d62:	4093      	lsls	r3, r2
 8003d64:	69fa      	ldr	r2, [r7, #28]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003d6a:	4938      	ldr	r1, [pc, #224]	@ (8003e4c <HAL_GPIO_Init+0x3a8>)
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	089b      	lsrs	r3, r3, #2
 8003d70:	3318      	adds	r3, #24
 8003d72:	69fa      	ldr	r2, [r7, #28]
 8003d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003d78:	4b34      	ldr	r3, [pc, #208]	@ (8003e4c <HAL_GPIO_Init+0x3a8>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	43db      	mvns	r3, r3
 8003d82:	69fa      	ldr	r2, [r7, #28]
 8003d84:	4013      	ands	r3, r2
 8003d86:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8003d94:	69fa      	ldr	r2, [r7, #28]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8003d9c:	4a2b      	ldr	r2, [pc, #172]	@ (8003e4c <HAL_GPIO_Init+0x3a8>)
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003da2:	4b2a      	ldr	r3, [pc, #168]	@ (8003e4c <HAL_GPIO_Init+0x3a8>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	43db      	mvns	r3, r3
 8003dac:	69fa      	ldr	r2, [r7, #28]
 8003dae:	4013      	ands	r3, r2
 8003db0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8003dbe:	69fa      	ldr	r2, [r7, #28]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8003dc6:	4a21      	ldr	r2, [pc, #132]	@ (8003e4c <HAL_GPIO_Init+0x3a8>)
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8003e4c <HAL_GPIO_Init+0x3a8>)
 8003dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dd2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	43db      	mvns	r3, r3
 8003dd8:	69fa      	ldr	r2, [r7, #28]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8003dea:	69fa      	ldr	r2, [r7, #28]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8003df2:	4a16      	ldr	r2, [pc, #88]	@ (8003e4c <HAL_GPIO_Init+0x3a8>)
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003dfa:	4b14      	ldr	r3, [pc, #80]	@ (8003e4c <HAL_GPIO_Init+0x3a8>)
 8003dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e00:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	43db      	mvns	r3, r3
 8003e06:	69fa      	ldr	r2, [r7, #28]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8003e18:	69fa      	ldr	r2, [r7, #28]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003e20:	4a0a      	ldr	r2, [pc, #40]	@ (8003e4c <HAL_GPIO_Init+0x3a8>)
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	fa22 f303 	lsr.w	r3, r2, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f47f ae3d 	bne.w	8003ab8 <HAL_GPIO_Init+0x14>
  }
}
 8003e3e:	bf00      	nop
 8003e40:	bf00      	nop
 8003e42:	3724      	adds	r7, #36	@ 0x24
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	46022000 	.word	0x46022000
 8003e50:	002f7f7f 	.word	0x002f7f7f

08003e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	807b      	strh	r3, [r7, #2]
 8003e60:	4613      	mov	r3, r2
 8003e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e64:	787b      	ldrb	r3, [r7, #1]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e6a:	887a      	ldrh	r2, [r7, #2]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003e70:	e002      	b.n	8003e78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8003e72:	887a      	ldrh	r2, [r7, #2]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003e90:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	73fb      	strb	r3, [r7, #15]
 8003ea0:	e007      	b.n	8003eb2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8003ea2:	4b07      	ldr	r3, [pc, #28]	@ (8003ec0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f023 0204 	bic.w	r2, r3, #4
 8003eaa:	4905      	ldr	r1, [pc, #20]	@ (8003ec0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	600b      	str	r3, [r1, #0]
  }

  return status;
 8003eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	40030400 	.word	0x40030400

08003ec4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003ec8:	4b05      	ldr	r3, [pc, #20]	@ (8003ee0 <HAL_ICACHE_Enable+0x1c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a04      	ldr	r2, [pc, #16]	@ (8003ee0 <HAL_ICACHE_Enable+0x1c>)
 8003ece:	f043 0301 	orr.w	r3, r3, #1
 8003ed2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	40030400 	.word	0x40030400

08003ee4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003eec:	4b39      	ldr	r3, [pc, #228]	@ (8003fd4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ef0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ef4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d10b      	bne.n	8003f16 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f04:	d905      	bls.n	8003f12 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003f06:	4b33      	ldr	r3, [pc, #204]	@ (8003fd4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	4a32      	ldr	r2, [pc, #200]	@ (8003fd4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f10:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8003f12:	2300      	movs	r3, #0
 8003f14:	e057      	b.n	8003fc6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f1c:	d90a      	bls.n	8003f34 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003f1e:	4b2d      	ldr	r3, [pc, #180]	@ (8003fd4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	4a2a      	ldr	r2, [pc, #168]	@ (8003fd4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f30:	60d3      	str	r3, [r2, #12]
 8003f32:	e007      	b.n	8003f44 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003f34:	4b27      	ldr	r3, [pc, #156]	@ (8003fd4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003f3c:	4925      	ldr	r1, [pc, #148]	@ (8003fd4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003f44:	4b24      	ldr	r3, [pc, #144]	@ (8003fd8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a24      	ldr	r2, [pc, #144]	@ (8003fdc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4e:	099b      	lsrs	r3, r3, #6
 8003f50:	2232      	movs	r2, #50	@ 0x32
 8003f52:	fb02 f303 	mul.w	r3, r2, r3
 8003f56:	4a21      	ldr	r2, [pc, #132]	@ (8003fdc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003f58:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5c:	099b      	lsrs	r3, r3, #6
 8003f5e:	3301      	adds	r3, #1
 8003f60:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003f62:	e002      	b.n	8003f6a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8003fd4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d102      	bne.n	8003f7c <HAL_PWREx_ControlVoltageScaling+0x98>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1f3      	bne.n	8003f64 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d01b      	beq.n	8003fba <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003f82:	4b15      	ldr	r3, [pc, #84]	@ (8003fd8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a15      	ldr	r2, [pc, #84]	@ (8003fdc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003f88:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8c:	099b      	lsrs	r3, r3, #6
 8003f8e:	2232      	movs	r2, #50	@ 0x32
 8003f90:	fb02 f303 	mul.w	r3, r2, r3
 8003f94:	4a11      	ldr	r2, [pc, #68]	@ (8003fdc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003f96:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9a:	099b      	lsrs	r3, r3, #6
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003fa0:	e002      	b.n	8003fa8 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8003fd4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d102      	bne.n	8003fba <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f3      	bne.n	8003fa2 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e000      	b.n	8003fc6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	46020800 	.word	0x46020800
 8003fd8:	20000000 	.word	0x20000000
 8003fdc:	10624dd3 	.word	0x10624dd3

08003fe0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003fe4:	4b04      	ldr	r3, [pc, #16]	@ (8003ff8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	46020800 	.word	0x46020800

08003ffc <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004004:	4b22      	ldr	r3, [pc, #136]	@ (8004090 <HAL_PWREx_ConfigSupply+0x94>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a22      	ldr	r2, [pc, #136]	@ (8004094 <HAL_PWREx_ConfigSupply+0x98>)
 800400a:	fba2 2303 	umull	r2, r3, r2, r3
 800400e:	099b      	lsrs	r3, r3, #6
 8004010:	2232      	movs	r2, #50	@ 0x32
 8004012:	fb02 f303 	mul.w	r3, r2, r3
 8004016:	4a1f      	ldr	r2, [pc, #124]	@ (8004094 <HAL_PWREx_ConfigSupply+0x98>)
 8004018:	fba2 2303 	umull	r2, r3, r2, r3
 800401c:	099b      	lsrs	r3, r3, #6
 800401e:	3301      	adds	r3, #1
 8004020:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d113      	bne.n	8004050 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004028:	4b1b      	ldr	r3, [pc, #108]	@ (8004098 <HAL_PWREx_ConfigSupply+0x9c>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	4a1a      	ldr	r2, [pc, #104]	@ (8004098 <HAL_PWREx_ConfigSupply+0x9c>)
 800402e:	f023 0302 	bic.w	r3, r3, #2
 8004032:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004034:	e002      	b.n	800403c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	3b01      	subs	r3, #1
 800403a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800403c:	4b16      	ldr	r3, [pc, #88]	@ (8004098 <HAL_PWREx_ConfigSupply+0x9c>)
 800403e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b02      	cmp	r3, #2
 8004046:	d116      	bne.n	8004076 <HAL_PWREx_ConfigSupply+0x7a>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f3      	bne.n	8004036 <HAL_PWREx_ConfigSupply+0x3a>
 800404e:	e012      	b.n	8004076 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004050:	4b11      	ldr	r3, [pc, #68]	@ (8004098 <HAL_PWREx_ConfigSupply+0x9c>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	4a10      	ldr	r2, [pc, #64]	@ (8004098 <HAL_PWREx_ConfigSupply+0x9c>)
 8004056:	f043 0302 	orr.w	r3, r3, #2
 800405a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800405c:	e002      	b.n	8004064 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	3b01      	subs	r3, #1
 8004062:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004064:	4b0c      	ldr	r3, [pc, #48]	@ (8004098 <HAL_PWREx_ConfigSupply+0x9c>)
 8004066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d102      	bne.n	8004076 <HAL_PWREx_ConfigSupply+0x7a>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1f3      	bne.n	800405e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e000      	b.n	8004082 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	20000000 	.word	0x20000000
 8004094:	10624dd3 	.word	0x10624dd3
 8004098:	46020800 	.word	0x46020800

0800409c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80040a0:	4b05      	ldr	r3, [pc, #20]	@ (80040b8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	4a04      	ldr	r2, [pc, #16]	@ (80040b8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80040a6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80040aa:	6113      	str	r3, [r2, #16]
}
 80040ac:	bf00      	nop
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	46020800 	.word	0x46020800

080040bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b08e      	sub	sp, #56	@ 0x38
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80040c4:	2300      	movs	r3, #0
 80040c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d102      	bne.n	80040d6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	f000 bec8 	b.w	8004e66 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040d6:	4b99      	ldr	r3, [pc, #612]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	f003 030c 	and.w	r3, r3, #12
 80040de:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040e0:	4b96      	ldr	r3, [pc, #600]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 80040e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e4:	f003 0303 	and.w	r3, r3, #3
 80040e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0310 	and.w	r3, r3, #16
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 816c 	beq.w	80043d0 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80040f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d007      	beq.n	800410e <HAL_RCC_OscConfig+0x52>
 80040fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004100:	2b0c      	cmp	r3, #12
 8004102:	f040 80de 	bne.w	80042c2 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004108:	2b01      	cmp	r3, #1
 800410a:	f040 80da 	bne.w	80042c2 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d102      	bne.n	800411c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	f000 bea5 	b.w	8004e66 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004120:	4b86      	ldr	r3, [pc, #536]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d004      	beq.n	8004136 <HAL_RCC_OscConfig+0x7a>
 800412c:	4b83      	ldr	r3, [pc, #524]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004134:	e005      	b.n	8004142 <HAL_RCC_OscConfig+0x86>
 8004136:	4b81      	ldr	r3, [pc, #516]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004138:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800413c:	041b      	lsls	r3, r3, #16
 800413e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004142:	4293      	cmp	r3, r2
 8004144:	d255      	bcs.n	80041f2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10a      	bne.n	8004162 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004150:	4618      	mov	r0, r3
 8004152:	f001 f9d9 	bl	8005508 <RCC_SetFlashLatencyFromMSIRange>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	f000 be82 	b.w	8004e66 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004162:	4b76      	ldr	r3, [pc, #472]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	4a75      	ldr	r2, [pc, #468]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004168:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800416c:	6093      	str	r3, [r2, #8]
 800416e:	4b73      	ldr	r3, [pc, #460]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417a:	4970      	ldr	r1, [pc, #448]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 800417c:	4313      	orrs	r3, r2
 800417e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004184:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004188:	d309      	bcc.n	800419e <HAL_RCC_OscConfig+0xe2>
 800418a:	4b6c      	ldr	r3, [pc, #432]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f023 021f 	bic.w	r2, r3, #31
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	4969      	ldr	r1, [pc, #420]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004198:	4313      	orrs	r3, r2
 800419a:	60cb      	str	r3, [r1, #12]
 800419c:	e07e      	b.n	800429c <HAL_RCC_OscConfig+0x1e0>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	da0a      	bge.n	80041bc <HAL_RCC_OscConfig+0x100>
 80041a6:	4b65      	ldr	r3, [pc, #404]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	015b      	lsls	r3, r3, #5
 80041b4:	4961      	ldr	r1, [pc, #388]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60cb      	str	r3, [r1, #12]
 80041ba:	e06f      	b.n	800429c <HAL_RCC_OscConfig+0x1e0>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041c4:	d30a      	bcc.n	80041dc <HAL_RCC_OscConfig+0x120>
 80041c6:	4b5d      	ldr	r3, [pc, #372]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	029b      	lsls	r3, r3, #10
 80041d4:	4959      	ldr	r1, [pc, #356]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	60cb      	str	r3, [r1, #12]
 80041da:	e05f      	b.n	800429c <HAL_RCC_OscConfig+0x1e0>
 80041dc:	4b57      	ldr	r3, [pc, #348]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	03db      	lsls	r3, r3, #15
 80041ea:	4954      	ldr	r1, [pc, #336]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	60cb      	str	r3, [r1, #12]
 80041f0:	e054      	b.n	800429c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80041f2:	4b52      	ldr	r3, [pc, #328]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	4a51      	ldr	r2, [pc, #324]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 80041f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80041fc:	6093      	str	r3, [r2, #8]
 80041fe:	4b4f      	ldr	r3, [pc, #316]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420a:	494c      	ldr	r1, [pc, #304]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 800420c:	4313      	orrs	r3, r2
 800420e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004214:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004218:	d309      	bcc.n	800422e <HAL_RCC_OscConfig+0x172>
 800421a:	4b48      	ldr	r3, [pc, #288]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f023 021f 	bic.w	r2, r3, #31
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	4945      	ldr	r1, [pc, #276]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004228:	4313      	orrs	r3, r2
 800422a:	60cb      	str	r3, [r1, #12]
 800422c:	e028      	b.n	8004280 <HAL_RCC_OscConfig+0x1c4>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004232:	2b00      	cmp	r3, #0
 8004234:	da0a      	bge.n	800424c <HAL_RCC_OscConfig+0x190>
 8004236:	4b41      	ldr	r3, [pc, #260]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	015b      	lsls	r3, r3, #5
 8004244:	493d      	ldr	r1, [pc, #244]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004246:	4313      	orrs	r3, r2
 8004248:	60cb      	str	r3, [r1, #12]
 800424a:	e019      	b.n	8004280 <HAL_RCC_OscConfig+0x1c4>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004250:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004254:	d30a      	bcc.n	800426c <HAL_RCC_OscConfig+0x1b0>
 8004256:	4b39      	ldr	r3, [pc, #228]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	029b      	lsls	r3, r3, #10
 8004264:	4935      	ldr	r1, [pc, #212]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004266:	4313      	orrs	r3, r2
 8004268:	60cb      	str	r3, [r1, #12]
 800426a:	e009      	b.n	8004280 <HAL_RCC_OscConfig+0x1c4>
 800426c:	4b33      	ldr	r3, [pc, #204]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	03db      	lsls	r3, r3, #15
 800427a:	4930      	ldr	r1, [pc, #192]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 800427c:	4313      	orrs	r3, r2
 800427e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10a      	bne.n	800429c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428a:	4618      	mov	r0, r3
 800428c:	f001 f93c 	bl	8005508 <RCC_SetFlashLatencyFromMSIRange>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d002      	beq.n	800429c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	f000 bde5 	b.w	8004e66 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800429c:	f001 f8de 	bl	800545c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80042a0:	4b27      	ldr	r3, [pc, #156]	@ (8004340 <HAL_RCC_OscConfig+0x284>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7fd fab1 	bl	800180c <HAL_InitTick>
 80042aa:	4603      	mov	r3, r0
 80042ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80042b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 808a 	beq.w	80043ce <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80042ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80042be:	f000 bdd2 	b.w	8004e66 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d066      	beq.n	8004398 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80042ca:	4b1c      	ldr	r3, [pc, #112]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a1b      	ldr	r2, [pc, #108]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 80042d0:	f043 0301 	orr.w	r3, r3, #1
 80042d4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80042d6:	f7fd fb23 	bl	8001920 <HAL_GetTick>
 80042da:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80042dc:	e009      	b.n	80042f2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042de:	f7fd fb1f 	bl	8001920 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d902      	bls.n	80042f2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	f000 bdba 	b.w	8004e66 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80042f2:	4b12      	ldr	r3, [pc, #72]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0304 	and.w	r3, r3, #4
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d0ef      	beq.n	80042de <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80042fe:	4b0f      	ldr	r3, [pc, #60]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	4a0e      	ldr	r2, [pc, #56]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004304:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004308:	6093      	str	r3, [r2, #8]
 800430a:	4b0c      	ldr	r3, [pc, #48]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004316:	4909      	ldr	r1, [pc, #36]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004318:	4313      	orrs	r3, r2
 800431a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004320:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004324:	d30e      	bcc.n	8004344 <HAL_RCC_OscConfig+0x288>
 8004326:	4b05      	ldr	r3, [pc, #20]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f023 021f 	bic.w	r2, r3, #31
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	4902      	ldr	r1, [pc, #8]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004334:	4313      	orrs	r3, r2
 8004336:	60cb      	str	r3, [r1, #12]
 8004338:	e04a      	b.n	80043d0 <HAL_RCC_OscConfig+0x314>
 800433a:	bf00      	nop
 800433c:	46020c00 	.word	0x46020c00
 8004340:	20000004 	.word	0x20000004
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004348:	2b00      	cmp	r3, #0
 800434a:	da0a      	bge.n	8004362 <HAL_RCC_OscConfig+0x2a6>
 800434c:	4b98      	ldr	r3, [pc, #608]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	015b      	lsls	r3, r3, #5
 800435a:	4995      	ldr	r1, [pc, #596]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 800435c:	4313      	orrs	r3, r2
 800435e:	60cb      	str	r3, [r1, #12]
 8004360:	e036      	b.n	80043d0 <HAL_RCC_OscConfig+0x314>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004366:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800436a:	d30a      	bcc.n	8004382 <HAL_RCC_OscConfig+0x2c6>
 800436c:	4b90      	ldr	r3, [pc, #576]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	029b      	lsls	r3, r3, #10
 800437a:	498d      	ldr	r1, [pc, #564]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 800437c:	4313      	orrs	r3, r2
 800437e:	60cb      	str	r3, [r1, #12]
 8004380:	e026      	b.n	80043d0 <HAL_RCC_OscConfig+0x314>
 8004382:	4b8b      	ldr	r3, [pc, #556]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	03db      	lsls	r3, r3, #15
 8004390:	4987      	ldr	r1, [pc, #540]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 8004392:	4313      	orrs	r3, r2
 8004394:	60cb      	str	r3, [r1, #12]
 8004396:	e01b      	b.n	80043d0 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004398:	4b85      	ldr	r3, [pc, #532]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a84      	ldr	r2, [pc, #528]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 800439e:	f023 0301 	bic.w	r3, r3, #1
 80043a2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80043a4:	f7fd fabc 	bl	8001920 <HAL_GetTick>
 80043a8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80043aa:	e009      	b.n	80043c0 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043ac:	f7fd fab8 	bl	8001920 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d902      	bls.n	80043c0 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	f000 bd53 	b.w	8004e66 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80043c0:	4b7b      	ldr	r3, [pc, #492]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1ef      	bne.n	80043ac <HAL_RCC_OscConfig+0x2f0>
 80043cc:	e000      	b.n	80043d0 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80043ce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 808b 	beq.w	80044f4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80043de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	d005      	beq.n	80043f0 <HAL_RCC_OscConfig+0x334>
 80043e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e6:	2b0c      	cmp	r3, #12
 80043e8:	d109      	bne.n	80043fe <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80043ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ec:	2b03      	cmp	r3, #3
 80043ee:	d106      	bne.n	80043fe <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d17d      	bne.n	80044f4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	f000 bd34 	b.w	8004e66 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004406:	d106      	bne.n	8004416 <HAL_RCC_OscConfig+0x35a>
 8004408:	4b69      	ldr	r3, [pc, #420]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a68      	ldr	r2, [pc, #416]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 800440e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	e041      	b.n	800449a <HAL_RCC_OscConfig+0x3de>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800441e:	d112      	bne.n	8004446 <HAL_RCC_OscConfig+0x38a>
 8004420:	4b63      	ldr	r3, [pc, #396]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a62      	ldr	r2, [pc, #392]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 8004426:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800442a:	6013      	str	r3, [r2, #0]
 800442c:	4b60      	ldr	r3, [pc, #384]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a5f      	ldr	r2, [pc, #380]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 8004432:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004436:	6013      	str	r3, [r2, #0]
 8004438:	4b5d      	ldr	r3, [pc, #372]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a5c      	ldr	r2, [pc, #368]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 800443e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004442:	6013      	str	r3, [r2, #0]
 8004444:	e029      	b.n	800449a <HAL_RCC_OscConfig+0x3de>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800444e:	d112      	bne.n	8004476 <HAL_RCC_OscConfig+0x3ba>
 8004450:	4b57      	ldr	r3, [pc, #348]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a56      	ldr	r2, [pc, #344]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 8004456:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800445a:	6013      	str	r3, [r2, #0]
 800445c:	4b54      	ldr	r3, [pc, #336]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a53      	ldr	r2, [pc, #332]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 8004462:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004466:	6013      	str	r3, [r2, #0]
 8004468:	4b51      	ldr	r3, [pc, #324]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a50      	ldr	r2, [pc, #320]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 800446e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004472:	6013      	str	r3, [r2, #0]
 8004474:	e011      	b.n	800449a <HAL_RCC_OscConfig+0x3de>
 8004476:	4b4e      	ldr	r3, [pc, #312]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a4d      	ldr	r2, [pc, #308]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 800447c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004480:	6013      	str	r3, [r2, #0]
 8004482:	4b4b      	ldr	r3, [pc, #300]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a4a      	ldr	r2, [pc, #296]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 8004488:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800448c:	6013      	str	r3, [r2, #0]
 800448e:	4b48      	ldr	r3, [pc, #288]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a47      	ldr	r2, [pc, #284]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 8004494:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004498:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d014      	beq.n	80044cc <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80044a2:	f7fd fa3d 	bl	8001920 <HAL_GetTick>
 80044a6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044a8:	e009      	b.n	80044be <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044aa:	f7fd fa39 	bl	8001920 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b64      	cmp	r3, #100	@ 0x64
 80044b6:	d902      	bls.n	80044be <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	f000 bcd4 	b.w	8004e66 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044be:	4b3c      	ldr	r3, [pc, #240]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0ef      	beq.n	80044aa <HAL_RCC_OscConfig+0x3ee>
 80044ca:	e013      	b.n	80044f4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80044cc:	f7fd fa28 	bl	8001920 <HAL_GetTick>
 80044d0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044d2:	e009      	b.n	80044e8 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044d4:	f7fd fa24 	bl	8001920 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b64      	cmp	r3, #100	@ 0x64
 80044e0:	d902      	bls.n	80044e8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	f000 bcbf 	b.w	8004e66 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044e8:	4b31      	ldr	r3, [pc, #196]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1ef      	bne.n	80044d4 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d05f      	beq.n	80045c0 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004502:	2b04      	cmp	r3, #4
 8004504:	d005      	beq.n	8004512 <HAL_RCC_OscConfig+0x456>
 8004506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004508:	2b0c      	cmp	r3, #12
 800450a:	d114      	bne.n	8004536 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800450c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800450e:	2b02      	cmp	r3, #2
 8004510:	d111      	bne.n	8004536 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d102      	bne.n	8004520 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	f000 bca3 	b.w	8004e66 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004520:	4b23      	ldr	r3, [pc, #140]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	041b      	lsls	r3, r3, #16
 800452e:	4920      	ldr	r1, [pc, #128]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 8004530:	4313      	orrs	r3, r2
 8004532:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004534:	e044      	b.n	80045c0 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d024      	beq.n	8004588 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800453e:	4b1c      	ldr	r3, [pc, #112]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a1b      	ldr	r2, [pc, #108]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 8004544:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004548:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800454a:	f7fd f9e9 	bl	8001920 <HAL_GetTick>
 800454e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004550:	e009      	b.n	8004566 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004552:	f7fd f9e5 	bl	8001920 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d902      	bls.n	8004566 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	f000 bc80 	b.w	8004e66 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004566:	4b12      	ldr	r3, [pc, #72]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0ef      	beq.n	8004552 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004572:	4b0f      	ldr	r3, [pc, #60]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	041b      	lsls	r3, r3, #16
 8004580:	490b      	ldr	r1, [pc, #44]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 8004582:	4313      	orrs	r3, r2
 8004584:	610b      	str	r3, [r1, #16]
 8004586:	e01b      	b.n	80045c0 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004588:	4b09      	ldr	r3, [pc, #36]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a08      	ldr	r2, [pc, #32]	@ (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 800458e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004592:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004594:	f7fd f9c4 	bl	8001920 <HAL_GetTick>
 8004598:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800459a:	e00b      	b.n	80045b4 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800459c:	f7fd f9c0 	bl	8001920 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d904      	bls.n	80045b4 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	f000 bc5b 	b.w	8004e66 <HAL_RCC_OscConfig+0xdaa>
 80045b0:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045b4:	4baf      	ldr	r3, [pc, #700]	@ (8004874 <HAL_RCC_OscConfig+0x7b8>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1ed      	bne.n	800459c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0308 	and.w	r3, r3, #8
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 80c8 	beq.w	800475e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80045ce:	2300      	movs	r3, #0
 80045d0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045d4:	4ba7      	ldr	r3, [pc, #668]	@ (8004874 <HAL_RCC_OscConfig+0x7b8>)
 80045d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045da:	f003 0304 	and.w	r3, r3, #4
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d111      	bne.n	8004606 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045e2:	4ba4      	ldr	r3, [pc, #656]	@ (8004874 <HAL_RCC_OscConfig+0x7b8>)
 80045e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045e8:	4aa2      	ldr	r2, [pc, #648]	@ (8004874 <HAL_RCC_OscConfig+0x7b8>)
 80045ea:	f043 0304 	orr.w	r3, r3, #4
 80045ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80045f2:	4ba0      	ldr	r3, [pc, #640]	@ (8004874 <HAL_RCC_OscConfig+0x7b8>)
 80045f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	617b      	str	r3, [r7, #20]
 80045fe:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004600:	2301      	movs	r3, #1
 8004602:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004606:	4b9c      	ldr	r3, [pc, #624]	@ (8004878 <HAL_RCC_OscConfig+0x7bc>)
 8004608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d119      	bne.n	8004646 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004612:	4b99      	ldr	r3, [pc, #612]	@ (8004878 <HAL_RCC_OscConfig+0x7bc>)
 8004614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004616:	4a98      	ldr	r2, [pc, #608]	@ (8004878 <HAL_RCC_OscConfig+0x7bc>)
 8004618:	f043 0301 	orr.w	r3, r3, #1
 800461c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800461e:	f7fd f97f 	bl	8001920 <HAL_GetTick>
 8004622:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004624:	e009      	b.n	800463a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004626:	f7fd f97b 	bl	8001920 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d902      	bls.n	800463a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	f000 bc16 	b.w	8004e66 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800463a:	4b8f      	ldr	r3, [pc, #572]	@ (8004878 <HAL_RCC_OscConfig+0x7bc>)
 800463c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b00      	cmp	r3, #0
 8004644:	d0ef      	beq.n	8004626 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d05f      	beq.n	800470e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800464e:	4b89      	ldr	r3, [pc, #548]	@ (8004874 <HAL_RCC_OscConfig+0x7b8>)
 8004650:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004654:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	699a      	ldr	r2, [r3, #24]
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004660:	429a      	cmp	r2, r3
 8004662:	d037      	beq.n	80046d4 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d006      	beq.n	800467c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e3f4      	b.n	8004e66 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d01b      	beq.n	80046be <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8004686:	4b7b      	ldr	r3, [pc, #492]	@ (8004874 <HAL_RCC_OscConfig+0x7b8>)
 8004688:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800468c:	4a79      	ldr	r2, [pc, #484]	@ (8004874 <HAL_RCC_OscConfig+0x7b8>)
 800468e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004692:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8004696:	f7fd f943 	bl	8001920 <HAL_GetTick>
 800469a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800469c:	e008      	b.n	80046b0 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800469e:	f7fd f93f 	bl	8001920 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b05      	cmp	r3, #5
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e3da      	b.n	8004e66 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80046b0:	4b70      	ldr	r3, [pc, #448]	@ (8004874 <HAL_RCC_OscConfig+0x7b8>)
 80046b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1ef      	bne.n	800469e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80046be:	4b6d      	ldr	r3, [pc, #436]	@ (8004874 <HAL_RCC_OscConfig+0x7b8>)
 80046c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046c4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	4969      	ldr	r1, [pc, #420]	@ (8004874 <HAL_RCC_OscConfig+0x7b8>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80046d4:	4b67      	ldr	r3, [pc, #412]	@ (8004874 <HAL_RCC_OscConfig+0x7b8>)
 80046d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046da:	4a66      	ldr	r2, [pc, #408]	@ (8004874 <HAL_RCC_OscConfig+0x7b8>)
 80046dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80046e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80046e4:	f7fd f91c 	bl	8001920 <HAL_GetTick>
 80046e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ec:	f7fd f918 	bl	8001920 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b05      	cmp	r3, #5
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e3b3      	b.n	8004e66 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80046fe:	4b5d      	ldr	r3, [pc, #372]	@ (8004874 <HAL_RCC_OscConfig+0x7b8>)
 8004700:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004704:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0ef      	beq.n	80046ec <HAL_RCC_OscConfig+0x630>
 800470c:	e01b      	b.n	8004746 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800470e:	4b59      	ldr	r3, [pc, #356]	@ (8004874 <HAL_RCC_OscConfig+0x7b8>)
 8004710:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004714:	4a57      	ldr	r2, [pc, #348]	@ (8004874 <HAL_RCC_OscConfig+0x7b8>)
 8004716:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800471a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800471e:	f7fd f8ff 	bl	8001920 <HAL_GetTick>
 8004722:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004724:	e008      	b.n	8004738 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004726:	f7fd f8fb 	bl	8001920 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b05      	cmp	r3, #5
 8004732:	d901      	bls.n	8004738 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e396      	b.n	8004e66 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004738:	4b4e      	ldr	r3, [pc, #312]	@ (8004874 <HAL_RCC_OscConfig+0x7b8>)
 800473a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800473e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1ef      	bne.n	8004726 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004746:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800474a:	2b01      	cmp	r3, #1
 800474c:	d107      	bne.n	800475e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800474e:	4b49      	ldr	r3, [pc, #292]	@ (8004874 <HAL_RCC_OscConfig+0x7b8>)
 8004750:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004754:	4a47      	ldr	r2, [pc, #284]	@ (8004874 <HAL_RCC_OscConfig+0x7b8>)
 8004756:	f023 0304 	bic.w	r3, r3, #4
 800475a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0304 	and.w	r3, r3, #4
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 8111 	beq.w	800498e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800476c:	2300      	movs	r3, #0
 800476e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004772:	4b40      	ldr	r3, [pc, #256]	@ (8004874 <HAL_RCC_OscConfig+0x7b8>)
 8004774:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	2b00      	cmp	r3, #0
 800477e:	d111      	bne.n	80047a4 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004780:	4b3c      	ldr	r3, [pc, #240]	@ (8004874 <HAL_RCC_OscConfig+0x7b8>)
 8004782:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004786:	4a3b      	ldr	r2, [pc, #236]	@ (8004874 <HAL_RCC_OscConfig+0x7b8>)
 8004788:	f043 0304 	orr.w	r3, r3, #4
 800478c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004790:	4b38      	ldr	r3, [pc, #224]	@ (8004874 <HAL_RCC_OscConfig+0x7b8>)
 8004792:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004796:	f003 0304 	and.w	r3, r3, #4
 800479a:	613b      	str	r3, [r7, #16]
 800479c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800479e:	2301      	movs	r3, #1
 80047a0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80047a4:	4b34      	ldr	r3, [pc, #208]	@ (8004878 <HAL_RCC_OscConfig+0x7bc>)
 80047a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d118      	bne.n	80047e2 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80047b0:	4b31      	ldr	r3, [pc, #196]	@ (8004878 <HAL_RCC_OscConfig+0x7bc>)
 80047b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b4:	4a30      	ldr	r2, [pc, #192]	@ (8004878 <HAL_RCC_OscConfig+0x7bc>)
 80047b6:	f043 0301 	orr.w	r3, r3, #1
 80047ba:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047bc:	f7fd f8b0 	bl	8001920 <HAL_GetTick>
 80047c0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047c4:	f7fd f8ac 	bl	8001920 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e347      	b.n	8004e66 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80047d6:	4b28      	ldr	r3, [pc, #160]	@ (8004878 <HAL_RCC_OscConfig+0x7bc>)
 80047d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0f0      	beq.n	80047c4 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d01f      	beq.n	800482e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 0304 	and.w	r3, r3, #4
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d010      	beq.n	800481c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80047fa:	4b1e      	ldr	r3, [pc, #120]	@ (8004874 <HAL_RCC_OscConfig+0x7b8>)
 80047fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004800:	4a1c      	ldr	r2, [pc, #112]	@ (8004874 <HAL_RCC_OscConfig+0x7b8>)
 8004802:	f043 0304 	orr.w	r3, r3, #4
 8004806:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800480a:	4b1a      	ldr	r3, [pc, #104]	@ (8004874 <HAL_RCC_OscConfig+0x7b8>)
 800480c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004810:	4a18      	ldr	r2, [pc, #96]	@ (8004874 <HAL_RCC_OscConfig+0x7b8>)
 8004812:	f043 0301 	orr.w	r3, r3, #1
 8004816:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800481a:	e018      	b.n	800484e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800481c:	4b15      	ldr	r3, [pc, #84]	@ (8004874 <HAL_RCC_OscConfig+0x7b8>)
 800481e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004822:	4a14      	ldr	r2, [pc, #80]	@ (8004874 <HAL_RCC_OscConfig+0x7b8>)
 8004824:	f043 0301 	orr.w	r3, r3, #1
 8004828:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800482c:	e00f      	b.n	800484e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800482e:	4b11      	ldr	r3, [pc, #68]	@ (8004874 <HAL_RCC_OscConfig+0x7b8>)
 8004830:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004834:	4a0f      	ldr	r2, [pc, #60]	@ (8004874 <HAL_RCC_OscConfig+0x7b8>)
 8004836:	f023 0301 	bic.w	r3, r3, #1
 800483a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800483e:	4b0d      	ldr	r3, [pc, #52]	@ (8004874 <HAL_RCC_OscConfig+0x7b8>)
 8004840:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004844:	4a0b      	ldr	r2, [pc, #44]	@ (8004874 <HAL_RCC_OscConfig+0x7b8>)
 8004846:	f023 0304 	bic.w	r3, r3, #4
 800484a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d057      	beq.n	8004906 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8004856:	f7fd f863 	bl	8001920 <HAL_GetTick>
 800485a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800485c:	e00e      	b.n	800487c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800485e:	f7fd f85f 	bl	8001920 <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	f241 3288 	movw	r2, #5000	@ 0x1388
 800486c:	4293      	cmp	r3, r2
 800486e:	d905      	bls.n	800487c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e2f8      	b.n	8004e66 <HAL_RCC_OscConfig+0xdaa>
 8004874:	46020c00 	.word	0x46020c00
 8004878:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800487c:	4b9c      	ldr	r3, [pc, #624]	@ (8004af0 <HAL_RCC_OscConfig+0xa34>)
 800487e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d0e9      	beq.n	800485e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004892:	2b00      	cmp	r3, #0
 8004894:	d01b      	beq.n	80048ce <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004896:	4b96      	ldr	r3, [pc, #600]	@ (8004af0 <HAL_RCC_OscConfig+0xa34>)
 8004898:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800489c:	4a94      	ldr	r2, [pc, #592]	@ (8004af0 <HAL_RCC_OscConfig+0xa34>)
 800489e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80048a6:	e00a      	b.n	80048be <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048a8:	f7fd f83a 	bl	8001920 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e2d3      	b.n	8004e66 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80048be:	4b8c      	ldr	r3, [pc, #560]	@ (8004af0 <HAL_RCC_OscConfig+0xa34>)
 80048c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0ed      	beq.n	80048a8 <HAL_RCC_OscConfig+0x7ec>
 80048cc:	e053      	b.n	8004976 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80048ce:	4b88      	ldr	r3, [pc, #544]	@ (8004af0 <HAL_RCC_OscConfig+0xa34>)
 80048d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048d4:	4a86      	ldr	r2, [pc, #536]	@ (8004af0 <HAL_RCC_OscConfig+0xa34>)
 80048d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80048de:	e00a      	b.n	80048f6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e0:	f7fd f81e 	bl	8001920 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e2b7      	b.n	8004e66 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80048f6:	4b7e      	ldr	r3, [pc, #504]	@ (8004af0 <HAL_RCC_OscConfig+0xa34>)
 80048f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1ed      	bne.n	80048e0 <HAL_RCC_OscConfig+0x824>
 8004904:	e037      	b.n	8004976 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8004906:	f7fd f80b 	bl	8001920 <HAL_GetTick>
 800490a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800490c:	e00a      	b.n	8004924 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800490e:	f7fd f807 	bl	8001920 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	f241 3288 	movw	r2, #5000	@ 0x1388
 800491c:	4293      	cmp	r3, r2
 800491e:	d901      	bls.n	8004924 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e2a0      	b.n	8004e66 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004924:	4b72      	ldr	r3, [pc, #456]	@ (8004af0 <HAL_RCC_OscConfig+0xa34>)
 8004926:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1ed      	bne.n	800490e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004932:	4b6f      	ldr	r3, [pc, #444]	@ (8004af0 <HAL_RCC_OscConfig+0xa34>)
 8004934:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004938:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800493c:	2b00      	cmp	r3, #0
 800493e:	d01a      	beq.n	8004976 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004940:	4b6b      	ldr	r3, [pc, #428]	@ (8004af0 <HAL_RCC_OscConfig+0xa34>)
 8004942:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004946:	4a6a      	ldr	r2, [pc, #424]	@ (8004af0 <HAL_RCC_OscConfig+0xa34>)
 8004948:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800494c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004950:	e00a      	b.n	8004968 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004952:	f7fc ffe5 	bl	8001920 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004960:	4293      	cmp	r3, r2
 8004962:	d901      	bls.n	8004968 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e27e      	b.n	8004e66 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004968:	4b61      	ldr	r3, [pc, #388]	@ (8004af0 <HAL_RCC_OscConfig+0xa34>)
 800496a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800496e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1ed      	bne.n	8004952 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004976:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800497a:	2b01      	cmp	r3, #1
 800497c:	d107      	bne.n	800498e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800497e:	4b5c      	ldr	r3, [pc, #368]	@ (8004af0 <HAL_RCC_OscConfig+0xa34>)
 8004980:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004984:	4a5a      	ldr	r2, [pc, #360]	@ (8004af0 <HAL_RCC_OscConfig+0xa34>)
 8004986:	f023 0304 	bic.w	r3, r3, #4
 800498a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0320 	and.w	r3, r3, #32
 8004996:	2b00      	cmp	r3, #0
 8004998:	d036      	beq.n	8004a08 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d019      	beq.n	80049d6 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80049a2:	4b53      	ldr	r3, [pc, #332]	@ (8004af0 <HAL_RCC_OscConfig+0xa34>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a52      	ldr	r2, [pc, #328]	@ (8004af0 <HAL_RCC_OscConfig+0xa34>)
 80049a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80049ac:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80049ae:	f7fc ffb7 	bl	8001920 <HAL_GetTick>
 80049b2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80049b4:	e008      	b.n	80049c8 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049b6:	f7fc ffb3 	bl	8001920 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e24e      	b.n	8004e66 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80049c8:	4b49      	ldr	r3, [pc, #292]	@ (8004af0 <HAL_RCC_OscConfig+0xa34>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d0f0      	beq.n	80049b6 <HAL_RCC_OscConfig+0x8fa>
 80049d4:	e018      	b.n	8004a08 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80049d6:	4b46      	ldr	r3, [pc, #280]	@ (8004af0 <HAL_RCC_OscConfig+0xa34>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a45      	ldr	r2, [pc, #276]	@ (8004af0 <HAL_RCC_OscConfig+0xa34>)
 80049dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049e0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80049e2:	f7fc ff9d 	bl	8001920 <HAL_GetTick>
 80049e6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80049e8:	e008      	b.n	80049fc <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049ea:	f7fc ff99 	bl	8001920 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d901      	bls.n	80049fc <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e234      	b.n	8004e66 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80049fc:	4b3c      	ldr	r3, [pc, #240]	@ (8004af0 <HAL_RCC_OscConfig+0xa34>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1f0      	bne.n	80049ea <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d036      	beq.n	8004a82 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d019      	beq.n	8004a50 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004a1c:	4b34      	ldr	r3, [pc, #208]	@ (8004af0 <HAL_RCC_OscConfig+0xa34>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a33      	ldr	r2, [pc, #204]	@ (8004af0 <HAL_RCC_OscConfig+0xa34>)
 8004a22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a26:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004a28:	f7fc ff7a 	bl	8001920 <HAL_GetTick>
 8004a2c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004a30:	f7fc ff76 	bl	8001920 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e211      	b.n	8004e66 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004a42:	4b2b      	ldr	r3, [pc, #172]	@ (8004af0 <HAL_RCC_OscConfig+0xa34>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0f0      	beq.n	8004a30 <HAL_RCC_OscConfig+0x974>
 8004a4e:	e018      	b.n	8004a82 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004a50:	4b27      	ldr	r3, [pc, #156]	@ (8004af0 <HAL_RCC_OscConfig+0xa34>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a26      	ldr	r2, [pc, #152]	@ (8004af0 <HAL_RCC_OscConfig+0xa34>)
 8004a56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a5a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004a5c:	f7fc ff60 	bl	8001920 <HAL_GetTick>
 8004a60:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004a62:	e008      	b.n	8004a76 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004a64:	f7fc ff5c 	bl	8001920 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e1f7      	b.n	8004e66 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004a76:	4b1e      	ldr	r3, [pc, #120]	@ (8004af0 <HAL_RCC_OscConfig+0xa34>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1f0      	bne.n	8004a64 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d07f      	beq.n	8004b8e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d062      	beq.n	8004b5c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8004a96:	4b16      	ldr	r3, [pc, #88]	@ (8004af0 <HAL_RCC_OscConfig+0xa34>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	4a15      	ldr	r2, [pc, #84]	@ (8004af0 <HAL_RCC_OscConfig+0xa34>)
 8004a9c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004aa0:	6093      	str	r3, [r2, #8]
 8004aa2:	4b13      	ldr	r3, [pc, #76]	@ (8004af0 <HAL_RCC_OscConfig+0xa34>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aae:	4910      	ldr	r1, [pc, #64]	@ (8004af0 <HAL_RCC_OscConfig+0xa34>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004abc:	d309      	bcc.n	8004ad2 <HAL_RCC_OscConfig+0xa16>
 8004abe:	4b0c      	ldr	r3, [pc, #48]	@ (8004af0 <HAL_RCC_OscConfig+0xa34>)
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f023 021f 	bic.w	r2, r3, #31
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	4909      	ldr	r1, [pc, #36]	@ (8004af0 <HAL_RCC_OscConfig+0xa34>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	60cb      	str	r3, [r1, #12]
 8004ad0:	e02a      	b.n	8004b28 <HAL_RCC_OscConfig+0xa6c>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	da0c      	bge.n	8004af4 <HAL_RCC_OscConfig+0xa38>
 8004ada:	4b05      	ldr	r3, [pc, #20]	@ (8004af0 <HAL_RCC_OscConfig+0xa34>)
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	015b      	lsls	r3, r3, #5
 8004ae8:	4901      	ldr	r1, [pc, #4]	@ (8004af0 <HAL_RCC_OscConfig+0xa34>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	60cb      	str	r3, [r1, #12]
 8004aee:	e01b      	b.n	8004b28 <HAL_RCC_OscConfig+0xa6c>
 8004af0:	46020c00 	.word	0x46020c00
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004afc:	d30a      	bcc.n	8004b14 <HAL_RCC_OscConfig+0xa58>
 8004afe:	4ba1      	ldr	r3, [pc, #644]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	029b      	lsls	r3, r3, #10
 8004b0c:	499d      	ldr	r1, [pc, #628]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60cb      	str	r3, [r1, #12]
 8004b12:	e009      	b.n	8004b28 <HAL_RCC_OscConfig+0xa6c>
 8004b14:	4b9b      	ldr	r3, [pc, #620]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	03db      	lsls	r3, r3, #15
 8004b22:	4998      	ldr	r1, [pc, #608]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004b28:	4b96      	ldr	r3, [pc, #600]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a95      	ldr	r2, [pc, #596]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004b2e:	f043 0310 	orr.w	r3, r3, #16
 8004b32:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004b34:	f7fc fef4 	bl	8001920 <HAL_GetTick>
 8004b38:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004b3c:	f7fc fef0 	bl	8001920 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e18b      	b.n	8004e66 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004b4e:	4b8d      	ldr	r3, [pc, #564]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0320 	and.w	r3, r3, #32
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0f0      	beq.n	8004b3c <HAL_RCC_OscConfig+0xa80>
 8004b5a:	e018      	b.n	8004b8e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8004b5c:	4b89      	ldr	r3, [pc, #548]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a88      	ldr	r2, [pc, #544]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004b62:	f023 0310 	bic.w	r3, r3, #16
 8004b66:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004b68:	f7fc feda 	bl	8001920 <HAL_GetTick>
 8004b6c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004b70:	f7fc fed6 	bl	8001920 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e171      	b.n	8004e66 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004b82:	4b80      	ldr	r3, [pc, #512]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0320 	and.w	r3, r3, #32
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1f0      	bne.n	8004b70 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f000 8166 	beq.w	8004e64 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b9e:	4b79      	ldr	r3, [pc, #484]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	f003 030c 	and.w	r3, r3, #12
 8004ba6:	2b0c      	cmp	r3, #12
 8004ba8:	f000 80f2 	beq.w	8004d90 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	f040 80c5 	bne.w	8004d40 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004bb6:	4b73      	ldr	r3, [pc, #460]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a72      	ldr	r2, [pc, #456]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004bbc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bc0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004bc2:	f7fc fead 	bl	8001920 <HAL_GetTick>
 8004bc6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004bc8:	e008      	b.n	8004bdc <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bca:	f7fc fea9 	bl	8001920 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e144      	b.n	8004e66 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004bdc:	4b69      	ldr	r3, [pc, #420]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1f0      	bne.n	8004bca <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004be8:	4b66      	ldr	r3, [pc, #408]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bee:	f003 0304 	and.w	r3, r3, #4
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d111      	bne.n	8004c1a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004bf6:	4b63      	ldr	r3, [pc, #396]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bfc:	4a61      	ldr	r2, [pc, #388]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004bfe:	f043 0304 	orr.w	r3, r3, #4
 8004c02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004c06:	4b5f      	ldr	r3, [pc, #380]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004c08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	60fb      	str	r3, [r7, #12]
 8004c12:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004c14:	2301      	movs	r3, #1
 8004c16:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004c1a:	4b5b      	ldr	r3, [pc, #364]	@ (8004d88 <HAL_RCC_OscConfig+0xccc>)
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c22:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c26:	d102      	bne.n	8004c2e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004c2e:	4b56      	ldr	r3, [pc, #344]	@ (8004d88 <HAL_RCC_OscConfig+0xccc>)
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	4a55      	ldr	r2, [pc, #340]	@ (8004d88 <HAL_RCC_OscConfig+0xccc>)
 8004c34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c38:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004c3a:	4b52      	ldr	r3, [pc, #328]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c42:	f023 0303 	bic.w	r3, r3, #3
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004c4e:	3a01      	subs	r2, #1
 8004c50:	0212      	lsls	r2, r2, #8
 8004c52:	4311      	orrs	r1, r2
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	494a      	ldr	r1, [pc, #296]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c60:	4b48      	ldr	r3, [pc, #288]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004c62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c64:	4b49      	ldr	r3, [pc, #292]	@ (8004d8c <HAL_RCC_OscConfig+0xcd0>)
 8004c66:	4013      	ands	r3, r2
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004c6c:	3a01      	subs	r2, #1
 8004c6e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004c76:	3a01      	subs	r2, #1
 8004c78:	0252      	lsls	r2, r2, #9
 8004c7a:	b292      	uxth	r2, r2
 8004c7c:	4311      	orrs	r1, r2
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004c82:	3a01      	subs	r2, #1
 8004c84:	0412      	lsls	r2, r2, #16
 8004c86:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004c8a:	4311      	orrs	r1, r2
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004c90:	3a01      	subs	r2, #1
 8004c92:	0612      	lsls	r2, r2, #24
 8004c94:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	493a      	ldr	r1, [pc, #232]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004ca0:	4b38      	ldr	r3, [pc, #224]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca4:	4a37      	ldr	r2, [pc, #220]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004ca6:	f023 0310 	bic.w	r3, r3, #16
 8004caa:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cb0:	4a34      	ldr	r2, [pc, #208]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004cb6:	4b33      	ldr	r3, [pc, #204]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cba:	4a32      	ldr	r2, [pc, #200]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004cbc:	f043 0310 	orr.w	r3, r3, #16
 8004cc0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004cc2:	4b30      	ldr	r3, [pc, #192]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc6:	f023 020c 	bic.w	r2, r3, #12
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cce:	492d      	ldr	r1, [pc, #180]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8004cd4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d105      	bne.n	8004ce8 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004cdc:	4b2a      	ldr	r3, [pc, #168]	@ (8004d88 <HAL_RCC_OscConfig+0xccc>)
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	4a29      	ldr	r2, [pc, #164]	@ (8004d88 <HAL_RCC_OscConfig+0xccc>)
 8004ce2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ce6:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004ce8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d107      	bne.n	8004d00 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004cf0:	4b24      	ldr	r3, [pc, #144]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cf6:	4a23      	ldr	r2, [pc, #140]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004cf8:	f023 0304 	bic.w	r3, r3, #4
 8004cfc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004d00:	4b20      	ldr	r3, [pc, #128]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a1f      	ldr	r2, [pc, #124]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004d06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d0a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004d0c:	f7fc fe08 	bl	8001920 <HAL_GetTick>
 8004d10:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d14:	f7fc fe04 	bl	8001920 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e09f      	b.n	8004e66 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004d26:	4b17      	ldr	r3, [pc, #92]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d0f0      	beq.n	8004d14 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004d32:	4b14      	ldr	r3, [pc, #80]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d36:	4a13      	ldr	r2, [pc, #76]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004d38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d3c:	6293      	str	r3, [r2, #40]	@ 0x28
 8004d3e:	e091      	b.n	8004e64 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004d40:	4b10      	ldr	r3, [pc, #64]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a0f      	ldr	r2, [pc, #60]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004d46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d4a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004d4c:	f7fc fde8 	bl	8001920 <HAL_GetTick>
 8004d50:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d54:	f7fc fde4 	bl	8001920 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e07f      	b.n	8004e66 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004d66:	4b07      	ldr	r3, [pc, #28]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1f0      	bne.n	8004d54 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004d72:	4b04      	ldr	r3, [pc, #16]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d76:	4a03      	ldr	r2, [pc, #12]	@ (8004d84 <HAL_RCC_OscConfig+0xcc8>)
 8004d78:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004d7c:	f023 0303 	bic.w	r3, r3, #3
 8004d80:	6293      	str	r3, [r2, #40]	@ 0x28
 8004d82:	e06f      	b.n	8004e64 <HAL_RCC_OscConfig+0xda8>
 8004d84:	46020c00 	.word	0x46020c00
 8004d88:	46020800 	.word	0x46020800
 8004d8c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004d90:	4b37      	ldr	r3, [pc, #220]	@ (8004e70 <HAL_RCC_OscConfig+0xdb4>)
 8004d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d94:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004d96:	4b36      	ldr	r3, [pc, #216]	@ (8004e70 <HAL_RCC_OscConfig+0xdb4>)
 8004d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d9a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d039      	beq.n	8004e18 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	f003 0203 	and.w	r2, r3, #3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d132      	bne.n	8004e18 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	0a1b      	lsrs	r3, r3, #8
 8004db6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dbe:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d129      	bne.n	8004e18 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d122      	bne.n	8004e18 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ddc:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d11a      	bne.n	8004e18 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	0a5b      	lsrs	r3, r3, #9
 8004de6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d111      	bne.n	8004e18 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	0c1b      	lsrs	r3, r3, #16
 8004df8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e00:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d108      	bne.n	8004e18 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	0e1b      	lsrs	r3, r3, #24
 8004e0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e12:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d001      	beq.n	8004e1c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e024      	b.n	8004e66 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004e1c:	4b14      	ldr	r3, [pc, #80]	@ (8004e70 <HAL_RCC_OscConfig+0xdb4>)
 8004e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e20:	08db      	lsrs	r3, r3, #3
 8004e22:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d01a      	beq.n	8004e64 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004e2e:	4b10      	ldr	r3, [pc, #64]	@ (8004e70 <HAL_RCC_OscConfig+0xdb4>)
 8004e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e32:	4a0f      	ldr	r2, [pc, #60]	@ (8004e70 <HAL_RCC_OscConfig+0xdb4>)
 8004e34:	f023 0310 	bic.w	r3, r3, #16
 8004e38:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e3a:	f7fc fd71 	bl	8001920 <HAL_GetTick>
 8004e3e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004e40:	bf00      	nop
 8004e42:	f7fc fd6d 	bl	8001920 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d0f9      	beq.n	8004e42 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e52:	4a07      	ldr	r2, [pc, #28]	@ (8004e70 <HAL_RCC_OscConfig+0xdb4>)
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004e58:	4b05      	ldr	r3, [pc, #20]	@ (8004e70 <HAL_RCC_OscConfig+0xdb4>)
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e5c:	4a04      	ldr	r2, [pc, #16]	@ (8004e70 <HAL_RCC_OscConfig+0xdb4>)
 8004e5e:	f043 0310 	orr.w	r3, r3, #16
 8004e62:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3738      	adds	r7, #56	@ 0x38
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	46020c00 	.word	0x46020c00

08004e74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e1d9      	b.n	800523c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e88:	4b9b      	ldr	r3, [pc, #620]	@ (80050f8 <HAL_RCC_ClockConfig+0x284>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 030f 	and.w	r3, r3, #15
 8004e90:	683a      	ldr	r2, [r7, #0]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d910      	bls.n	8004eb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e96:	4b98      	ldr	r3, [pc, #608]	@ (80050f8 <HAL_RCC_ClockConfig+0x284>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f023 020f 	bic.w	r2, r3, #15
 8004e9e:	4996      	ldr	r1, [pc, #600]	@ (80050f8 <HAL_RCC_ClockConfig+0x284>)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ea6:	4b94      	ldr	r3, [pc, #592]	@ (80050f8 <HAL_RCC_ClockConfig+0x284>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 030f 	and.w	r3, r3, #15
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d001      	beq.n	8004eb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e1c1      	b.n	800523c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0310 	and.w	r3, r3, #16
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d010      	beq.n	8004ee6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	695a      	ldr	r2, [r3, #20]
 8004ec8:	4b8c      	ldr	r3, [pc, #560]	@ (80050fc <HAL_RCC_ClockConfig+0x288>)
 8004eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ecc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d908      	bls.n	8004ee6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004ed4:	4b89      	ldr	r3, [pc, #548]	@ (80050fc <HAL_RCC_ClockConfig+0x288>)
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	4986      	ldr	r1, [pc, #536]	@ (80050fc <HAL_RCC_ClockConfig+0x288>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0308 	and.w	r3, r3, #8
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d012      	beq.n	8004f18 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691a      	ldr	r2, [r3, #16]
 8004ef6:	4b81      	ldr	r3, [pc, #516]	@ (80050fc <HAL_RCC_ClockConfig+0x288>)
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	091b      	lsrs	r3, r3, #4
 8004efc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d909      	bls.n	8004f18 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004f04:	4b7d      	ldr	r3, [pc, #500]	@ (80050fc <HAL_RCC_ClockConfig+0x288>)
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	011b      	lsls	r3, r3, #4
 8004f12:	497a      	ldr	r1, [pc, #488]	@ (80050fc <HAL_RCC_ClockConfig+0x288>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d010      	beq.n	8004f46 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	68da      	ldr	r2, [r3, #12]
 8004f28:	4b74      	ldr	r3, [pc, #464]	@ (80050fc <HAL_RCC_ClockConfig+0x288>)
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d908      	bls.n	8004f46 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004f34:	4b71      	ldr	r3, [pc, #452]	@ (80050fc <HAL_RCC_ClockConfig+0x288>)
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	496e      	ldr	r1, [pc, #440]	@ (80050fc <HAL_RCC_ClockConfig+0x288>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d010      	beq.n	8004f74 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	689a      	ldr	r2, [r3, #8]
 8004f56:	4b69      	ldr	r3, [pc, #420]	@ (80050fc <HAL_RCC_ClockConfig+0x288>)
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	f003 030f 	and.w	r3, r3, #15
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d908      	bls.n	8004f74 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004f62:	4b66      	ldr	r3, [pc, #408]	@ (80050fc <HAL_RCC_ClockConfig+0x288>)
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	f023 020f 	bic.w	r2, r3, #15
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	4963      	ldr	r1, [pc, #396]	@ (80050fc <HAL_RCC_ClockConfig+0x288>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 80d2 	beq.w	8005126 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004f82:	2300      	movs	r3, #0
 8004f84:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	2b03      	cmp	r3, #3
 8004f8c:	d143      	bne.n	8005016 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f8e:	4b5b      	ldr	r3, [pc, #364]	@ (80050fc <HAL_RCC_ClockConfig+0x288>)
 8004f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f94:	f003 0304 	and.w	r3, r3, #4
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d110      	bne.n	8004fbe <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004f9c:	4b57      	ldr	r3, [pc, #348]	@ (80050fc <HAL_RCC_ClockConfig+0x288>)
 8004f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fa2:	4a56      	ldr	r2, [pc, #344]	@ (80050fc <HAL_RCC_ClockConfig+0x288>)
 8004fa4:	f043 0304 	orr.w	r3, r3, #4
 8004fa8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004fac:	4b53      	ldr	r3, [pc, #332]	@ (80050fc <HAL_RCC_ClockConfig+0x288>)
 8004fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fb2:	f003 0304 	and.w	r3, r3, #4
 8004fb6:	60bb      	str	r3, [r7, #8]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004fbe:	f7fc fcaf 	bl	8001920 <HAL_GetTick>
 8004fc2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004fc4:	4b4e      	ldr	r3, [pc, #312]	@ (8005100 <HAL_RCC_ClockConfig+0x28c>)
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00f      	beq.n	8004ff0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004fd0:	e008      	b.n	8004fe4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004fd2:	f7fc fca5 	bl	8001920 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e12b      	b.n	800523c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004fe4:	4b46      	ldr	r3, [pc, #280]	@ (8005100 <HAL_RCC_ClockConfig+0x28c>)
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0f0      	beq.n	8004fd2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004ff0:	7dfb      	ldrb	r3, [r7, #23]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d107      	bne.n	8005006 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004ff6:	4b41      	ldr	r3, [pc, #260]	@ (80050fc <HAL_RCC_ClockConfig+0x288>)
 8004ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ffc:	4a3f      	ldr	r2, [pc, #252]	@ (80050fc <HAL_RCC_ClockConfig+0x288>)
 8004ffe:	f023 0304 	bic.w	r3, r3, #4
 8005002:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005006:	4b3d      	ldr	r3, [pc, #244]	@ (80050fc <HAL_RCC_ClockConfig+0x288>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d121      	bne.n	8005056 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e112      	b.n	800523c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	2b02      	cmp	r3, #2
 800501c:	d107      	bne.n	800502e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800501e:	4b37      	ldr	r3, [pc, #220]	@ (80050fc <HAL_RCC_ClockConfig+0x288>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d115      	bne.n	8005056 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e106      	b.n	800523c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d107      	bne.n	8005046 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005036:	4b31      	ldr	r3, [pc, #196]	@ (80050fc <HAL_RCC_ClockConfig+0x288>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0304 	and.w	r3, r3, #4
 800503e:	2b00      	cmp	r3, #0
 8005040:	d109      	bne.n	8005056 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e0fa      	b.n	800523c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005046:	4b2d      	ldr	r3, [pc, #180]	@ (80050fc <HAL_RCC_ClockConfig+0x288>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e0f2      	b.n	800523c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8005056:	4b29      	ldr	r3, [pc, #164]	@ (80050fc <HAL_RCC_ClockConfig+0x288>)
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	f023 0203 	bic.w	r2, r3, #3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	4926      	ldr	r1, [pc, #152]	@ (80050fc <HAL_RCC_ClockConfig+0x288>)
 8005064:	4313      	orrs	r3, r2
 8005066:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005068:	f7fc fc5a 	bl	8001920 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	2b03      	cmp	r3, #3
 8005074:	d112      	bne.n	800509c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005076:	e00a      	b.n	800508e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005078:	f7fc fc52 	bl	8001920 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005086:	4293      	cmp	r3, r2
 8005088:	d901      	bls.n	800508e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e0d6      	b.n	800523c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800508e:	4b1b      	ldr	r3, [pc, #108]	@ (80050fc <HAL_RCC_ClockConfig+0x288>)
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	f003 030c 	and.w	r3, r3, #12
 8005096:	2b0c      	cmp	r3, #12
 8005098:	d1ee      	bne.n	8005078 <HAL_RCC_ClockConfig+0x204>
 800509a:	e044      	b.n	8005126 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d112      	bne.n	80050ca <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80050a4:	e00a      	b.n	80050bc <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050a6:	f7fc fc3b 	bl	8001920 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e0bf      	b.n	800523c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80050bc:	4b0f      	ldr	r3, [pc, #60]	@ (80050fc <HAL_RCC_ClockConfig+0x288>)
 80050be:	69db      	ldr	r3, [r3, #28]
 80050c0:	f003 030c 	and.w	r3, r3, #12
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d1ee      	bne.n	80050a6 <HAL_RCC_ClockConfig+0x232>
 80050c8:	e02d      	b.n	8005126 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d123      	bne.n	800511a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80050d2:	e00a      	b.n	80050ea <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050d4:	f7fc fc24 	bl	8001920 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e0a8      	b.n	800523c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80050ea:	4b04      	ldr	r3, [pc, #16]	@ (80050fc <HAL_RCC_ClockConfig+0x288>)
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	f003 030c 	and.w	r3, r3, #12
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1ee      	bne.n	80050d4 <HAL_RCC_ClockConfig+0x260>
 80050f6:	e016      	b.n	8005126 <HAL_RCC_ClockConfig+0x2b2>
 80050f8:	40022000 	.word	0x40022000
 80050fc:	46020c00 	.word	0x46020c00
 8005100:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005104:	f7fc fc0c 	bl	8001920 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005112:	4293      	cmp	r3, r2
 8005114:	d901      	bls.n	800511a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e090      	b.n	800523c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800511a:	4b4a      	ldr	r3, [pc, #296]	@ (8005244 <HAL_RCC_ClockConfig+0x3d0>)
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	f003 030c 	and.w	r3, r3, #12
 8005122:	2b04      	cmp	r3, #4
 8005124:	d1ee      	bne.n	8005104 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d010      	beq.n	8005154 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689a      	ldr	r2, [r3, #8]
 8005136:	4b43      	ldr	r3, [pc, #268]	@ (8005244 <HAL_RCC_ClockConfig+0x3d0>)
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	f003 030f 	and.w	r3, r3, #15
 800513e:	429a      	cmp	r2, r3
 8005140:	d208      	bcs.n	8005154 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005142:	4b40      	ldr	r3, [pc, #256]	@ (8005244 <HAL_RCC_ClockConfig+0x3d0>)
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	f023 020f 	bic.w	r2, r3, #15
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	493d      	ldr	r1, [pc, #244]	@ (8005244 <HAL_RCC_ClockConfig+0x3d0>)
 8005150:	4313      	orrs	r3, r2
 8005152:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005154:	4b3c      	ldr	r3, [pc, #240]	@ (8005248 <HAL_RCC_ClockConfig+0x3d4>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 030f 	and.w	r3, r3, #15
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	429a      	cmp	r2, r3
 8005160:	d210      	bcs.n	8005184 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005162:	4b39      	ldr	r3, [pc, #228]	@ (8005248 <HAL_RCC_ClockConfig+0x3d4>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f023 020f 	bic.w	r2, r3, #15
 800516a:	4937      	ldr	r1, [pc, #220]	@ (8005248 <HAL_RCC_ClockConfig+0x3d4>)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	4313      	orrs	r3, r2
 8005170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005172:	4b35      	ldr	r3, [pc, #212]	@ (8005248 <HAL_RCC_ClockConfig+0x3d4>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 030f 	and.w	r3, r3, #15
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	429a      	cmp	r2, r3
 800517e:	d001      	beq.n	8005184 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e05b      	b.n	800523c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0304 	and.w	r3, r3, #4
 800518c:	2b00      	cmp	r3, #0
 800518e:	d010      	beq.n	80051b2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68da      	ldr	r2, [r3, #12]
 8005194:	4b2b      	ldr	r3, [pc, #172]	@ (8005244 <HAL_RCC_ClockConfig+0x3d0>)
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800519c:	429a      	cmp	r2, r3
 800519e:	d208      	bcs.n	80051b2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80051a0:	4b28      	ldr	r3, [pc, #160]	@ (8005244 <HAL_RCC_ClockConfig+0x3d0>)
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	4925      	ldr	r1, [pc, #148]	@ (8005244 <HAL_RCC_ClockConfig+0x3d0>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0308 	and.w	r3, r3, #8
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d012      	beq.n	80051e4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	691a      	ldr	r2, [r3, #16]
 80051c2:	4b20      	ldr	r3, [pc, #128]	@ (8005244 <HAL_RCC_ClockConfig+0x3d0>)
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	091b      	lsrs	r3, r3, #4
 80051c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d209      	bcs.n	80051e4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80051d0:	4b1c      	ldr	r3, [pc, #112]	@ (8005244 <HAL_RCC_ClockConfig+0x3d0>)
 80051d2:	6a1b      	ldr	r3, [r3, #32]
 80051d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	011b      	lsls	r3, r3, #4
 80051de:	4919      	ldr	r1, [pc, #100]	@ (8005244 <HAL_RCC_ClockConfig+0x3d0>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0310 	and.w	r3, r3, #16
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d010      	beq.n	8005212 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	695a      	ldr	r2, [r3, #20]
 80051f4:	4b13      	ldr	r3, [pc, #76]	@ (8005244 <HAL_RCC_ClockConfig+0x3d0>)
 80051f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d208      	bcs.n	8005212 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005200:	4b10      	ldr	r3, [pc, #64]	@ (8005244 <HAL_RCC_ClockConfig+0x3d0>)
 8005202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005204:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	490d      	ldr	r1, [pc, #52]	@ (8005244 <HAL_RCC_ClockConfig+0x3d0>)
 800520e:	4313      	orrs	r3, r2
 8005210:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005212:	f000 f821 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 8005216:	4602      	mov	r2, r0
 8005218:	4b0a      	ldr	r3, [pc, #40]	@ (8005244 <HAL_RCC_ClockConfig+0x3d0>)
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	f003 030f 	and.w	r3, r3, #15
 8005220:	490a      	ldr	r1, [pc, #40]	@ (800524c <HAL_RCC_ClockConfig+0x3d8>)
 8005222:	5ccb      	ldrb	r3, [r1, r3]
 8005224:	fa22 f303 	lsr.w	r3, r2, r3
 8005228:	4a09      	ldr	r2, [pc, #36]	@ (8005250 <HAL_RCC_ClockConfig+0x3dc>)
 800522a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800522c:	4b09      	ldr	r3, [pc, #36]	@ (8005254 <HAL_RCC_ClockConfig+0x3e0>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4618      	mov	r0, r3
 8005232:	f7fc faeb 	bl	800180c <HAL_InitTick>
 8005236:	4603      	mov	r3, r0
 8005238:	73fb      	strb	r3, [r7, #15]

  return status;
 800523a:	7bfb      	ldrb	r3, [r7, #15]
}
 800523c:	4618      	mov	r0, r3
 800523e:	3718      	adds	r7, #24
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	46020c00 	.word	0x46020c00
 8005248:	40022000 	.word	0x40022000
 800524c:	0800a58c 	.word	0x0800a58c
 8005250:	20000000 	.word	0x20000000
 8005254:	20000004 	.word	0x20000004

08005258 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005258:	b480      	push	{r7}
 800525a:	b08b      	sub	sp, #44	@ 0x2c
 800525c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005262:	2300      	movs	r3, #0
 8005264:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005266:	4b78      	ldr	r3, [pc, #480]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	f003 030c 	and.w	r3, r3, #12
 800526e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005270:	4b75      	ldr	r3, [pc, #468]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005274:	f003 0303 	and.w	r3, r3, #3
 8005278:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d005      	beq.n	800528c <HAL_RCC_GetSysClockFreq+0x34>
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	2b0c      	cmp	r3, #12
 8005284:	d121      	bne.n	80052ca <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d11e      	bne.n	80052ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800528c:	4b6e      	ldr	r3, [pc, #440]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d107      	bne.n	80052a8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005298:	4b6b      	ldr	r3, [pc, #428]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800529a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800529e:	0b1b      	lsrs	r3, r3, #12
 80052a0:	f003 030f 	and.w	r3, r3, #15
 80052a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80052a6:	e005      	b.n	80052b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80052a8:	4b67      	ldr	r3, [pc, #412]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	0f1b      	lsrs	r3, r3, #28
 80052ae:	f003 030f 	and.w	r3, r3, #15
 80052b2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80052b4:	4a65      	ldr	r2, [pc, #404]	@ (800544c <HAL_RCC_GetSysClockFreq+0x1f4>)
 80052b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052bc:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d110      	bne.n	80052e6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80052c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80052c8:	e00d      	b.n	80052e6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80052ca:	4b5f      	ldr	r3, [pc, #380]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	f003 030c 	and.w	r3, r3, #12
 80052d2:	2b04      	cmp	r3, #4
 80052d4:	d102      	bne.n	80052dc <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052d6:	4b5e      	ldr	r3, [pc, #376]	@ (8005450 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80052d8:	623b      	str	r3, [r7, #32]
 80052da:	e004      	b.n	80052e6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	2b08      	cmp	r3, #8
 80052e0:	d101      	bne.n	80052e6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052e2:	4b5b      	ldr	r3, [pc, #364]	@ (8005450 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80052e4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	2b0c      	cmp	r3, #12
 80052ea:	f040 80a5 	bne.w	8005438 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80052ee:	4b56      	ldr	r3, [pc, #344]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f2:	f003 0303 	and.w	r3, r3, #3
 80052f6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80052f8:	4b53      	ldr	r3, [pc, #332]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052fc:	0a1b      	lsrs	r3, r3, #8
 80052fe:	f003 030f 	and.w	r3, r3, #15
 8005302:	3301      	adds	r3, #1
 8005304:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005306:	4b50      	ldr	r3, [pc, #320]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800530a:	091b      	lsrs	r3, r3, #4
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005312:	4b4d      	ldr	r3, [pc, #308]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005316:	08db      	lsrs	r3, r3, #3
 8005318:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	fb02 f303 	mul.w	r3, r2, r3
 8005322:	ee07 3a90 	vmov	s15, r3
 8005326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800532a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	2b02      	cmp	r3, #2
 8005332:	d003      	beq.n	800533c <HAL_RCC_GetSysClockFreq+0xe4>
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	2b03      	cmp	r3, #3
 8005338:	d022      	beq.n	8005380 <HAL_RCC_GetSysClockFreq+0x128>
 800533a:	e043      	b.n	80053c4 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	ee07 3a90 	vmov	s15, r3
 8005342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005346:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8005454 <HAL_RCC_GetSysClockFreq+0x1fc>
 800534a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800534e:	4b3e      	ldr	r3, [pc, #248]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005356:	ee07 3a90 	vmov	s15, r3
 800535a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800535e:	ed97 6a01 	vldr	s12, [r7, #4]
 8005362:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8005458 <HAL_RCC_GetSysClockFreq+0x200>
 8005366:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800536a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800536e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005372:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800537a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800537e:	e046      	b.n	800540e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	ee07 3a90 	vmov	s15, r3
 8005386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800538a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8005454 <HAL_RCC_GetSysClockFreq+0x1fc>
 800538e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005392:	4b2d      	ldr	r3, [pc, #180]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800539a:	ee07 3a90 	vmov	s15, r3
 800539e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80053a2:	ed97 6a01 	vldr	s12, [r7, #4]
 80053a6:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8005458 <HAL_RCC_GetSysClockFreq+0x200>
 80053aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80053b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053c2:	e024      	b.n	800540e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c6:	ee07 3a90 	vmov	s15, r3
 80053ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	ee07 3a90 	vmov	s15, r3
 80053d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053dc:	4b1a      	ldr	r3, [pc, #104]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80053de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053e4:	ee07 3a90 	vmov	s15, r3
 80053e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80053ec:	ed97 6a01 	vldr	s12, [r7, #4]
 80053f0:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8005458 <HAL_RCC_GetSysClockFreq+0x200>
 80053f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80053fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005400:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005404:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005408:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800540c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800540e:	4b0e      	ldr	r3, [pc, #56]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005412:	0e1b      	lsrs	r3, r3, #24
 8005414:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005418:	3301      	adds	r3, #1
 800541a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	ee07 3a90 	vmov	s15, r3
 8005422:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005426:	edd7 6a07 	vldr	s13, [r7, #28]
 800542a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800542e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005432:	ee17 3a90 	vmov	r3, s15
 8005436:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8005438:	6a3b      	ldr	r3, [r7, #32]
}
 800543a:	4618      	mov	r0, r3
 800543c:	372c      	adds	r7, #44	@ 0x2c
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	46020c00 	.word	0x46020c00
 800544c:	0800a5a4 	.word	0x0800a5a4
 8005450:	00f42400 	.word	0x00f42400
 8005454:	4b742400 	.word	0x4b742400
 8005458:	46000000 	.word	0x46000000

0800545c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005460:	f7ff fefa 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 8005464:	4602      	mov	r2, r0
 8005466:	4b07      	ldr	r3, [pc, #28]	@ (8005484 <HAL_RCC_GetHCLKFreq+0x28>)
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	f003 030f 	and.w	r3, r3, #15
 800546e:	4906      	ldr	r1, [pc, #24]	@ (8005488 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005470:	5ccb      	ldrb	r3, [r1, r3]
 8005472:	fa22 f303 	lsr.w	r3, r2, r3
 8005476:	4a05      	ldr	r2, [pc, #20]	@ (800548c <HAL_RCC_GetHCLKFreq+0x30>)
 8005478:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800547a:	4b04      	ldr	r3, [pc, #16]	@ (800548c <HAL_RCC_GetHCLKFreq+0x30>)
 800547c:	681b      	ldr	r3, [r3, #0]
}
 800547e:	4618      	mov	r0, r3
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	46020c00 	.word	0x46020c00
 8005488:	0800a58c 	.word	0x0800a58c
 800548c:	20000000 	.word	0x20000000

08005490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005494:	f7ff ffe2 	bl	800545c <HAL_RCC_GetHCLKFreq>
 8005498:	4602      	mov	r2, r0
 800549a:	4b05      	ldr	r3, [pc, #20]	@ (80054b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	091b      	lsrs	r3, r3, #4
 80054a0:	f003 0307 	and.w	r3, r3, #7
 80054a4:	4903      	ldr	r1, [pc, #12]	@ (80054b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054a6:	5ccb      	ldrb	r3, [r1, r3]
 80054a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	46020c00 	.word	0x46020c00
 80054b4:	0800a59c 	.word	0x0800a59c

080054b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80054bc:	f7ff ffce 	bl	800545c <HAL_RCC_GetHCLKFreq>
 80054c0:	4602      	mov	r2, r0
 80054c2:	4b05      	ldr	r3, [pc, #20]	@ (80054d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	0a1b      	lsrs	r3, r3, #8
 80054c8:	f003 0307 	and.w	r3, r3, #7
 80054cc:	4903      	ldr	r1, [pc, #12]	@ (80054dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80054ce:	5ccb      	ldrb	r3, [r1, r3]
 80054d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	46020c00 	.word	0x46020c00
 80054dc:	0800a59c 	.word	0x0800a59c

080054e0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80054e4:	f7ff ffba 	bl	800545c <HAL_RCC_GetHCLKFreq>
 80054e8:	4602      	mov	r2, r0
 80054ea:	4b05      	ldr	r3, [pc, #20]	@ (8005500 <HAL_RCC_GetPCLK3Freq+0x20>)
 80054ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ee:	091b      	lsrs	r3, r3, #4
 80054f0:	f003 0307 	and.w	r3, r3, #7
 80054f4:	4903      	ldr	r1, [pc, #12]	@ (8005504 <HAL_RCC_GetPCLK3Freq+0x24>)
 80054f6:	5ccb      	ldrb	r3, [r1, r3]
 80054f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	46020c00 	.word	0x46020c00
 8005504:	0800a59c 	.word	0x0800a59c

08005508 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005510:	4b3e      	ldr	r3, [pc, #248]	@ (800560c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005512:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005516:	f003 0304 	and.w	r3, r3, #4
 800551a:	2b00      	cmp	r3, #0
 800551c:	d003      	beq.n	8005526 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800551e:	f7fe fd5f 	bl	8003fe0 <HAL_PWREx_GetVoltageRange>
 8005522:	6178      	str	r0, [r7, #20]
 8005524:	e019      	b.n	800555a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005526:	4b39      	ldr	r3, [pc, #228]	@ (800560c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005528:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800552c:	4a37      	ldr	r2, [pc, #220]	@ (800560c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800552e:	f043 0304 	orr.w	r3, r3, #4
 8005532:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005536:	4b35      	ldr	r3, [pc, #212]	@ (800560c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005538:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800553c:	f003 0304 	and.w	r3, r3, #4
 8005540:	60fb      	str	r3, [r7, #12]
 8005542:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005544:	f7fe fd4c 	bl	8003fe0 <HAL_PWREx_GetVoltageRange>
 8005548:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800554a:	4b30      	ldr	r3, [pc, #192]	@ (800560c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800554c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005550:	4a2e      	ldr	r2, [pc, #184]	@ (800560c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005552:	f023 0304 	bic.w	r3, r3, #4
 8005556:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005560:	d003      	beq.n	800556a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005568:	d109      	bne.n	800557e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005570:	d202      	bcs.n	8005578 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005572:	2301      	movs	r3, #1
 8005574:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005576:	e033      	b.n	80055e0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005578:	2300      	movs	r3, #0
 800557a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800557c:	e030      	b.n	80055e0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005584:	d208      	bcs.n	8005598 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800558c:	d102      	bne.n	8005594 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800558e:	2303      	movs	r3, #3
 8005590:	613b      	str	r3, [r7, #16]
 8005592:	e025      	b.n	80055e0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e035      	b.n	8005604 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800559e:	d90f      	bls.n	80055c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d109      	bne.n	80055ba <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80055ac:	d902      	bls.n	80055b4 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80055ae:	2300      	movs	r3, #0
 80055b0:	613b      	str	r3, [r7, #16]
 80055b2:	e015      	b.n	80055e0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80055b4:	2301      	movs	r3, #1
 80055b6:	613b      	str	r3, [r7, #16]
 80055b8:	e012      	b.n	80055e0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80055ba:	2300      	movs	r3, #0
 80055bc:	613b      	str	r3, [r7, #16]
 80055be:	e00f      	b.n	80055e0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055c6:	d109      	bne.n	80055dc <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055ce:	d102      	bne.n	80055d6 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80055d0:	2301      	movs	r3, #1
 80055d2:	613b      	str	r3, [r7, #16]
 80055d4:	e004      	b.n	80055e0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80055d6:	2302      	movs	r3, #2
 80055d8:	613b      	str	r3, [r7, #16]
 80055da:	e001      	b.n	80055e0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80055dc:	2301      	movs	r3, #1
 80055de:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80055e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005610 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f023 020f 	bic.w	r2, r3, #15
 80055e8:	4909      	ldr	r1, [pc, #36]	@ (8005610 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80055f0:	4b07      	ldr	r3, [pc, #28]	@ (8005610 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 030f 	and.w	r3, r3, #15
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d001      	beq.n	8005602 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e000      	b.n	8005604 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3718      	adds	r7, #24
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	46020c00 	.word	0x46020c00
 8005610:	40022000 	.word	0x40022000

08005614 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005618:	b0ba      	sub	sp, #232	@ 0xe8
 800561a:	af00      	add	r7, sp, #0
 800561c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005620:	2300      	movs	r3, #0
 8005622:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005626:	2300      	movs	r3, #0
 8005628:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800562c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005634:	f002 0401 	and.w	r4, r2, #1
 8005638:	2500      	movs	r5, #0
 800563a:	ea54 0305 	orrs.w	r3, r4, r5
 800563e:	d00b      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005640:	4bcb      	ldr	r3, [pc, #812]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005646:	f023 0103 	bic.w	r1, r3, #3
 800564a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800564e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005650:	4ac7      	ldr	r2, [pc, #796]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005652:	430b      	orrs	r3, r1
 8005654:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005658:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800565c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005660:	f002 0802 	and.w	r8, r2, #2
 8005664:	f04f 0900 	mov.w	r9, #0
 8005668:	ea58 0309 	orrs.w	r3, r8, r9
 800566c:	d00b      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800566e:	4bc0      	ldr	r3, [pc, #768]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005674:	f023 010c 	bic.w	r1, r3, #12
 8005678:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800567c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800567e:	4abc      	ldr	r2, [pc, #752]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005680:	430b      	orrs	r3, r1
 8005682:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005686:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800568a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568e:	f002 0a04 	and.w	sl, r2, #4
 8005692:	f04f 0b00 	mov.w	fp, #0
 8005696:	ea5a 030b 	orrs.w	r3, sl, fp
 800569a:	d00b      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800569c:	4bb4      	ldr	r3, [pc, #720]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800569e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056a2:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80056a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ac:	4ab0      	ldr	r2, [pc, #704]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056ae:	430b      	orrs	r3, r1
 80056b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056bc:	f002 0308 	and.w	r3, r2, #8
 80056c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056c4:	2300      	movs	r3, #0
 80056c6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80056ca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80056ce:	460b      	mov	r3, r1
 80056d0:	4313      	orrs	r3, r2
 80056d2:	d00b      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80056d4:	4ba6      	ldr	r3, [pc, #664]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056da:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80056de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056e4:	4aa2      	ldr	r2, [pc, #648]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056e6:	430b      	orrs	r3, r1
 80056e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80056ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f4:	f002 0310 	and.w	r3, r2, #16
 80056f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056fc:	2300      	movs	r3, #0
 80056fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005702:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005706:	460b      	mov	r3, r1
 8005708:	4313      	orrs	r3, r2
 800570a:	d00b      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800570c:	4b98      	ldr	r3, [pc, #608]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800570e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005712:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005716:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800571a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800571c:	4a94      	ldr	r2, [pc, #592]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800571e:	430b      	orrs	r3, r1
 8005720:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005724:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572c:	f002 0320 	and.w	r3, r2, #32
 8005730:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005734:	2300      	movs	r3, #0
 8005736:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800573a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800573e:	460b      	mov	r3, r1
 8005740:	4313      	orrs	r3, r2
 8005742:	d00b      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005744:	4b8a      	ldr	r3, [pc, #552]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005746:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800574a:	f023 0107 	bic.w	r1, r3, #7
 800574e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005752:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005754:	4a86      	ldr	r2, [pc, #536]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005756:	430b      	orrs	r3, r1
 8005758:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800575c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005764:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005768:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800576c:	2300      	movs	r3, #0
 800576e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005772:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005776:	460b      	mov	r3, r1
 8005778:	4313      	orrs	r3, r2
 800577a:	d00b      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800577c:	4b7c      	ldr	r3, [pc, #496]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800577e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005782:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005786:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800578a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800578c:	4a78      	ldr	r2, [pc, #480]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800578e:	430b      	orrs	r3, r1
 8005790:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005794:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80057a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80057a4:	2300      	movs	r3, #0
 80057a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80057aa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80057ae:	460b      	mov	r3, r1
 80057b0:	4313      	orrs	r3, r2
 80057b2:	d00b      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80057b4:	4b6e      	ldr	r3, [pc, #440]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80057ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80057be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057c4:	4a6a      	ldr	r2, [pc, #424]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057c6:	430b      	orrs	r3, r1
 80057c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d4:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80057d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80057dc:	2300      	movs	r3, #0
 80057de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80057e2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80057e6:	460b      	mov	r3, r1
 80057e8:	4313      	orrs	r3, r2
 80057ea:	d00b      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80057ec:	4b60      	ldr	r3, [pc, #384]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80057f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80057f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057fc:	4a5c      	ldr	r2, [pc, #368]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057fe:	430b      	orrs	r3, r1
 8005800:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005804:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005810:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005814:	2300      	movs	r3, #0
 8005816:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800581a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800581e:	460b      	mov	r3, r1
 8005820:	4313      	orrs	r3, r2
 8005822:	d00b      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005824:	4b52      	ldr	r3, [pc, #328]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800582a:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800582e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005832:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005834:	4a4e      	ldr	r2, [pc, #312]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005836:	430b      	orrs	r3, r1
 8005838:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800583c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005844:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8005848:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800584c:	2300      	movs	r3, #0
 800584e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005852:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005856:	460b      	mov	r3, r1
 8005858:	4313      	orrs	r3, r2
 800585a:	d00b      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800585c:	4b44      	ldr	r3, [pc, #272]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800585e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005862:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005866:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800586a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800586c:	4a40      	ldr	r2, [pc, #256]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800586e:	430b      	orrs	r3, r1
 8005870:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005874:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005880:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005884:	2300      	movs	r3, #0
 8005886:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800588a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800588e:	460b      	mov	r3, r1
 8005890:	4313      	orrs	r3, r2
 8005892:	d00b      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005894:	4b36      	ldr	r3, [pc, #216]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800589a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800589e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058a4:	4a32      	ldr	r2, [pc, #200]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058a6:	430b      	orrs	r3, r1
 80058a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80058ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80058b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80058bc:	2300      	movs	r3, #0
 80058be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80058c2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80058c6:	460b      	mov	r3, r1
 80058c8:	4313      	orrs	r3, r2
 80058ca:	d00c      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80058cc:	4b28      	ldr	r3, [pc, #160]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80058d2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80058d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058de:	4a24      	ldr	r2, [pc, #144]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058e0:	430b      	orrs	r3, r1
 80058e2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80058e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ee:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80058f2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80058f4:	2300      	movs	r3, #0
 80058f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80058f8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80058fc:	460b      	mov	r3, r1
 80058fe:	4313      	orrs	r3, r2
 8005900:	d04f      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005902:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800590a:	2b80      	cmp	r3, #128	@ 0x80
 800590c:	d02d      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x356>
 800590e:	2b80      	cmp	r3, #128	@ 0x80
 8005910:	d827      	bhi.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005912:	2b60      	cmp	r3, #96	@ 0x60
 8005914:	d02e      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005916:	2b60      	cmp	r3, #96	@ 0x60
 8005918:	d823      	bhi.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800591a:	2b40      	cmp	r3, #64	@ 0x40
 800591c:	d006      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x318>
 800591e:	2b40      	cmp	r3, #64	@ 0x40
 8005920:	d81f      	bhi.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005922:	2b00      	cmp	r3, #0
 8005924:	d009      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x326>
 8005926:	2b20      	cmp	r3, #32
 8005928:	d011      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800592a:	e01a      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800592c:	4b10      	ldr	r3, [pc, #64]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800592e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005930:	4a0f      	ldr	r2, [pc, #60]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005932:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005936:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005938:	e01d      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800593a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800593e:	3308      	adds	r3, #8
 8005940:	4618      	mov	r0, r3
 8005942:	f002 fa17 	bl	8007d74 <RCCEx_PLL2_Config>
 8005946:	4603      	mov	r3, r0
 8005948:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800594c:	e013      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800594e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005952:	332c      	adds	r3, #44	@ 0x2c
 8005954:	4618      	mov	r0, r3
 8005956:	f002 faa5 	bl	8007ea4 <RCCEx_PLL3_Config>
 800595a:	4603      	mov	r3, r0
 800595c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005960:	e009      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005968:	e005      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800596a:	bf00      	nop
 800596c:	e003      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800596e:	bf00      	nop
 8005970:	46020c00 	.word	0x46020c00
        break;
 8005974:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005976:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10d      	bne.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800597e:	4bb6      	ldr	r3, [pc, #728]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005980:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005984:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8005988:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800598c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005990:	4ab1      	ldr	r2, [pc, #708]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005992:	430b      	orrs	r3, r1
 8005994:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005998:	e003      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800599a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800599e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80059a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059aa:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80059ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80059b0:	2300      	movs	r3, #0
 80059b2:	677b      	str	r3, [r7, #116]	@ 0x74
 80059b4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80059b8:	460b      	mov	r3, r1
 80059ba:	4313      	orrs	r3, r2
 80059bc:	d053      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80059be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059ca:	d033      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80059cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059d0:	d82c      	bhi.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x418>
 80059d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059d6:	d02f      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80059d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059dc:	d826      	bhi.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x418>
 80059de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059e2:	d008      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 80059e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059e8:	d820      	bhi.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x418>
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00a      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 80059ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059f2:	d011      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80059f4:	e01a      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80059f6:	4b98      	ldr	r3, [pc, #608]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80059f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fa:	4a97      	ldr	r2, [pc, #604]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80059fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a00:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005a02:	e01a      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a08:	3308      	adds	r3, #8
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f002 f9b2 	bl	8007d74 <RCCEx_PLL2_Config>
 8005a10:	4603      	mov	r3, r0
 8005a12:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005a16:	e010      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a1c:	332c      	adds	r3, #44	@ 0x2c
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f002 fa40 	bl	8007ea4 <RCCEx_PLL3_Config>
 8005a24:	4603      	mov	r3, r0
 8005a26:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005a2a:	e006      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005a32:	e002      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8005a34:	bf00      	nop
 8005a36:	e000      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8005a38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a3a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10d      	bne.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005a42:	4b85      	ldr	r3, [pc, #532]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005a44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a48:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005a4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a54:	4a80      	ldr	r2, [pc, #512]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005a56:	430b      	orrs	r3, r1
 8005a58:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005a5c:	e003      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a5e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a62:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005a66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005a72:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a74:	2300      	movs	r3, #0
 8005a76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a78:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	d046      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005a82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005a8a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005a8e:	d028      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005a90:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005a94:	d821      	bhi.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005a96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a9a:	d022      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005a9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005aa0:	d81b      	bhi.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005aa2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005aa6:	d01c      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005aa8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005aac:	d815      	bhi.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005aae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ab2:	d008      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005ab4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ab8:	d80f      	bhi.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d011      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005abe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ac2:	d00e      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005ac4:	e009      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ac6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005aca:	3308      	adds	r3, #8
 8005acc:	4618      	mov	r0, r3
 8005ace:	f002 f951 	bl	8007d74 <RCCEx_PLL2_Config>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005ad8:	e004      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005ae0:	e000      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8005ae2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ae4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d10d      	bne.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005aec:	4b5a      	ldr	r3, [pc, #360]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005aee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005af2:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005af6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005afa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005afe:	4a56      	ldr	r2, [pc, #344]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005b00:	430b      	orrs	r3, r1
 8005b02:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005b06:	e003      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b08:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005b0c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005b10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b18:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005b1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b1e:	2300      	movs	r3, #0
 8005b20:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b22:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005b26:	460b      	mov	r3, r1
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	d03f      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005b2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b34:	2b04      	cmp	r3, #4
 8005b36:	d81e      	bhi.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8005b38:	a201      	add	r2, pc, #4	@ (adr r2, 8005b40 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8005b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3e:	bf00      	nop
 8005b40:	08005b7f 	.word	0x08005b7f
 8005b44:	08005b55 	.word	0x08005b55
 8005b48:	08005b63 	.word	0x08005b63
 8005b4c:	08005b7f 	.word	0x08005b7f
 8005b50:	08005b7f 	.word	0x08005b7f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005b54:	4b40      	ldr	r3, [pc, #256]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b58:	4a3f      	ldr	r2, [pc, #252]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005b5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b5e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005b60:	e00e      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b66:	332c      	adds	r3, #44	@ 0x2c
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f002 f99b 	bl	8007ea4 <RCCEx_PLL3_Config>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005b74:	e004      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005b7c:	e000      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8005b7e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005b80:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10d      	bne.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005b88:	4b33      	ldr	r3, [pc, #204]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005b8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b8e:	f023 0107 	bic.w	r1, r3, #7
 8005b92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b9a:	4a2f      	ldr	r2, [pc, #188]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005b9c:	430b      	orrs	r3, r1
 8005b9e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005ba2:	e003      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005ba8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005bac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb4:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005bb8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005bba:	2300      	movs	r3, #0
 8005bbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005bbe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	d04d      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005bc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005bd0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005bd4:	d028      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8005bd6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005bda:	d821      	bhi.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005bdc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005be0:	d024      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x618>
 8005be2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005be6:	d81b      	bhi.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005be8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bec:	d00e      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8005bee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bf2:	d815      	bhi.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d01b      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8005bf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bfc:	d110      	bne.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005bfe:	4b16      	ldr	r3, [pc, #88]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c02:	4a15      	ldr	r2, [pc, #84]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005c04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c08:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005c0a:	e012      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c10:	332c      	adds	r3, #44	@ 0x2c
 8005c12:	4618      	mov	r0, r3
 8005c14:	f002 f946 	bl	8007ea4 <RCCEx_PLL3_Config>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005c1e:	e008      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005c26:	e004      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005c28:	bf00      	nop
 8005c2a:	e002      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005c2c:	bf00      	nop
 8005c2e:	e000      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005c30:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005c32:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d110      	bne.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8005c3a:	4b07      	ldr	r3, [pc, #28]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005c3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005c40:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005c44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c4c:	4a02      	ldr	r2, [pc, #8]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005c4e:	430b      	orrs	r3, r1
 8005c50:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005c54:	e006      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8005c56:	bf00      	nop
 8005c58:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c5c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005c60:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005c70:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c72:	2300      	movs	r3, #0
 8005c74:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c76:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	f000 80b5 	beq.w	8005dec <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c82:	2300      	movs	r3, #0
 8005c84:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c88:	4b9d      	ldr	r3, [pc, #628]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c8e:	f003 0304 	and.w	r3, r3, #4
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d113      	bne.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c96:	4b9a      	ldr	r3, [pc, #616]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c9c:	4a98      	ldr	r2, [pc, #608]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c9e:	f043 0304 	orr.w	r3, r3, #4
 8005ca2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005ca6:	4b96      	ldr	r3, [pc, #600]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cac:	f003 0304 	and.w	r3, r3, #4
 8005cb0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005cb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
      pwrclkchanged = SET;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005cbe:	4b91      	ldr	r3, [pc, #580]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc2:	4a90      	ldr	r2, [pc, #576]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005cc4:	f043 0301 	orr.w	r3, r3, #1
 8005cc8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005cca:	f7fb fe29 	bl	8001920 <HAL_GetTick>
 8005cce:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005cd2:	e00b      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cd4:	f7fb fe24 	bl	8001920 <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d903      	bls.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005cea:	e005      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005cec:	4b85      	ldr	r3, [pc, #532]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d0ed      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8005cf8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d165      	bne.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d00:	4b7f      	ldr	r3, [pc, #508]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d023      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8005d16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d1a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d01b      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d26:	4b76      	ldr	r3, [pc, #472]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d30:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d34:	4b72      	ldr	r3, [pc, #456]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d3a:	4a71      	ldr	r2, [pc, #452]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d40:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d44:	4b6e      	ldr	r3, [pc, #440]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d4a:	4a6d      	ldr	r2, [pc, #436]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d50:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005d54:	4a6a      	ldr	r2, [pc, #424]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d019      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d6a:	f7fb fdd9 	bl	8001920 <HAL_GetTick>
 8005d6e:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d72:	e00d      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d74:	f7fb fdd4 	bl	8001920 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d7e:	1ad2      	subs	r2, r2, r3
 8005d80:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d903      	bls.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8005d8e:	e006      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d90:	4b5b      	ldr	r3, [pc, #364]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d0ea      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8005d9e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10d      	bne.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005da6:	4b56      	ldr	r3, [pc, #344]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005da8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005dac:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005db0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005db4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005db8:	4a51      	ldr	r2, [pc, #324]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005dba:	430b      	orrs	r3, r1
 8005dbc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005dc0:	e008      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005dc2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005dc6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8005dca:	e003      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dcc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005dd0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005dd4:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d107      	bne.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ddc:	4b48      	ldr	r3, [pc, #288]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005de2:	4a47      	ldr	r2, [pc, #284]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005de4:	f023 0304 	bic.w	r3, r3, #4
 8005de8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005dec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005df8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dfe:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005e02:	460b      	mov	r3, r1
 8005e04:	4313      	orrs	r3, r2
 8005e06:	d042      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005e08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005e10:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005e14:	d022      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005e16:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005e1a:	d81b      	bhi.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005e1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e20:	d011      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8005e22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e26:	d815      	bhi.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d019      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8005e2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e30:	d110      	bne.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e36:	3308      	adds	r3, #8
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f001 ff9b 	bl	8007d74 <RCCEx_PLL2_Config>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005e44:	e00d      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e46:	4b2e      	ldr	r3, [pc, #184]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e4a:	4a2d      	ldr	r2, [pc, #180]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005e4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e50:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005e52:	e006      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005e5a:	e002      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005e5c:	bf00      	nop
 8005e5e:	e000      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005e60:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005e62:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10d      	bne.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005e6a:	4b25      	ldr	r3, [pc, #148]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e70:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005e74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005e7c:	4a20      	ldr	r2, [pc, #128]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005e7e:	430b      	orrs	r3, r1
 8005e80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005e84:	e003      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e86:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005e8a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005e8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e96:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005e9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ea0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	d032      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005eaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005eae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005eb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eb6:	d00b      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005eb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ebc:	d804      	bhi.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d008      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8005ec2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ec6:	d007      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005ece:	e004      	b.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005ed0:	bf00      	nop
 8005ed2:	e002      	b.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005ed4:	bf00      	nop
 8005ed6:	e000      	b.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005ed8:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005eda:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d112      	bne.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005ee2:	4b07      	ldr	r3, [pc, #28]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005ee4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005ee8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005eec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ef0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ef4:	4a02      	ldr	r2, [pc, #8]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005ef6:	430b      	orrs	r3, r1
 8005ef8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005efc:	e008      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8005efe:	bf00      	nop
 8005f00:	46020c00 	.word	0x46020c00
 8005f04:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f08:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005f0c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005f10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f18:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005f1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f1e:	2300      	movs	r3, #0
 8005f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f22:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005f26:	460b      	mov	r3, r1
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	d00c      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8005f2c:	4b98      	ldr	r3, [pc, #608]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f32:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8005f36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f3e:	4a94      	ldr	r2, [pc, #592]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f40:	430b      	orrs	r3, r1
 8005f42:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005f46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005f52:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f54:	2300      	movs	r3, #0
 8005f56:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f58:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	d019      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005f62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005f6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f6e:	d105      	bne.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005f70:	4b87      	ldr	r3, [pc, #540]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f74:	4a86      	ldr	r2, [pc, #536]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f7a:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005f7c:	4b84      	ldr	r3, [pc, #528]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f82:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005f86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005f8e:	4a80      	ldr	r2, [pc, #512]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f90:	430b      	orrs	r3, r1
 8005f92:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005f96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fa8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005fac:	460b      	mov	r3, r1
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	d00c      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005fb2:	4b77      	ldr	r3, [pc, #476]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005fb8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005fbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005fc0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005fc4:	4972      	ldr	r1, [pc, #456]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005fcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005fd8:	623b      	str	r3, [r7, #32]
 8005fda:	2300      	movs	r3, #0
 8005fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fde:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	d00c      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005fe8:	4b69      	ldr	r3, [pc, #420]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005fee:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005ff2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ff6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005ffa:	4965      	ldr	r1, [pc, #404]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006002:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800600e:	61bb      	str	r3, [r7, #24]
 8006010:	2300      	movs	r3, #0
 8006012:	61fb      	str	r3, [r7, #28]
 8006014:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006018:	460b      	mov	r3, r1
 800601a:	4313      	orrs	r3, r2
 800601c:	d00c      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800601e:	4b5c      	ldr	r3, [pc, #368]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006020:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006024:	f023 0218 	bic.w	r2, r3, #24
 8006028:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800602c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006030:	4957      	ldr	r1, [pc, #348]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006032:	4313      	orrs	r3, r2
 8006034:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006038:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800603c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006040:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006044:	613b      	str	r3, [r7, #16]
 8006046:	2300      	movs	r3, #0
 8006048:	617b      	str	r3, [r7, #20]
 800604a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800604e:	460b      	mov	r3, r1
 8006050:	4313      	orrs	r3, r2
 8006052:	d032      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006054:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006058:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800605c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006060:	d105      	bne.n	800606e <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006062:	4b4b      	ldr	r3, [pc, #300]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006066:	4a4a      	ldr	r2, [pc, #296]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006068:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800606c:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800606e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006072:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006076:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800607a:	d108      	bne.n	800608e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800607c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006080:	3308      	adds	r3, #8
 8006082:	4618      	mov	r0, r3
 8006084:	f001 fe76 	bl	8007d74 <RCCEx_PLL2_Config>
 8006088:	4603      	mov	r3, r0
 800608a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    }
    if (ret == HAL_OK)
 800608e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10d      	bne.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006096:	4b3e      	ldr	r3, [pc, #248]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006098:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800609c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80060a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80060a8:	4939      	ldr	r1, [pc, #228]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80060b0:	e003      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80060b6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80060ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c2:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80060c6:	60bb      	str	r3, [r7, #8]
 80060c8:	2300      	movs	r3, #0
 80060ca:	60fb      	str	r3, [r7, #12]
 80060cc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80060d0:	460b      	mov	r3, r1
 80060d2:	4313      	orrs	r3, r2
 80060d4:	d03a      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80060d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80060e2:	d00e      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 80060e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80060e8:	d815      	bhi.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d017      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80060ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80060f2:	d110      	bne.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060f4:	4b26      	ldr	r3, [pc, #152]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80060f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f8:	4a25      	ldr	r2, [pc, #148]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80060fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060fe:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006100:	e00e      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006106:	3308      	adds	r3, #8
 8006108:	4618      	mov	r0, r3
 800610a:	f001 fe33 	bl	8007d74 <RCCEx_PLL2_Config>
 800610e:	4603      	mov	r3, r0
 8006110:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006114:	e004      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800611c:	e000      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800611e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006120:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10d      	bne.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006128:	4b19      	ldr	r3, [pc, #100]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800612a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800612e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006132:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006136:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800613a:	4915      	ldr	r1, [pc, #84]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800613c:	4313      	orrs	r3, r2
 800613e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006142:	e003      	b.n	800614c <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006144:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006148:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800614c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006154:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006158:	603b      	str	r3, [r7, #0]
 800615a:	2300      	movs	r3, #0
 800615c:	607b      	str	r3, [r7, #4]
 800615e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006162:	460b      	mov	r3, r1
 8006164:	4313      	orrs	r3, r2
 8006166:	d00c      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006168:	4b09      	ldr	r3, [pc, #36]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800616a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800616e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006172:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006176:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800617a:	4905      	ldr	r1, [pc, #20]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800617c:	4313      	orrs	r3, r2
 800617e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006182:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8006186:	4618      	mov	r0, r3
 8006188:	37e8      	adds	r7, #232	@ 0xe8
 800618a:	46bd      	mov	sp, r7
 800618c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006190:	46020c00 	.word	0x46020c00

08006194 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006194:	b480      	push	{r7}
 8006196:	b089      	sub	sp, #36	@ 0x24
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800619c:	4ba6      	ldr	r3, [pc, #664]	@ (8006438 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800619e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061a4:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80061a6:	4ba4      	ldr	r3, [pc, #656]	@ (8006438 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80061a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061aa:	f003 0303 	and.w	r3, r3, #3
 80061ae:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80061b0:	4ba1      	ldr	r3, [pc, #644]	@ (8006438 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80061b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b4:	0a1b      	lsrs	r3, r3, #8
 80061b6:	f003 030f 	and.w	r3, r3, #15
 80061ba:	3301      	adds	r3, #1
 80061bc:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80061be:	4b9e      	ldr	r3, [pc, #632]	@ (8006438 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80061c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061c2:	091b      	lsrs	r3, r3, #4
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80061ca:	4b9b      	ldr	r3, [pc, #620]	@ (8006438 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80061cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ce:	08db      	lsrs	r3, r3, #3
 80061d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	fb02 f303 	mul.w	r3, r2, r3
 80061da:	ee07 3a90 	vmov	s15, r3
 80061de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061e2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	2b03      	cmp	r3, #3
 80061ea:	d062      	beq.n	80062b2 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	2b03      	cmp	r3, #3
 80061f0:	f200 8081 	bhi.w	80062f6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d024      	beq.n	8006244 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d17a      	bne.n	80062f6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	ee07 3a90 	vmov	s15, r3
 8006206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800620a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800643c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800620e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006212:	4b89      	ldr	r3, [pc, #548]	@ (8006438 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800621a:	ee07 3a90 	vmov	s15, r3
 800621e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006222:	ed97 6a02 	vldr	s12, [r7, #8]
 8006226:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006440 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800622a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800622e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006232:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006236:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800623a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800623e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006242:	e08f      	b.n	8006364 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006244:	4b7c      	ldr	r3, [pc, #496]	@ (8006438 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d005      	beq.n	800625c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8006250:	4b79      	ldr	r3, [pc, #484]	@ (8006438 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	0f1b      	lsrs	r3, r3, #28
 8006256:	f003 030f 	and.w	r3, r3, #15
 800625a:	e006      	b.n	800626a <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800625c:	4b76      	ldr	r3, [pc, #472]	@ (8006438 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800625e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006262:	041b      	lsls	r3, r3, #16
 8006264:	0f1b      	lsrs	r3, r3, #28
 8006266:	f003 030f 	and.w	r3, r3, #15
 800626a:	4a76      	ldr	r2, [pc, #472]	@ (8006444 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800626c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006270:	ee07 3a90 	vmov	s15, r3
 8006274:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	ee07 3a90 	vmov	s15, r3
 800627e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	ee07 3a90 	vmov	s15, r3
 800628c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006290:	ed97 6a02 	vldr	s12, [r7, #8]
 8006294:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006440 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006298:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800629c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80062a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062b0:	e058      	b.n	8006364 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	ee07 3a90 	vmov	s15, r3
 80062b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062bc:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800643c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80062c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062c4:	4b5c      	ldr	r3, [pc, #368]	@ (8006438 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80062c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062cc:	ee07 3a90 	vmov	s15, r3
 80062d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80062d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80062d8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006440 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80062dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80062e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062f4:	e036      	b.n	8006364 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80062f6:	4b50      	ldr	r3, [pc, #320]	@ (8006438 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d005      	beq.n	800630e <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8006302:	4b4d      	ldr	r3, [pc, #308]	@ (8006438 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	0f1b      	lsrs	r3, r3, #28
 8006308:	f003 030f 	and.w	r3, r3, #15
 800630c:	e006      	b.n	800631c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800630e:	4b4a      	ldr	r3, [pc, #296]	@ (8006438 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006310:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006314:	041b      	lsls	r3, r3, #16
 8006316:	0f1b      	lsrs	r3, r3, #28
 8006318:	f003 030f 	and.w	r3, r3, #15
 800631c:	4a49      	ldr	r2, [pc, #292]	@ (8006444 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800631e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006322:	ee07 3a90 	vmov	s15, r3
 8006326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	ee07 3a90 	vmov	s15, r3
 8006330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006334:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	ee07 3a90 	vmov	s15, r3
 800633e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006342:	ed97 6a02 	vldr	s12, [r7, #8]
 8006346:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006440 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800634a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800634e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006352:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006356:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800635a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800635e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006362:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006364:	4b34      	ldr	r3, [pc, #208]	@ (8006438 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006368:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d017      	beq.n	80063a0 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006370:	4b31      	ldr	r3, [pc, #196]	@ (8006438 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006374:	0a5b      	lsrs	r3, r3, #9
 8006376:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800637a:	ee07 3a90 	vmov	s15, r3
 800637e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8006382:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006386:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800638a:	edd7 6a07 	vldr	s13, [r7, #28]
 800638e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006396:	ee17 2a90 	vmov	r2, s15
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	601a      	str	r2, [r3, #0]
 800639e:	e002      	b.n	80063a6 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80063a6:	4b24      	ldr	r3, [pc, #144]	@ (8006438 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80063a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d017      	beq.n	80063e2 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80063b2:	4b21      	ldr	r3, [pc, #132]	@ (8006438 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80063b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063b6:	0c1b      	lsrs	r3, r3, #16
 80063b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063bc:	ee07 3a90 	vmov	s15, r3
 80063c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80063c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063c8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80063cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80063d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063d8:	ee17 2a90 	vmov	r2, s15
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	605a      	str	r2, [r3, #4]
 80063e0:	e002      	b.n	80063e8 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80063e8:	4b13      	ldr	r3, [pc, #76]	@ (8006438 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80063ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d017      	beq.n	8006424 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80063f4:	4b10      	ldr	r3, [pc, #64]	@ (8006438 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80063f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063f8:	0e1b      	lsrs	r3, r3, #24
 80063fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063fe:	ee07 3a90 	vmov	s15, r3
 8006402:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8006406:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800640a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800640e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800641a:	ee17 2a90 	vmov	r2, s15
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006422:	e002      	b.n	800642a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	609a      	str	r2, [r3, #8]
}
 800642a:	bf00      	nop
 800642c:	3724      	adds	r7, #36	@ 0x24
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	46020c00 	.word	0x46020c00
 800643c:	4b742400 	.word	0x4b742400
 8006440:	46000000 	.word	0x46000000
 8006444:	0800a5a4 	.word	0x0800a5a4

08006448 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006448:	b480      	push	{r7}
 800644a:	b089      	sub	sp, #36	@ 0x24
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006450:	4ba6      	ldr	r3, [pc, #664]	@ (80066ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006458:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800645a:	4ba4      	ldr	r3, [pc, #656]	@ (80066ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800645c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800645e:	f003 0303 	and.w	r3, r3, #3
 8006462:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006464:	4ba1      	ldr	r3, [pc, #644]	@ (80066ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006468:	0a1b      	lsrs	r3, r3, #8
 800646a:	f003 030f 	and.w	r3, r3, #15
 800646e:	3301      	adds	r3, #1
 8006470:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8006472:	4b9e      	ldr	r3, [pc, #632]	@ (80066ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006476:	091b      	lsrs	r3, r3, #4
 8006478:	f003 0301 	and.w	r3, r3, #1
 800647c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800647e:	4b9b      	ldr	r3, [pc, #620]	@ (80066ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006482:	08db      	lsrs	r3, r3, #3
 8006484:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	fb02 f303 	mul.w	r3, r2, r3
 800648e:	ee07 3a90 	vmov	s15, r3
 8006492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006496:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	2b03      	cmp	r3, #3
 800649e:	d062      	beq.n	8006566 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	2b03      	cmp	r3, #3
 80064a4:	f200 8081 	bhi.w	80065aa <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d024      	beq.n	80064f8 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d17a      	bne.n	80065aa <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	ee07 3a90 	vmov	s15, r3
 80064ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064be:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80066f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80064c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064c6:	4b89      	ldr	r3, [pc, #548]	@ (80066ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80064c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ce:	ee07 3a90 	vmov	s15, r3
 80064d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80064d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80064da:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80066f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80064de:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80064e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80064e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80064ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064f6:	e08f      	b.n	8006618 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80064f8:	4b7c      	ldr	r3, [pc, #496]	@ (80066ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d005      	beq.n	8006510 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8006504:	4b79      	ldr	r3, [pc, #484]	@ (80066ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	0f1b      	lsrs	r3, r3, #28
 800650a:	f003 030f 	and.w	r3, r3, #15
 800650e:	e006      	b.n	800651e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8006510:	4b76      	ldr	r3, [pc, #472]	@ (80066ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006512:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006516:	041b      	lsls	r3, r3, #16
 8006518:	0f1b      	lsrs	r3, r3, #28
 800651a:	f003 030f 	and.w	r3, r3, #15
 800651e:	4a76      	ldr	r2, [pc, #472]	@ (80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006524:	ee07 3a90 	vmov	s15, r3
 8006528:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	ee07 3a90 	vmov	s15, r3
 8006532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	ee07 3a90 	vmov	s15, r3
 8006540:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006544:	ed97 6a02 	vldr	s12, [r7, #8]
 8006548:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80066f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800654c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006550:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006554:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006558:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800655c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006560:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006564:	e058      	b.n	8006618 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	ee07 3a90 	vmov	s15, r3
 800656c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006570:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80066f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8006574:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006578:	4b5c      	ldr	r3, [pc, #368]	@ (80066ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800657a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800657c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006580:	ee07 3a90 	vmov	s15, r3
 8006584:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006588:	ed97 6a02 	vldr	s12, [r7, #8]
 800658c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80066f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006590:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006594:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006598:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800659c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80065a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065a8:	e036      	b.n	8006618 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80065aa:	4b50      	ldr	r3, [pc, #320]	@ (80066ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d005      	beq.n	80065c2 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80065b6:	4b4d      	ldr	r3, [pc, #308]	@ (80066ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	0f1b      	lsrs	r3, r3, #28
 80065bc:	f003 030f 	and.w	r3, r3, #15
 80065c0:	e006      	b.n	80065d0 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80065c2:	4b4a      	ldr	r3, [pc, #296]	@ (80066ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80065c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80065c8:	041b      	lsls	r3, r3, #16
 80065ca:	0f1b      	lsrs	r3, r3, #28
 80065cc:	f003 030f 	and.w	r3, r3, #15
 80065d0:	4a49      	ldr	r2, [pc, #292]	@ (80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80065d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065d6:	ee07 3a90 	vmov	s15, r3
 80065da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	ee07 3a90 	vmov	s15, r3
 80065e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	ee07 3a90 	vmov	s15, r3
 80065f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80065fa:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80066f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80065fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006606:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800660a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800660e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006612:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006616:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006618:	4b34      	ldr	r3, [pc, #208]	@ (80066ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800661a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800661c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d017      	beq.n	8006654 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006624:	4b31      	ldr	r3, [pc, #196]	@ (80066ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006628:	0a5b      	lsrs	r3, r3, #9
 800662a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800662e:	ee07 3a90 	vmov	s15, r3
 8006632:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8006636:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800663a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800663e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006646:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800664a:	ee17 2a90 	vmov	r2, s15
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	601a      	str	r2, [r3, #0]
 8006652:	e002      	b.n	800665a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800665a:	4b24      	ldr	r3, [pc, #144]	@ (80066ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800665c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800665e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d017      	beq.n	8006696 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006666:	4b21      	ldr	r3, [pc, #132]	@ (80066ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800666a:	0c1b      	lsrs	r3, r3, #16
 800666c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006670:	ee07 3a90 	vmov	s15, r3
 8006674:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006678:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800667c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006680:	edd7 6a07 	vldr	s13, [r7, #28]
 8006684:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800668c:	ee17 2a90 	vmov	r2, s15
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	605a      	str	r2, [r3, #4]
 8006694:	e002      	b.n	800669c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800669c:	4b13      	ldr	r3, [pc, #76]	@ (80066ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800669e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d017      	beq.n	80066d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80066a8:	4b10      	ldr	r3, [pc, #64]	@ (80066ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80066aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066ac:	0e1b      	lsrs	r3, r3, #24
 80066ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066b2:	ee07 3a90 	vmov	s15, r3
 80066b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80066ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80066be:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80066c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80066c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066ce:	ee17 2a90 	vmov	r2, s15
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80066d6:	e002      	b.n	80066de <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	609a      	str	r2, [r3, #8]
}
 80066de:	bf00      	nop
 80066e0:	3724      	adds	r7, #36	@ 0x24
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	46020c00 	.word	0x46020c00
 80066f0:	4b742400 	.word	0x4b742400
 80066f4:	46000000 	.word	0x46000000
 80066f8:	0800a5a4 	.word	0x0800a5a4

080066fc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b089      	sub	sp, #36	@ 0x24
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006704:	4ba6      	ldr	r3, [pc, #664]	@ (80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800670c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800670e:	4ba4      	ldr	r3, [pc, #656]	@ (80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006712:	f003 0303 	and.w	r3, r3, #3
 8006716:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006718:	4ba1      	ldr	r3, [pc, #644]	@ (80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800671a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800671c:	0a1b      	lsrs	r3, r3, #8
 800671e:	f003 030f 	and.w	r3, r3, #15
 8006722:	3301      	adds	r3, #1
 8006724:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8006726:	4b9e      	ldr	r3, [pc, #632]	@ (80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800672a:	091b      	lsrs	r3, r3, #4
 800672c:	f003 0301 	and.w	r3, r3, #1
 8006730:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006732:	4b9b      	ldr	r3, [pc, #620]	@ (80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006734:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006736:	08db      	lsrs	r3, r3, #3
 8006738:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	fb02 f303 	mul.w	r3, r2, r3
 8006742:	ee07 3a90 	vmov	s15, r3
 8006746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800674a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	2b03      	cmp	r3, #3
 8006752:	d062      	beq.n	800681a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	2b03      	cmp	r3, #3
 8006758:	f200 8081 	bhi.w	800685e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d024      	beq.n	80067ac <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	2b02      	cmp	r3, #2
 8006766:	d17a      	bne.n	800685e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	ee07 3a90 	vmov	s15, r3
 800676e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006772:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80069a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8006776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800677a:	4b89      	ldr	r3, [pc, #548]	@ (80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800677c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800677e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006782:	ee07 3a90 	vmov	s15, r3
 8006786:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800678a:	ed97 6a02 	vldr	s12, [r7, #8]
 800678e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80069a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006792:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006796:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800679a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800679e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80067a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067a6:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 80067aa:	e08f      	b.n	80068cc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80067ac:	4b7c      	ldr	r3, [pc, #496]	@ (80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d005      	beq.n	80067c4 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80067b8:	4b79      	ldr	r3, [pc, #484]	@ (80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	0f1b      	lsrs	r3, r3, #28
 80067be:	f003 030f 	and.w	r3, r3, #15
 80067c2:	e006      	b.n	80067d2 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80067c4:	4b76      	ldr	r3, [pc, #472]	@ (80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80067c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80067ca:	041b      	lsls	r3, r3, #16
 80067cc:	0f1b      	lsrs	r3, r3, #28
 80067ce:	f003 030f 	and.w	r3, r3, #15
 80067d2:	4a76      	ldr	r2, [pc, #472]	@ (80069ac <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80067d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067d8:	ee07 3a90 	vmov	s15, r3
 80067dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	ee07 3a90 	vmov	s15, r3
 80067e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	ee07 3a90 	vmov	s15, r3
 80067f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80067fc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80069a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006800:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006804:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006808:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800680c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006814:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006818:	e058      	b.n	80068cc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	ee07 3a90 	vmov	s15, r3
 8006820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006824:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80069a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8006828:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800682c:	4b5c      	ldr	r3, [pc, #368]	@ (80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800682e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006834:	ee07 3a90 	vmov	s15, r3
 8006838:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800683c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006840:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80069a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006844:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006848:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800684c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006850:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006858:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800685c:	e036      	b.n	80068cc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800685e:	4b50      	ldr	r3, [pc, #320]	@ (80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006866:	2b00      	cmp	r3, #0
 8006868:	d005      	beq.n	8006876 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800686a:	4b4d      	ldr	r3, [pc, #308]	@ (80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	0f1b      	lsrs	r3, r3, #28
 8006870:	f003 030f 	and.w	r3, r3, #15
 8006874:	e006      	b.n	8006884 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8006876:	4b4a      	ldr	r3, [pc, #296]	@ (80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006878:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800687c:	041b      	lsls	r3, r3, #16
 800687e:	0f1b      	lsrs	r3, r3, #28
 8006880:	f003 030f 	and.w	r3, r3, #15
 8006884:	4a49      	ldr	r2, [pc, #292]	@ (80069ac <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8006886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800688a:	ee07 3a90 	vmov	s15, r3
 800688e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	ee07 3a90 	vmov	s15, r3
 8006898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800689c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	ee07 3a90 	vmov	s15, r3
 80068a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80068ae:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80069a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80068b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068be:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80068c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068ca:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80068cc:	4b34      	ldr	r3, [pc, #208]	@ (80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80068ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d017      	beq.n	8006908 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80068d8:	4b31      	ldr	r3, [pc, #196]	@ (80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80068da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068dc:	0a5b      	lsrs	r3, r3, #9
 80068de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068e2:	ee07 3a90 	vmov	s15, r3
 80068e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80068ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068ee:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80068f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80068f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068fe:	ee17 2a90 	vmov	r2, s15
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	601a      	str	r2, [r3, #0]
 8006906:	e002      	b.n	800690e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800690e:	4b24      	ldr	r3, [pc, #144]	@ (80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d017      	beq.n	800694a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800691a:	4b21      	ldr	r3, [pc, #132]	@ (80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800691c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800691e:	0c1b      	lsrs	r3, r3, #16
 8006920:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006924:	ee07 3a90 	vmov	s15, r3
 8006928:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800692c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006930:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006934:	edd7 6a07 	vldr	s13, [r7, #28]
 8006938:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800693c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006940:	ee17 2a90 	vmov	r2, s15
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	605a      	str	r2, [r3, #4]
 8006948:	e002      	b.n	8006950 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006950:	4b13      	ldr	r3, [pc, #76]	@ (80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006954:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d017      	beq.n	800698c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800695c:	4b10      	ldr	r3, [pc, #64]	@ (80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800695e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006960:	0e1b      	lsrs	r3, r3, #24
 8006962:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006966:	ee07 3a90 	vmov	s15, r3
 800696a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800696e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006972:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006976:	edd7 6a07 	vldr	s13, [r7, #28]
 800697a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800697e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006982:	ee17 2a90 	vmov	r2, s15
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800698a:	e002      	b.n	8006992 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	609a      	str	r2, [r3, #8]
}
 8006992:	bf00      	nop
 8006994:	3724      	adds	r7, #36	@ 0x24
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	46020c00 	.word	0x46020c00
 80069a4:	4b742400 	.word	0x4b742400
 80069a8:	46000000 	.word	0x46000000
 80069ac:	0800a5a4 	.word	0x0800a5a4

080069b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b08e      	sub	sp, #56	@ 0x38
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80069ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069be:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80069c2:	430b      	orrs	r3, r1
 80069c4:	d145      	bne.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80069c6:	4ba7      	ldr	r3, [pc, #668]	@ (8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80069c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069d0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80069d2:	4ba4      	ldr	r3, [pc, #656]	@ (8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80069d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069d8:	f003 0302 	and.w	r3, r3, #2
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d108      	bne.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80069e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069e6:	d104      	bne.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80069e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80069ee:	f001 b9b3 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80069f2:	4b9c      	ldr	r3, [pc, #624]	@ (8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80069f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a00:	d114      	bne.n	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8006a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a08:	d110      	bne.n	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a0a:	4b96      	ldr	r3, [pc, #600]	@ (8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a18:	d103      	bne.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8006a1a:	23fa      	movs	r3, #250	@ 0xfa
 8006a1c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a1e:	f001 b99b 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8006a22:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006a26:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a28:	f001 b996 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006a2c:	4b8d      	ldr	r3, [pc, #564]	@ (8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a38:	d107      	bne.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a40:	d103      	bne.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8006a42:	4b89      	ldr	r3, [pc, #548]	@ (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006a44:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a46:	f001 b987 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a4e:	f001 b983 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006a52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a56:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006a5a:	430b      	orrs	r3, r1
 8006a5c:	d151      	bne.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006a5e:	4b81      	ldr	r3, [pc, #516]	@ (8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006a64:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8006a68:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6c:	2b80      	cmp	r3, #128	@ 0x80
 8006a6e:	d035      	beq.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8006a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a72:	2b80      	cmp	r3, #128	@ 0x80
 8006a74:	d841      	bhi.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a78:	2b60      	cmp	r3, #96	@ 0x60
 8006a7a:	d02a      	beq.n	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8006a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a7e:	2b60      	cmp	r3, #96	@ 0x60
 8006a80:	d83b      	bhi.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a84:	2b40      	cmp	r3, #64	@ 0x40
 8006a86:	d009      	beq.n	8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a8a:	2b40      	cmp	r3, #64	@ 0x40
 8006a8c:	d835      	bhi.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00c      	beq.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a96:	2b20      	cmp	r3, #32
 8006a98:	d012      	beq.n	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006a9a:	e02e      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7ff fb77 	bl	8006194 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006aaa:	f001 b955 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006aae:	f107 0318 	add.w	r3, r7, #24
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7ff fcc8 	bl	8006448 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006abc:	f001 b94c 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ac0:	f107 030c 	add.w	r3, r7, #12
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7ff fe19 	bl	80066fc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ace:	f001 b943 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006ad2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006ad6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ad8:	f001 b93e 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006adc:	4b61      	ldr	r3, [pc, #388]	@ (8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ae4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ae8:	d103      	bne.n	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8006aea:	4b60      	ldr	r3, [pc, #384]	@ (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006aec:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006aee:	f001 b933 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006af2:	2300      	movs	r3, #0
 8006af4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006af6:	f001 b92f 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 8006afa:	2300      	movs	r3, #0
 8006afc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006afe:	f001 b92b 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006b02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b06:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006b0a:	430b      	orrs	r3, r1
 8006b0c:	d158      	bne.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006b0e:	4b55      	ldr	r3, [pc, #340]	@ (8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006b10:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006b14:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b18:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b20:	d03b      	beq.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b28:	d846      	bhi.n	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b30:	d02e      	beq.n	8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8006b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b38:	d83e      	bhi.n	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b40:	d00b      	beq.n	8006b5a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8006b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b48:	d836      	bhi.n	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00d      	beq.n	8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b56:	d012      	beq.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006b58:	e02e      	b.n	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7ff fb18 	bl	8006194 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b68:	f001 b8f6 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b6c:	f107 0318 	add.w	r3, r7, #24
 8006b70:	4618      	mov	r0, r3
 8006b72:	f7ff fc69 	bl	8006448 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b7a:	f001 b8ed 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b7e:	f107 030c 	add.w	r3, r7, #12
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7ff fdba 	bl	80066fc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b8c:	f001 b8e4 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006b90:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006b94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b96:	f001 b8df 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b9a:	4b32      	ldr	r3, [pc, #200]	@ (8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ba2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ba6:	d103      	bne.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8006ba8:	4b30      	ldr	r3, [pc, #192]	@ (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006baa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006bac:	f001 b8d4 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bb4:	f001 b8d0 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bbc:	f001 b8cc 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8006bc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bc4:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006bc8:	430b      	orrs	r3, r1
 8006bca:	d126      	bne.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8006bcc:	4b25      	ldr	r3, [pc, #148]	@ (8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006bce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006bd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bd6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8006bd8:	4b22      	ldr	r3, [pc, #136]	@ (8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006be0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006be4:	d106      	bne.n	8006bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d103      	bne.n	8006bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8006bec:	4b1f      	ldr	r3, [pc, #124]	@ (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006bee:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bf0:	f001 b8b2 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8006bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c00:	d107      	bne.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8006c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c08:	d103      	bne.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8006c0a:	4b19      	ldr	r3, [pc, #100]	@ (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006c0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c0e:	f001 b8a3 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c16:	f001 b89f 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8006c1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c1e:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8006c22:	430b      	orrs	r3, r1
 8006c24:	d16e      	bne.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006c26:	4b0f      	ldr	r3, [pc, #60]	@ (8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c2c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006c30:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c34:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006c38:	d03d      	beq.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006c40:	d85c      	bhi.n	8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c48:	d014      	beq.n	8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c50:	d854      	bhi.n	8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d01f      	beq.n	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8006c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c5e:	d012      	beq.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8006c60:	e04c      	b.n	8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006c62:	bf00      	nop
 8006c64:	46020c00 	.word	0x46020c00
 8006c68:	0007a120 	.word	0x0007a120
 8006c6c:	00f42400 	.word	0x00f42400
 8006c70:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7ff fa8b 	bl	8006194 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c82:	f001 b869 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c86:	f107 0318 	add.w	r3, r7, #24
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7ff fbdc 	bl	8006448 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c94:	f001 b860 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006c98:	4ba7      	ldr	r3, [pc, #668]	@ (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ca0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ca4:	d103      	bne.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8006ca6:	4ba5      	ldr	r3, [pc, #660]	@ (8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006ca8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006caa:	f001 b855 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cb2:	f001 b851 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006cb6:	4ba0      	ldr	r3, [pc, #640]	@ (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0320 	and.w	r3, r3, #32
 8006cbe:	2b20      	cmp	r3, #32
 8006cc0:	d118      	bne.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006cc2:	4b9d      	ldr	r3, [pc, #628]	@ (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d005      	beq.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006cce:	4b9a      	ldr	r3, [pc, #616]	@ (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	0e1b      	lsrs	r3, r3, #24
 8006cd4:	f003 030f 	and.w	r3, r3, #15
 8006cd8:	e006      	b.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006cda:	4b97      	ldr	r3, [pc, #604]	@ (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006cdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006ce0:	041b      	lsls	r3, r3, #16
 8006ce2:	0e1b      	lsrs	r3, r3, #24
 8006ce4:	f003 030f 	and.w	r3, r3, #15
 8006ce8:	4a95      	ldr	r2, [pc, #596]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cee:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006cf0:	f001 b832 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cf8:	f001 b82e 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d00:	f001 b82a 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006d04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d08:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8006d0c:	430b      	orrs	r3, r1
 8006d0e:	d17f      	bne.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006d10:	4b89      	ldr	r3, [pc, #548]	@ (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006d16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d1a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d165      	bne.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006d22:	4b85      	ldr	r3, [pc, #532]	@ (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d28:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006d2c:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d30:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006d34:	d034      	beq.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8006d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d38:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006d3c:	d853      	bhi.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d44:	d00b      	beq.n	8006d5e <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8006d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d4c:	d84b      	bhi.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d016      	beq.n	8006d82 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8006d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d56:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006d5a:	d009      	beq.n	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8006d5c:	e043      	b.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7ff fa16 	bl	8006194 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d6a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006d6c:	f000 bff4 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d70:	f107 0318 	add.w	r3, r7, #24
 8006d74:	4618      	mov	r0, r3
 8006d76:	f7ff fb67 	bl	8006448 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006d7e:	f000 bfeb 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006d82:	4b6d      	ldr	r3, [pc, #436]	@ (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d8e:	d103      	bne.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8006d90:	4b6a      	ldr	r3, [pc, #424]	@ (8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006d92:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006d94:	f000 bfe0 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006d9c:	f000 bfdc 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006da0:	4b65      	ldr	r3, [pc, #404]	@ (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0320 	and.w	r3, r3, #32
 8006da8:	2b20      	cmp	r3, #32
 8006daa:	d118      	bne.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006dac:	4b62      	ldr	r3, [pc, #392]	@ (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d005      	beq.n	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8006db8:	4b5f      	ldr	r3, [pc, #380]	@ (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	0e1b      	lsrs	r3, r3, #24
 8006dbe:	f003 030f 	and.w	r3, r3, #15
 8006dc2:	e006      	b.n	8006dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006dc4:	4b5c      	ldr	r3, [pc, #368]	@ (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006dc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006dca:	041b      	lsls	r3, r3, #16
 8006dcc:	0e1b      	lsrs	r3, r3, #24
 8006dce:	f003 030f 	and.w	r3, r3, #15
 8006dd2:	4a5b      	ldr	r2, [pc, #364]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dd8:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006dda:	f000 bfbd 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8006dde:	2300      	movs	r3, #0
 8006de0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006de2:	f000 bfb9 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 8006de6:	2300      	movs	r3, #0
 8006de8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006dea:	f000 bfb5 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006df4:	d108      	bne.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006df6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7ff f9ca 	bl	8006194 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e02:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e04:	f000 bfa8 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e0c:	f000 bfa4 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006e10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e14:	1e51      	subs	r1, r2, #1
 8006e16:	430b      	orrs	r3, r1
 8006e18:	d136      	bne.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006e1a:	4b47      	ldr	r3, [pc, #284]	@ (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e20:	f003 0303 	and.w	r3, r3, #3
 8006e24:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d104      	bne.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006e2c:	f7fe fb44 	bl	80054b8 <HAL_RCC_GetPCLK2Freq>
 8006e30:	6378      	str	r0, [r7, #52]	@ 0x34
 8006e32:	f000 bf91 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d104      	bne.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006e3c:	f7fe fa0c 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 8006e40:	6378      	str	r0, [r7, #52]	@ 0x34
 8006e42:	f000 bf89 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006e46:	4b3c      	ldr	r3, [pc, #240]	@ (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e52:	d106      	bne.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8006e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e56:	2b02      	cmp	r3, #2
 8006e58:	d103      	bne.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8006e5a:	4b3a      	ldr	r3, [pc, #232]	@ (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006e5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e5e:	f000 bf7b 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006e62:	4b35      	ldr	r3, [pc, #212]	@ (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006e64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e68:	f003 0302 	and.w	r3, r3, #2
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	d107      	bne.n	8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e72:	2b03      	cmp	r3, #3
 8006e74:	d104      	bne.n	8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8006e76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e7c:	f000 bf6c 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006e80:	2300      	movs	r3, #0
 8006e82:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e84:	f000 bf68 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006e88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e8c:	1e91      	subs	r1, r2, #2
 8006e8e:	430b      	orrs	r3, r1
 8006e90:	d136      	bne.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006e92:	4b29      	ldr	r3, [pc, #164]	@ (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e98:	f003 030c 	and.w	r3, r3, #12
 8006e9c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d104      	bne.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006ea4:	f7fe faf4 	bl	8005490 <HAL_RCC_GetPCLK1Freq>
 8006ea8:	6378      	str	r0, [r7, #52]	@ 0x34
 8006eaa:	f000 bf55 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb0:	2b04      	cmp	r3, #4
 8006eb2:	d104      	bne.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006eb4:	f7fe f9d0 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 8006eb8:	6378      	str	r0, [r7, #52]	@ 0x34
 8006eba:	f000 bf4d 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006ebe:	4b1e      	ldr	r3, [pc, #120]	@ (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ec6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eca:	d106      	bne.n	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ece:	2b08      	cmp	r3, #8
 8006ed0:	d103      	bne.n	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8006ed2:	4b1c      	ldr	r3, [pc, #112]	@ (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006ed4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ed6:	f000 bf3f 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006eda:	4b17      	ldr	r3, [pc, #92]	@ (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006edc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ee0:	f003 0302 	and.w	r3, r3, #2
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d107      	bne.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eea:	2b0c      	cmp	r3, #12
 8006eec:	d104      	bne.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8006eee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ef2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ef4:	f000 bf30 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006efc:	f000 bf2c 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006f00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f04:	1f11      	subs	r1, r2, #4
 8006f06:	430b      	orrs	r3, r1
 8006f08:	d13f      	bne.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f10:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006f14:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d104      	bne.n	8006f26 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006f1c:	f7fe fab8 	bl	8005490 <HAL_RCC_GetPCLK1Freq>
 8006f20:	6378      	str	r0, [r7, #52]	@ 0x34
 8006f22:	f000 bf19 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f28:	2b10      	cmp	r3, #16
 8006f2a:	d10d      	bne.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006f2c:	f7fe f994 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 8006f30:	6378      	str	r0, [r7, #52]	@ 0x34
 8006f32:	f000 bf11 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006f36:	bf00      	nop
 8006f38:	46020c00 	.word	0x46020c00
 8006f3c:	02dc6c00 	.word	0x02dc6c00
 8006f40:	0800a5a4 	.word	0x0800a5a4
 8006f44:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006f48:	4ba6      	ldr	r3, [pc, #664]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f54:	d106      	bne.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8006f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f58:	2b20      	cmp	r3, #32
 8006f5a:	d103      	bne.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8006f5c:	4ba2      	ldr	r3, [pc, #648]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006f5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f60:	f000 befa 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006f64:	4b9f      	ldr	r3, [pc, #636]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006f66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f6a:	f003 0302 	and.w	r3, r3, #2
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d107      	bne.n	8006f82 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8006f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f74:	2b30      	cmp	r3, #48	@ 0x30
 8006f76:	d104      	bne.n	8006f82 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8006f78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f7e:	f000 beeb 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006f82:	2300      	movs	r3, #0
 8006f84:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f86:	f000 bee7 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006f8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f8e:	f1a2 0108 	sub.w	r1, r2, #8
 8006f92:	430b      	orrs	r3, r1
 8006f94:	d136      	bne.n	8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006f96:	4b93      	ldr	r3, [pc, #588]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f9c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006fa0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d104      	bne.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006fa8:	f7fe fa72 	bl	8005490 <HAL_RCC_GetPCLK1Freq>
 8006fac:	6378      	str	r0, [r7, #52]	@ 0x34
 8006fae:	f000 bed3 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb4:	2b40      	cmp	r3, #64	@ 0x40
 8006fb6:	d104      	bne.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006fb8:	f7fe f94e 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 8006fbc:	6378      	str	r0, [r7, #52]	@ 0x34
 8006fbe:	f000 becb 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006fc2:	4b88      	ldr	r3, [pc, #544]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fce:	d106      	bne.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8006fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd2:	2b80      	cmp	r3, #128	@ 0x80
 8006fd4:	d103      	bne.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8006fd6:	4b84      	ldr	r3, [pc, #528]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006fd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fda:	f000 bebd 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006fde:	4b81      	ldr	r3, [pc, #516]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006fe0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006fe4:	f003 0302 	and.w	r3, r3, #2
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d107      	bne.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fee:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ff0:	d104      	bne.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8006ff2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ff6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ff8:	f000 beae 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007000:	f000 beaa 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8007004:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007008:	f1a2 0110 	sub.w	r1, r2, #16
 800700c:	430b      	orrs	r3, r1
 800700e:	d139      	bne.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007010:	4b74      	ldr	r3, [pc, #464]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007016:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800701a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800701c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701e:	2b00      	cmp	r3, #0
 8007020:	d104      	bne.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007022:	f7fe fa35 	bl	8005490 <HAL_RCC_GetPCLK1Freq>
 8007026:	6378      	str	r0, [r7, #52]	@ 0x34
 8007028:	f000 be96 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800702c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800702e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007032:	d104      	bne.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007034:	f7fe f910 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 8007038:	6378      	str	r0, [r7, #52]	@ 0x34
 800703a:	f000 be8d 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800703e:	4b69      	ldr	r3, [pc, #420]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007046:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800704a:	d107      	bne.n	800705c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800704c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007052:	d103      	bne.n	800705c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8007054:	4b64      	ldr	r3, [pc, #400]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007056:	637b      	str	r3, [r7, #52]	@ 0x34
 8007058:	f000 be7e 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800705c:	4b61      	ldr	r3, [pc, #388]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800705e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007062:	f003 0302 	and.w	r3, r3, #2
 8007066:	2b02      	cmp	r3, #2
 8007068:	d108      	bne.n	800707c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800706a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007070:	d104      	bne.n	800707c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8007072:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007076:	637b      	str	r3, [r7, #52]	@ 0x34
 8007078:	f000 be6e 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800707c:	2300      	movs	r3, #0
 800707e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007080:	f000 be6a 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007084:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007088:	f1a2 0120 	sub.w	r1, r2, #32
 800708c:	430b      	orrs	r3, r1
 800708e:	d158      	bne.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007090:	4b54      	ldr	r3, [pc, #336]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007092:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007096:	f003 0307 	and.w	r3, r3, #7
 800709a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800709c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d104      	bne.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80070a2:	f7fe fa1d 	bl	80054e0 <HAL_RCC_GetPCLK3Freq>
 80070a6:	6378      	str	r0, [r7, #52]	@ 0x34
 80070a8:	f000 be56 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80070ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d104      	bne.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80070b2:	f7fe f8d1 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 80070b6:	6378      	str	r0, [r7, #52]	@ 0x34
 80070b8:	f000 be4e 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80070bc:	4b49      	ldr	r3, [pc, #292]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070c8:	d106      	bne.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 80070ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d103      	bne.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 80070d0:	4b45      	ldr	r3, [pc, #276]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80070d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80070d4:	f000 be40 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80070d8:	4b42      	ldr	r3, [pc, #264]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80070da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070de:	f003 0302 	and.w	r3, r3, #2
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	d107      	bne.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80070e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e8:	2b03      	cmp	r3, #3
 80070ea:	d104      	bne.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 80070ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80070f2:	f000 be31 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80070f6:	4b3b      	ldr	r3, [pc, #236]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0320 	and.w	r3, r3, #32
 80070fe:	2b20      	cmp	r3, #32
 8007100:	d11b      	bne.n	800713a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8007102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007104:	2b04      	cmp	r3, #4
 8007106:	d118      	bne.n	800713a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007108:	4b36      	ldr	r3, [pc, #216]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007110:	2b00      	cmp	r3, #0
 8007112:	d005      	beq.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8007114:	4b33      	ldr	r3, [pc, #204]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	0e1b      	lsrs	r3, r3, #24
 800711a:	f003 030f 	and.w	r3, r3, #15
 800711e:	e006      	b.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 8007120:	4b30      	ldr	r3, [pc, #192]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007122:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007126:	041b      	lsls	r3, r3, #16
 8007128:	0e1b      	lsrs	r3, r3, #24
 800712a:	f003 030f 	and.w	r3, r3, #15
 800712e:	4a2f      	ldr	r2, [pc, #188]	@ (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007134:	637b      	str	r3, [r7, #52]	@ 0x34
 8007136:	f000 be0f 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800713a:	2300      	movs	r3, #0
 800713c:	637b      	str	r3, [r7, #52]	@ 0x34
 800713e:	f000 be0b 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8007142:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007146:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800714a:	430b      	orrs	r3, r1
 800714c:	d172      	bne.n	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800714e:	4b25      	ldr	r3, [pc, #148]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007150:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007154:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007158:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800715a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800715c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007160:	d104      	bne.n	800716c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007162:	f7fe f879 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 8007166:	6378      	str	r0, [r7, #52]	@ 0x34
 8007168:	f000 bdf6 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800716c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800716e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007172:	d108      	bne.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007174:	f107 0318 	add.w	r3, r7, #24
 8007178:	4618      	mov	r0, r3
 800717a:	f7ff f965 	bl	8006448 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800717e:	6a3b      	ldr	r3, [r7, #32]
 8007180:	637b      	str	r3, [r7, #52]	@ 0x34
 8007182:	f000 bde9 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007188:	2b00      	cmp	r3, #0
 800718a:	d104      	bne.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800718c:	f7fe f966 	bl	800545c <HAL_RCC_GetHCLKFreq>
 8007190:	6378      	str	r0, [r7, #52]	@ 0x34
 8007192:	f000 bde1 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8007196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007198:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800719c:	d128      	bne.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800719e:	4b11      	ldr	r3, [pc, #68]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0320 	and.w	r3, r3, #32
 80071a6:	2b20      	cmp	r3, #32
 80071a8:	d118      	bne.n	80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80071aa:	4b0e      	ldr	r3, [pc, #56]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d005      	beq.n	80071c2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80071b6:	4b0b      	ldr	r3, [pc, #44]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	0e1b      	lsrs	r3, r3, #24
 80071bc:	f003 030f 	and.w	r3, r3, #15
 80071c0:	e006      	b.n	80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80071c2:	4b08      	ldr	r3, [pc, #32]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80071c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80071c8:	041b      	lsls	r3, r3, #16
 80071ca:	0e1b      	lsrs	r3, r3, #24
 80071cc:	f003 030f 	and.w	r3, r3, #15
 80071d0:	4a06      	ldr	r2, [pc, #24]	@ (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80071d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80071d8:	f000 bdbe 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80071dc:	2300      	movs	r3, #0
 80071de:	637b      	str	r3, [r7, #52]	@ 0x34
 80071e0:	f000 bdba 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80071e4:	46020c00 	.word	0x46020c00
 80071e8:	00f42400 	.word	0x00f42400
 80071ec:	0800a5a4 	.word	0x0800a5a4
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80071f0:	4baf      	ldr	r3, [pc, #700]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071fc:	d107      	bne.n	800720e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 80071fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007200:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007204:	d103      	bne.n	800720e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 8007206:	4bab      	ldr	r3, [pc, #684]	@ (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8007208:	637b      	str	r3, [r7, #52]	@ 0x34
 800720a:	f000 bda5 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800720e:	4ba8      	ldr	r3, [pc, #672]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800721a:	d107      	bne.n	800722c <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 800721c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800721e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007222:	d103      	bne.n	800722c <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 8007224:	4ba3      	ldr	r3, [pc, #652]	@ (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8007226:	637b      	str	r3, [r7, #52]	@ 0x34
 8007228:	f000 bd96 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800722c:	2300      	movs	r3, #0
 800722e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007230:	f000 bd92 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007234:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007238:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800723c:	430b      	orrs	r3, r1
 800723e:	d158      	bne.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007240:	4b9b      	ldr	r3, [pc, #620]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007242:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007246:	f003 0307 	and.w	r3, r3, #7
 800724a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800724c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800724e:	2b04      	cmp	r3, #4
 8007250:	d84b      	bhi.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 8007252:	a201      	add	r2, pc, #4	@ (adr r2, 8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8007254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007258:	08007291 	.word	0x08007291
 800725c:	0800726d 	.word	0x0800726d
 8007260:	0800727f 	.word	0x0800727f
 8007264:	0800729b 	.word	0x0800729b
 8007268:	080072a5 	.word	0x080072a5
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800726c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007270:	4618      	mov	r0, r3
 8007272:	f7fe ff8f 	bl	8006194 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007278:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800727a:	f000 bd6d 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800727e:	f107 030c 	add.w	r3, r7, #12
 8007282:	4618      	mov	r0, r3
 8007284:	f7ff fa3a 	bl	80066fc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800728c:	f000 bd64 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007290:	f7fe f8e4 	bl	800545c <HAL_RCC_GetHCLKFreq>
 8007294:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007296:	f000 bd5f 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800729a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800729e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072a0:	f000 bd5a 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80072a4:	4b82      	ldr	r3, [pc, #520]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0320 	and.w	r3, r3, #32
 80072ac:	2b20      	cmp	r3, #32
 80072ae:	d118      	bne.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80072b0:	4b7f      	ldr	r3, [pc, #508]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d005      	beq.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 80072bc:	4b7c      	ldr	r3, [pc, #496]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	0e1b      	lsrs	r3, r3, #24
 80072c2:	f003 030f 	and.w	r3, r3, #15
 80072c6:	e006      	b.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 80072c8:	4b79      	ldr	r3, [pc, #484]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80072ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80072ce:	041b      	lsls	r3, r3, #16
 80072d0:	0e1b      	lsrs	r3, r3, #24
 80072d2:	f003 030f 	and.w	r3, r3, #15
 80072d6:	4a78      	ldr	r2, [pc, #480]	@ (80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80072d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072dc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80072de:	f000 bd3b 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80072e2:	2300      	movs	r3, #0
 80072e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072e6:	f000 bd37 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80072ea:	2300      	movs	r3, #0
 80072ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072ee:	f000 bd33 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80072f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072f6:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80072fa:	430b      	orrs	r3, r1
 80072fc:	d167      	bne.n	80073ce <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80072fe:	4b6c      	ldr	r3, [pc, #432]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007300:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007304:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007308:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800730a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007310:	d036      	beq.n	8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8007312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007314:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007318:	d855      	bhi.n	80073c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800731a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800731c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007320:	d029      	beq.n	8007376 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 8007322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007324:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007328:	d84d      	bhi.n	80073c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800732a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007330:	d013      	beq.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8007332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007334:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007338:	d845      	bhi.n	80073c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800733a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800733c:	2b00      	cmp	r3, #0
 800733e:	d015      	beq.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8007340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007342:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007346:	d13e      	bne.n	80073c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007348:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800734c:	4618      	mov	r0, r3
 800734e:	f7fe ff21 	bl	8006194 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007354:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007356:	f000 bcff 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800735a:	f107 030c 	add.w	r3, r7, #12
 800735e:	4618      	mov	r0, r3
 8007360:	f7ff f9cc 	bl	80066fc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007368:	f000 bcf6 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800736c:	f7fe f876 	bl	800545c <HAL_RCC_GetHCLKFreq>
 8007370:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007372:	f000 bcf1 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007376:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800737a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800737c:	f000 bcec 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007380:	4b4b      	ldr	r3, [pc, #300]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0320 	and.w	r3, r3, #32
 8007388:	2b20      	cmp	r3, #32
 800738a:	d118      	bne.n	80073be <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800738c:	4b48      	ldr	r3, [pc, #288]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007394:	2b00      	cmp	r3, #0
 8007396:	d005      	beq.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 8007398:	4b45      	ldr	r3, [pc, #276]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	0e1b      	lsrs	r3, r3, #24
 800739e:	f003 030f 	and.w	r3, r3, #15
 80073a2:	e006      	b.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80073a4:	4b42      	ldr	r3, [pc, #264]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80073a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80073aa:	041b      	lsls	r3, r3, #16
 80073ac:	0e1b      	lsrs	r3, r3, #24
 80073ae:	f003 030f 	and.w	r3, r3, #15
 80073b2:	4a41      	ldr	r2, [pc, #260]	@ (80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80073b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073b8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80073ba:	f000 bccd 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80073be:	2300      	movs	r3, #0
 80073c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073c2:	f000 bcc9 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80073c6:	2300      	movs	r3, #0
 80073c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073ca:	f000 bcc5 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80073ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073d2:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80073d6:	430b      	orrs	r3, r1
 80073d8:	d14c      	bne.n	8007474 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80073da:	4b35      	ldr	r3, [pc, #212]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80073dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80073e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80073e4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80073e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d104      	bne.n	80073f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80073ec:	f7fe f850 	bl	8005490 <HAL_RCC_GetPCLK1Freq>
 80073f0:	6378      	str	r0, [r7, #52]	@ 0x34
 80073f2:	f000 bcb1 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80073f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073fc:	d104      	bne.n	8007408 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80073fe:	f7fd ff2b 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 8007402:	6378      	str	r0, [r7, #52]	@ 0x34
 8007404:	f000 bca8 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007408:	4b29      	ldr	r3, [pc, #164]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007410:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007414:	d107      	bne.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8007416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007418:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800741c:	d103      	bne.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 800741e:	4b25      	ldr	r3, [pc, #148]	@ (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8007420:	637b      	str	r3, [r7, #52]	@ 0x34
 8007422:	f000 bc99 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8007426:	4b22      	ldr	r3, [pc, #136]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 0320 	and.w	r3, r3, #32
 800742e:	2b20      	cmp	r3, #32
 8007430:	d11c      	bne.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 8007432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007434:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007438:	d118      	bne.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800743a:	4b1d      	ldr	r3, [pc, #116]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007442:	2b00      	cmp	r3, #0
 8007444:	d005      	beq.n	8007452 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8007446:	4b1a      	ldr	r3, [pc, #104]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	0e1b      	lsrs	r3, r3, #24
 800744c:	f003 030f 	and.w	r3, r3, #15
 8007450:	e006      	b.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 8007452:	4b17      	ldr	r3, [pc, #92]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007454:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007458:	041b      	lsls	r3, r3, #16
 800745a:	0e1b      	lsrs	r3, r3, #24
 800745c:	f003 030f 	and.w	r3, r3, #15
 8007460:	4a15      	ldr	r2, [pc, #84]	@ (80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8007462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007466:	637b      	str	r3, [r7, #52]	@ 0x34
 8007468:	f000 bc76 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800746c:	2300      	movs	r3, #0
 800746e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007470:	f000 bc72 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8007474:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007478:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800747c:	430b      	orrs	r3, r1
 800747e:	d153      	bne.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007480:	4b0b      	ldr	r3, [pc, #44]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007486:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800748a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800748c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748e:	2b00      	cmp	r3, #0
 8007490:	d104      	bne.n	800749c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007492:	f7fd fffd 	bl	8005490 <HAL_RCC_GetPCLK1Freq>
 8007496:	6378      	str	r0, [r7, #52]	@ 0x34
 8007498:	f000 bc5e 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800749c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074a2:	d10b      	bne.n	80074bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80074a4:	f7fd fed8 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 80074a8:	6378      	str	r0, [r7, #52]	@ 0x34
 80074aa:	f000 bc55 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80074ae:	bf00      	nop
 80074b0:	46020c00 	.word	0x46020c00
 80074b4:	00f42400 	.word	0x00f42400
 80074b8:	0800a5a4 	.word	0x0800a5a4
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80074bc:	4ba1      	ldr	r3, [pc, #644]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074c8:	d107      	bne.n	80074da <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 80074ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074d0:	d103      	bne.n	80074da <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 80074d2:	4b9d      	ldr	r3, [pc, #628]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80074d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80074d6:	f000 bc3f 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80074da:	4b9a      	ldr	r3, [pc, #616]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 0320 	and.w	r3, r3, #32
 80074e2:	2b20      	cmp	r3, #32
 80074e4:	d11c      	bne.n	8007520 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 80074e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80074ec:	d118      	bne.n	8007520 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80074ee:	4b95      	ldr	r3, [pc, #596]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d005      	beq.n	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 80074fa:	4b92      	ldr	r3, [pc, #584]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	0e1b      	lsrs	r3, r3, #24
 8007500:	f003 030f 	and.w	r3, r3, #15
 8007504:	e006      	b.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8007506:	4b8f      	ldr	r3, [pc, #572]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007508:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800750c:	041b      	lsls	r3, r3, #16
 800750e:	0e1b      	lsrs	r3, r3, #24
 8007510:	f003 030f 	and.w	r3, r3, #15
 8007514:	4a8d      	ldr	r2, [pc, #564]	@ (800774c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8007516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800751a:	637b      	str	r3, [r7, #52]	@ 0x34
 800751c:	f000 bc1c 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8007520:	2300      	movs	r3, #0
 8007522:	637b      	str	r3, [r7, #52]	@ 0x34
 8007524:	f000 bc18 	b.w	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800752c:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007530:	430b      	orrs	r3, r1
 8007532:	d151      	bne.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007534:	4b83      	ldr	r3, [pc, #524]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007536:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800753a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800753e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007542:	2bc0      	cmp	r3, #192	@ 0xc0
 8007544:	d024      	beq.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 8007546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007548:	2bc0      	cmp	r3, #192	@ 0xc0
 800754a:	d842      	bhi.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800754c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800754e:	2b80      	cmp	r3, #128	@ 0x80
 8007550:	d00d      	beq.n	800756e <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 8007552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007554:	2b80      	cmp	r3, #128	@ 0x80
 8007556:	d83c      	bhi.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8007558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800755a:	2b00      	cmp	r3, #0
 800755c:	d003      	beq.n	8007566 <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 800755e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007560:	2b40      	cmp	r3, #64	@ 0x40
 8007562:	d011      	beq.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8007564:	e035      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8007566:	f7fd ffbb 	bl	80054e0 <HAL_RCC_GetPCLK3Freq>
 800756a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800756c:	e3f4      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800756e:	4b75      	ldr	r3, [pc, #468]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007576:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800757a:	d102      	bne.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 800757c:	4b72      	ldr	r3, [pc, #456]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800757e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007580:	e3ea      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007582:	2300      	movs	r3, #0
 8007584:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007586:	e3e7      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8007588:	f7fd fe66 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 800758c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800758e:	e3e3      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007590:	4b6c      	ldr	r3, [pc, #432]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 0320 	and.w	r3, r3, #32
 8007598:	2b20      	cmp	r3, #32
 800759a:	d117      	bne.n	80075cc <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800759c:	4b69      	ldr	r3, [pc, #420]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d005      	beq.n	80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 80075a8:	4b66      	ldr	r3, [pc, #408]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	0e1b      	lsrs	r3, r3, #24
 80075ae:	f003 030f 	and.w	r3, r3, #15
 80075b2:	e006      	b.n	80075c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80075b4:	4b63      	ldr	r3, [pc, #396]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80075b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80075ba:	041b      	lsls	r3, r3, #16
 80075bc:	0e1b      	lsrs	r3, r3, #24
 80075be:	f003 030f 	and.w	r3, r3, #15
 80075c2:	4a62      	ldr	r2, [pc, #392]	@ (800774c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80075c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075c8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80075ca:	e3c5      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80075cc:	2300      	movs	r3, #0
 80075ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075d0:	e3c2      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 80075d2:	2300      	movs	r3, #0
 80075d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075d6:	e3bf      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80075d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075dc:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 80075e0:	430b      	orrs	r3, r1
 80075e2:	d147      	bne.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80075e4:	4b57      	ldr	r3, [pc, #348]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80075e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80075ea:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80075ee:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80075f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d103      	bne.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80075f6:	f7fd ff4b 	bl	8005490 <HAL_RCC_GetPCLK1Freq>
 80075fa:	6378      	str	r0, [r7, #52]	@ 0x34
 80075fc:	e3ac      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80075fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007600:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007604:	d103      	bne.n	800760e <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007606:	f7fd fe27 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 800760a:	6378      	str	r0, [r7, #52]	@ 0x34
 800760c:	e3a4      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800760e:	4b4d      	ldr	r3, [pc, #308]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007616:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800761a:	d106      	bne.n	800762a <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 800761c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800761e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007622:	d102      	bne.n	800762a <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 8007624:	4b48      	ldr	r3, [pc, #288]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8007626:	637b      	str	r3, [r7, #52]	@ 0x34
 8007628:	e396      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800762a:	4b46      	ldr	r3, [pc, #280]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0320 	and.w	r3, r3, #32
 8007632:	2b20      	cmp	r3, #32
 8007634:	d11b      	bne.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 8007636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007638:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800763c:	d117      	bne.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800763e:	4b41      	ldr	r3, [pc, #260]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d005      	beq.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 800764a:	4b3e      	ldr	r3, [pc, #248]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	0e1b      	lsrs	r3, r3, #24
 8007650:	f003 030f 	and.w	r3, r3, #15
 8007654:	e006      	b.n	8007664 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 8007656:	4b3b      	ldr	r3, [pc, #236]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007658:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800765c:	041b      	lsls	r3, r3, #16
 800765e:	0e1b      	lsrs	r3, r3, #24
 8007660:	f003 030f 	and.w	r3, r3, #15
 8007664:	4a39      	ldr	r2, [pc, #228]	@ (800774c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8007666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800766a:	637b      	str	r3, [r7, #52]	@ 0x34
 800766c:	e374      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800766e:	2300      	movs	r3, #0
 8007670:	637b      	str	r3, [r7, #52]	@ 0x34
 8007672:	e371      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007674:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007678:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800767c:	430b      	orrs	r3, r1
 800767e:	d16a      	bne.n	8007756 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007680:	4b30      	ldr	r3, [pc, #192]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007682:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007686:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800768a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800768c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768e:	2b00      	cmp	r3, #0
 8007690:	d120      	bne.n	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007692:	4b2c      	ldr	r3, [pc, #176]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0320 	and.w	r3, r3, #32
 800769a:	2b20      	cmp	r3, #32
 800769c:	d117      	bne.n	80076ce <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800769e:	4b29      	ldr	r3, [pc, #164]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d005      	beq.n	80076b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 80076aa:	4b26      	ldr	r3, [pc, #152]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	0e1b      	lsrs	r3, r3, #24
 80076b0:	f003 030f 	and.w	r3, r3, #15
 80076b4:	e006      	b.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80076b6:	4b23      	ldr	r3, [pc, #140]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80076b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80076bc:	041b      	lsls	r3, r3, #16
 80076be:	0e1b      	lsrs	r3, r3, #24
 80076c0:	f003 030f 	and.w	r3, r3, #15
 80076c4:	4a21      	ldr	r2, [pc, #132]	@ (800774c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80076c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80076cc:	e344      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80076ce:	2300      	movs	r3, #0
 80076d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80076d2:	e341      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80076d4:	4b1b      	ldr	r3, [pc, #108]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80076d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076e2:	d112      	bne.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80076e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076ea:	d10e      	bne.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80076ec:	4b15      	ldr	r3, [pc, #84]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80076ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076fa:	d102      	bne.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 80076fc:	23fa      	movs	r3, #250	@ 0xfa
 80076fe:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007700:	e32a      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8007702:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007706:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007708:	e326      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800770a:	4b0e      	ldr	r3, [pc, #56]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007712:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007716:	d106      	bne.n	8007726 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 8007718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800771a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800771e:	d102      	bne.n	8007726 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 8007720:	4b09      	ldr	r3, [pc, #36]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8007722:	637b      	str	r3, [r7, #52]	@ 0x34
 8007724:	e318      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8007726:	4b07      	ldr	r3, [pc, #28]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007728:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800772c:	f003 0302 	and.w	r3, r3, #2
 8007730:	2b02      	cmp	r3, #2
 8007732:	d10d      	bne.n	8007750 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 8007734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007736:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800773a:	d109      	bne.n	8007750 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 800773c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007740:	637b      	str	r3, [r7, #52]	@ 0x34
 8007742:	e309      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007744:	46020c00 	.word	0x46020c00
 8007748:	00f42400 	.word	0x00f42400
 800774c:	0800a5a4 	.word	0x0800a5a4
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8007750:	2300      	movs	r3, #0
 8007752:	637b      	str	r3, [r7, #52]	@ 0x34
 8007754:	e300      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8007756:	e9d7 2300 	ldrd	r2, r3, [r7]
 800775a:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800775e:	430b      	orrs	r3, r1
 8007760:	d164      	bne.n	800782c <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007762:	4ba2      	ldr	r3, [pc, #648]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007764:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007768:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800776c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800776e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007770:	2b00      	cmp	r3, #0
 8007772:	d120      	bne.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007774:	4b9d      	ldr	r3, [pc, #628]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0320 	and.w	r3, r3, #32
 800777c:	2b20      	cmp	r3, #32
 800777e:	d117      	bne.n	80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007780:	4b9a      	ldr	r3, [pc, #616]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007788:	2b00      	cmp	r3, #0
 800778a:	d005      	beq.n	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 800778c:	4b97      	ldr	r3, [pc, #604]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	0e1b      	lsrs	r3, r3, #24
 8007792:	f003 030f 	and.w	r3, r3, #15
 8007796:	e006      	b.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 8007798:	4b94      	ldr	r3, [pc, #592]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800779a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800779e:	041b      	lsls	r3, r3, #16
 80077a0:	0e1b      	lsrs	r3, r3, #24
 80077a2:	f003 030f 	and.w	r3, r3, #15
 80077a6:	4a92      	ldr	r2, [pc, #584]	@ (80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 80077a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80077ae:	e2d3      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80077b0:	2300      	movs	r3, #0
 80077b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80077b4:	e2d0      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80077b6:	4b8d      	ldr	r3, [pc, #564]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80077b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80077bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077c4:	d112      	bne.n	80077ec <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 80077c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077cc:	d10e      	bne.n	80077ec <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80077ce:	4b87      	ldr	r3, [pc, #540]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80077d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80077d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077dc:	d102      	bne.n	80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 80077de:	23fa      	movs	r3, #250	@ 0xfa
 80077e0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80077e2:	e2b9      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80077e4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80077e8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80077ea:	e2b5      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80077ec:	4b7f      	ldr	r3, [pc, #508]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077f8:	d106      	bne.n	8007808 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 80077fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007800:	d102      	bne.n	8007808 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 8007802:	4b7c      	ldr	r3, [pc, #496]	@ (80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8007804:	637b      	str	r3, [r7, #52]	@ 0x34
 8007806:	e2a7      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8007808:	4b78      	ldr	r3, [pc, #480]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800780a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800780e:	f003 0302 	and.w	r3, r3, #2
 8007812:	2b02      	cmp	r3, #2
 8007814:	d107      	bne.n	8007826 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 8007816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007818:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800781c:	d103      	bne.n	8007826 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 800781e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007822:	637b      	str	r3, [r7, #52]	@ 0x34
 8007824:	e298      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8007826:	2300      	movs	r3, #0
 8007828:	637b      	str	r3, [r7, #52]	@ 0x34
 800782a:	e295      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800782c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007830:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007834:	430b      	orrs	r3, r1
 8007836:	d147      	bne.n	80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007838:	4b6c      	ldr	r3, [pc, #432]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800783a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800783e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007842:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8007844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007846:	2b00      	cmp	r3, #0
 8007848:	d103      	bne.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800784a:	f7fd fe21 	bl	8005490 <HAL_RCC_GetPCLK1Freq>
 800784e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007850:	e282      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8007852:	4b66      	ldr	r3, [pc, #408]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007854:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007858:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800785c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007860:	d112      	bne.n	8007888 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 8007862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007864:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007868:	d10e      	bne.n	8007888 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800786a:	4b60      	ldr	r3, [pc, #384]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800786c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007870:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007874:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007878:	d102      	bne.n	8007880 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 800787a:	23fa      	movs	r3, #250	@ 0xfa
 800787c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800787e:	e26b      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8007880:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007884:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007886:	e267      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8007888:	4b58      	ldr	r3, [pc, #352]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007890:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007894:	d106      	bne.n	80078a4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8007896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007898:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800789c:	d102      	bne.n	80078a4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 800789e:	4b55      	ldr	r3, [pc, #340]	@ (80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80078a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80078a2:	e259      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80078a4:	4b51      	ldr	r3, [pc, #324]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80078a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078aa:	f003 0302 	and.w	r3, r3, #2
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d107      	bne.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 80078b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80078b8:	d103      	bne.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 80078ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078be:	637b      	str	r3, [r7, #52]	@ 0x34
 80078c0:	e24a      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80078c2:	2300      	movs	r3, #0
 80078c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80078c6:	e247      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80078c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078cc:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80078d0:	430b      	orrs	r3, r1
 80078d2:	d12d      	bne.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80078d4:	4b45      	ldr	r3, [pc, #276]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80078d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80078da:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80078de:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80078e0:	4b42      	ldr	r3, [pc, #264]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078ec:	d105      	bne.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 80078ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d102      	bne.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 80078f4:	4b3f      	ldr	r3, [pc, #252]	@ (80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80078f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80078f8:	e22e      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80078fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007900:	d107      	bne.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007902:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007906:	4618      	mov	r0, r3
 8007908:	f7fe fc44 	bl	8006194 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800790c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800790e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007910:	e222      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8007912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007914:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007918:	d107      	bne.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800791a:	f107 0318 	add.w	r3, r7, #24
 800791e:	4618      	mov	r0, r3
 8007920:	f7fe fd92 	bl	8006448 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	637b      	str	r3, [r7, #52]	@ 0x34
 8007928:	e216      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800792a:	2300      	movs	r3, #0
 800792c:	637b      	str	r3, [r7, #52]	@ 0x34
 800792e:	e213      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8007930:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007934:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8007938:	430b      	orrs	r3, r1
 800793a:	d15d      	bne.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800793c:	4b2b      	ldr	r3, [pc, #172]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800793e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007942:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007946:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800794a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800794e:	d028      	beq.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8007950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007952:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007956:	d845      	bhi.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8007958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800795a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800795e:	d013      	beq.n	8007988 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8007960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007962:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007966:	d83d      	bhi.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8007968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800796a:	2b00      	cmp	r3, #0
 800796c:	d004      	beq.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 800796e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007970:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007974:	d004      	beq.n	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8007976:	e035      	b.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8007978:	f7fd fd9e 	bl	80054b8 <HAL_RCC_GetPCLK2Freq>
 800797c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800797e:	e1eb      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007980:	f7fd fc6a 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 8007984:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007986:	e1e7      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007988:	4b18      	ldr	r3, [pc, #96]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007990:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007994:	d102      	bne.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8007996:	4b17      	ldr	r3, [pc, #92]	@ (80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8007998:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800799a:	e1dd      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800799c:	2300      	movs	r3, #0
 800799e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079a0:	e1da      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80079a2:	4b12      	ldr	r3, [pc, #72]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 0320 	and.w	r3, r3, #32
 80079aa:	2b20      	cmp	r3, #32
 80079ac:	d117      	bne.n	80079de <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80079ae:	4b0f      	ldr	r3, [pc, #60]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d005      	beq.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 80079ba:	4b0c      	ldr	r3, [pc, #48]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	0e1b      	lsrs	r3, r3, #24
 80079c0:	f003 030f 	and.w	r3, r3, #15
 80079c4:	e006      	b.n	80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 80079c6:	4b09      	ldr	r3, [pc, #36]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80079c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80079cc:	041b      	lsls	r3, r3, #16
 80079ce:	0e1b      	lsrs	r3, r3, #24
 80079d0:	f003 030f 	and.w	r3, r3, #15
 80079d4:	4a06      	ldr	r2, [pc, #24]	@ (80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 80079d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079da:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80079dc:	e1bc      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80079de:	2300      	movs	r3, #0
 80079e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079e2:	e1b9      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80079e4:	2300      	movs	r3, #0
 80079e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079e8:	e1b6      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80079ea:	bf00      	nop
 80079ec:	46020c00 	.word	0x46020c00
 80079f0:	0800a5a4 	.word	0x0800a5a4
 80079f4:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80079f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079fc:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8007a00:	430b      	orrs	r3, r1
 8007a02:	d156      	bne.n	8007ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007a04:	4ba5      	ldr	r3, [pc, #660]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a0a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007a0e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a12:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a16:	d028      	beq.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8007a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a1a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a1e:	d845      	bhi.n	8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8007a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a26:	d013      	beq.n	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 8007a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a2e:	d83d      	bhi.n	8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8007a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d004      	beq.n	8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 8007a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a3c:	d004      	beq.n	8007a48 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 8007a3e:	e035      	b.n	8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007a40:	f7fd fd26 	bl	8005490 <HAL_RCC_GetPCLK1Freq>
 8007a44:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007a46:	e187      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007a48:	f7fd fc06 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 8007a4c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007a4e:	e183      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a50:	4b92      	ldr	r3, [pc, #584]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a5c:	d102      	bne.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 8007a5e:	4b90      	ldr	r3, [pc, #576]	@ (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8007a60:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a62:	e179      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007a64:	2300      	movs	r3, #0
 8007a66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a68:	e176      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007a6a:	4b8c      	ldr	r3, [pc, #560]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 0320 	and.w	r3, r3, #32
 8007a72:	2b20      	cmp	r3, #32
 8007a74:	d117      	bne.n	8007aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007a76:	4b89      	ldr	r3, [pc, #548]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d005      	beq.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 8007a82:	4b86      	ldr	r3, [pc, #536]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	0e1b      	lsrs	r3, r3, #24
 8007a88:	f003 030f 	and.w	r3, r3, #15
 8007a8c:	e006      	b.n	8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 8007a8e:	4b83      	ldr	r3, [pc, #524]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007a90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a94:	041b      	lsls	r3, r3, #16
 8007a96:	0e1b      	lsrs	r3, r3, #24
 8007a98:	f003 030f 	and.w	r3, r3, #15
 8007a9c:	4a81      	ldr	r2, [pc, #516]	@ (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8007a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aa2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007aa4:	e158      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007aaa:	e155      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007aac:	2300      	movs	r3, #0
 8007aae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ab0:	e152      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8007ab2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ab6:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8007aba:	430b      	orrs	r3, r1
 8007abc:	d177      	bne.n	8007bae <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007abe:	4b77      	ldr	r3, [pc, #476]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007ac0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ac4:	f003 0318 	and.w	r3, r3, #24
 8007ac8:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007acc:	2b18      	cmp	r3, #24
 8007ace:	d86b      	bhi.n	8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 8007ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8007ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad6:	bf00      	nop
 8007ad8:	08007b3d 	.word	0x08007b3d
 8007adc:	08007ba9 	.word	0x08007ba9
 8007ae0:	08007ba9 	.word	0x08007ba9
 8007ae4:	08007ba9 	.word	0x08007ba9
 8007ae8:	08007ba9 	.word	0x08007ba9
 8007aec:	08007ba9 	.word	0x08007ba9
 8007af0:	08007ba9 	.word	0x08007ba9
 8007af4:	08007ba9 	.word	0x08007ba9
 8007af8:	08007b45 	.word	0x08007b45
 8007afc:	08007ba9 	.word	0x08007ba9
 8007b00:	08007ba9 	.word	0x08007ba9
 8007b04:	08007ba9 	.word	0x08007ba9
 8007b08:	08007ba9 	.word	0x08007ba9
 8007b0c:	08007ba9 	.word	0x08007ba9
 8007b10:	08007ba9 	.word	0x08007ba9
 8007b14:	08007ba9 	.word	0x08007ba9
 8007b18:	08007b4d 	.word	0x08007b4d
 8007b1c:	08007ba9 	.word	0x08007ba9
 8007b20:	08007ba9 	.word	0x08007ba9
 8007b24:	08007ba9 	.word	0x08007ba9
 8007b28:	08007ba9 	.word	0x08007ba9
 8007b2c:	08007ba9 	.word	0x08007ba9
 8007b30:	08007ba9 	.word	0x08007ba9
 8007b34:	08007ba9 	.word	0x08007ba9
 8007b38:	08007b67 	.word	0x08007b67
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8007b3c:	f7fd fcd0 	bl	80054e0 <HAL_RCC_GetPCLK3Freq>
 8007b40:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007b42:	e109      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007b44:	f7fd fb88 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 8007b48:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007b4a:	e105      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b4c:	4b53      	ldr	r3, [pc, #332]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b58:	d102      	bne.n	8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 8007b5a:	4b51      	ldr	r3, [pc, #324]	@ (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8007b5c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007b5e:	e0fb      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007b60:	2300      	movs	r3, #0
 8007b62:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b64:	e0f8      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007b66:	4b4d      	ldr	r3, [pc, #308]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f003 0320 	and.w	r3, r3, #32
 8007b6e:	2b20      	cmp	r3, #32
 8007b70:	d117      	bne.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007b72:	4b4a      	ldr	r3, [pc, #296]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d005      	beq.n	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 8007b7e:	4b47      	ldr	r3, [pc, #284]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	0e1b      	lsrs	r3, r3, #24
 8007b84:	f003 030f 	and.w	r3, r3, #15
 8007b88:	e006      	b.n	8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 8007b8a:	4b44      	ldr	r3, [pc, #272]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007b8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b90:	041b      	lsls	r3, r3, #16
 8007b92:	0e1b      	lsrs	r3, r3, #24
 8007b94:	f003 030f 	and.w	r3, r3, #15
 8007b98:	4a42      	ldr	r2, [pc, #264]	@ (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8007b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b9e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007ba0:	e0da      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ba6:	e0d7      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bac:	e0d4      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8007bae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bb2:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8007bb6:	430b      	orrs	r3, r1
 8007bb8:	d155      	bne.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007bba:	4b38      	ldr	r3, [pc, #224]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007bbc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007bc0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007bc4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007bcc:	d013      	beq.n	8007bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 8007bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007bd4:	d844      	bhi.n	8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007bdc:	d013      	beq.n	8007c06 <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 8007bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007be4:	d83c      	bhi.n	8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8007be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d014      	beq.n	8007c16 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8007bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bf2:	d014      	beq.n	8007c1e <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8007bf4:	e034      	b.n	8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bf6:	f107 0318 	add.w	r3, r7, #24
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7fe fc24 	bl	8006448 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c04:	e0a8      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7fe fac2 	bl	8006194 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c14:	e0a0      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007c16:	f7fd fb1f 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 8007c1a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007c1c:	e09c      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 0320 	and.w	r3, r3, #32
 8007c26:	2b20      	cmp	r3, #32
 8007c28:	d117      	bne.n	8007c5a <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007c2a:	4b1c      	ldr	r3, [pc, #112]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d005      	beq.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 8007c36:	4b19      	ldr	r3, [pc, #100]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	0e1b      	lsrs	r3, r3, #24
 8007c3c:	f003 030f 	and.w	r3, r3, #15
 8007c40:	e006      	b.n	8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8007c42:	4b16      	ldr	r3, [pc, #88]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007c44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007c48:	041b      	lsls	r3, r3, #16
 8007c4a:	0e1b      	lsrs	r3, r3, #24
 8007c4c:	f003 030f 	and.w	r3, r3, #15
 8007c50:	4a14      	ldr	r2, [pc, #80]	@ (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8007c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c56:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007c58:	e07e      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c5e:	e07b      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007c60:	2300      	movs	r3, #0
 8007c62:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c64:	e078      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8007c66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c6a:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8007c6e:	430b      	orrs	r3, r1
 8007c70:	d138      	bne.n	8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8007c72:	4b0a      	ldr	r3, [pc, #40]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007c74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c7c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007c7e:	4b07      	ldr	r3, [pc, #28]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007c80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c84:	f003 0302 	and.w	r3, r3, #2
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d10d      	bne.n	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8007c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10a      	bne.n	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 8007c92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c96:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c98:	e05e      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007c9a:	bf00      	nop
 8007c9c:	46020c00 	.word	0x46020c00
 8007ca0:	00f42400 	.word	0x00f42400
 8007ca4:	0800a5a4 	.word	0x0800a5a4
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007ca8:	4b2e      	ldr	r3, [pc, #184]	@ (8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007caa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cb6:	d112      	bne.n	8007cde <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 8007cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cbe:	d10e      	bne.n	8007cde <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007cc0:	4b28      	ldr	r3, [pc, #160]	@ (8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007cc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007cca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007cce:	d102      	bne.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 8007cd0:	23fa      	movs	r3, #250	@ 0xfa
 8007cd2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007cd4:	e040      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8007cd6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007cda:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007cdc:	e03c      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ce2:	e039      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8007ce4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ce8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007cec:	430b      	orrs	r3, r1
 8007cee:	d131      	bne.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007cf0:	4b1c      	ldr	r3, [pc, #112]	@ (8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007cf2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007cf6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007cfa:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007cfc:	4b19      	ldr	r3, [pc, #100]	@ (8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d08:	d105      	bne.n	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 8007d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d102      	bne.n	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 8007d10:	4b15      	ldr	r3, [pc, #84]	@ (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8007d12:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d14:	e020      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8007d16:	4b13      	ldr	r3, [pc, #76]	@ (8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d22:	d106      	bne.n	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 8007d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d2a:	d102      	bne.n	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 8007d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 8007d2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d30:	e012      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8007d32:	4b0c      	ldr	r3, [pc, #48]	@ (8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d3e:	d106      	bne.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8007d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d46:	d102      	bne.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 8007d48:	4b09      	ldr	r3, [pc, #36]	@ (8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 8007d4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d4c:	e004      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d52:	e001      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8007d54:	2300      	movs	r3, #0
 8007d56:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8007d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3738      	adds	r7, #56	@ 0x38
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	46020c00 	.word	0x46020c00
 8007d68:	02dc6c00 	.word	0x02dc6c00
 8007d6c:	016e3600 	.word	0x016e3600
 8007d70:	00f42400 	.word	0x00f42400

08007d74 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007d7c:	4b47      	ldr	r3, [pc, #284]	@ (8007e9c <RCCEx_PLL2_Config+0x128>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a46      	ldr	r2, [pc, #280]	@ (8007e9c <RCCEx_PLL2_Config+0x128>)
 8007d82:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007d86:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007d88:	f7f9 fdca 	bl	8001920 <HAL_GetTick>
 8007d8c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d8e:	e008      	b.n	8007da2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007d90:	f7f9 fdc6 	bl	8001920 <HAL_GetTick>
 8007d94:	4602      	mov	r2, r0
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	d901      	bls.n	8007da2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007d9e:	2303      	movs	r3, #3
 8007da0:	e077      	b.n	8007e92 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007da2:	4b3e      	ldr	r3, [pc, #248]	@ (8007e9c <RCCEx_PLL2_Config+0x128>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d1f0      	bne.n	8007d90 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007dae:	4b3b      	ldr	r3, [pc, #236]	@ (8007e9c <RCCEx_PLL2_Config+0x128>)
 8007db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007db2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007db6:	f023 0303 	bic.w	r3, r3, #3
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	6811      	ldr	r1, [r2, #0]
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	6852      	ldr	r2, [r2, #4]
 8007dc2:	3a01      	subs	r2, #1
 8007dc4:	0212      	lsls	r2, r2, #8
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	4934      	ldr	r1, [pc, #208]	@ (8007e9c <RCCEx_PLL2_Config+0x128>)
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007dce:	4b33      	ldr	r3, [pc, #204]	@ (8007e9c <RCCEx_PLL2_Config+0x128>)
 8007dd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007dd2:	4b33      	ldr	r3, [pc, #204]	@ (8007ea0 <RCCEx_PLL2_Config+0x12c>)
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	6892      	ldr	r2, [r2, #8]
 8007dda:	3a01      	subs	r2, #1
 8007ddc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	68d2      	ldr	r2, [r2, #12]
 8007de4:	3a01      	subs	r2, #1
 8007de6:	0252      	lsls	r2, r2, #9
 8007de8:	b292      	uxth	r2, r2
 8007dea:	4311      	orrs	r1, r2
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	6912      	ldr	r2, [r2, #16]
 8007df0:	3a01      	subs	r2, #1
 8007df2:	0412      	lsls	r2, r2, #16
 8007df4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007df8:	4311      	orrs	r1, r2
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	6952      	ldr	r2, [r2, #20]
 8007dfe:	3a01      	subs	r2, #1
 8007e00:	0612      	lsls	r2, r2, #24
 8007e02:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007e06:	430a      	orrs	r2, r1
 8007e08:	4924      	ldr	r1, [pc, #144]	@ (8007e9c <RCCEx_PLL2_Config+0x128>)
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007e0e:	4b23      	ldr	r3, [pc, #140]	@ (8007e9c <RCCEx_PLL2_Config+0x128>)
 8007e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e12:	f023 020c 	bic.w	r2, r3, #12
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	699b      	ldr	r3, [r3, #24]
 8007e1a:	4920      	ldr	r1, [pc, #128]	@ (8007e9c <RCCEx_PLL2_Config+0x128>)
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007e20:	4b1e      	ldr	r3, [pc, #120]	@ (8007e9c <RCCEx_PLL2_Config+0x128>)
 8007e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6a1b      	ldr	r3, [r3, #32]
 8007e28:	491c      	ldr	r1, [pc, #112]	@ (8007e9c <RCCEx_PLL2_Config+0x128>)
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007e2e:	4b1b      	ldr	r3, [pc, #108]	@ (8007e9c <RCCEx_PLL2_Config+0x128>)
 8007e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e32:	4a1a      	ldr	r2, [pc, #104]	@ (8007e9c <RCCEx_PLL2_Config+0x128>)
 8007e34:	f023 0310 	bic.w	r3, r3, #16
 8007e38:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007e3a:	4b18      	ldr	r3, [pc, #96]	@ (8007e9c <RCCEx_PLL2_Config+0x128>)
 8007e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e42:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	69d2      	ldr	r2, [r2, #28]
 8007e4a:	00d2      	lsls	r2, r2, #3
 8007e4c:	4913      	ldr	r1, [pc, #76]	@ (8007e9c <RCCEx_PLL2_Config+0x128>)
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007e52:	4b12      	ldr	r3, [pc, #72]	@ (8007e9c <RCCEx_PLL2_Config+0x128>)
 8007e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e56:	4a11      	ldr	r2, [pc, #68]	@ (8007e9c <RCCEx_PLL2_Config+0x128>)
 8007e58:	f043 0310 	orr.w	r3, r3, #16
 8007e5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8007e9c <RCCEx_PLL2_Config+0x128>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a0e      	ldr	r2, [pc, #56]	@ (8007e9c <RCCEx_PLL2_Config+0x128>)
 8007e64:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007e68:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007e6a:	f7f9 fd59 	bl	8001920 <HAL_GetTick>
 8007e6e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e70:	e008      	b.n	8007e84 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007e72:	f7f9 fd55 	bl	8001920 <HAL_GetTick>
 8007e76:	4602      	mov	r2, r0
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	1ad3      	subs	r3, r2, r3
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	d901      	bls.n	8007e84 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007e80:	2303      	movs	r3, #3
 8007e82:	e006      	b.n	8007e92 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e84:	4b05      	ldr	r3, [pc, #20]	@ (8007e9c <RCCEx_PLL2_Config+0x128>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d0f0      	beq.n	8007e72 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007e90:	2300      	movs	r3, #0

}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3710      	adds	r7, #16
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	46020c00 	.word	0x46020c00
 8007ea0:	80800000 	.word	0x80800000

08007ea4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007eac:	4b47      	ldr	r3, [pc, #284]	@ (8007fcc <RCCEx_PLL3_Config+0x128>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a46      	ldr	r2, [pc, #280]	@ (8007fcc <RCCEx_PLL3_Config+0x128>)
 8007eb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007eb6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007eb8:	f7f9 fd32 	bl	8001920 <HAL_GetTick>
 8007ebc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ebe:	e008      	b.n	8007ed2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007ec0:	f7f9 fd2e 	bl	8001920 <HAL_GetTick>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d901      	bls.n	8007ed2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e077      	b.n	8007fc2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ed2:	4b3e      	ldr	r3, [pc, #248]	@ (8007fcc <RCCEx_PLL3_Config+0x128>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d1f0      	bne.n	8007ec0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007ede:	4b3b      	ldr	r3, [pc, #236]	@ (8007fcc <RCCEx_PLL3_Config+0x128>)
 8007ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ee2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007ee6:	f023 0303 	bic.w	r3, r3, #3
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	6811      	ldr	r1, [r2, #0]
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	6852      	ldr	r2, [r2, #4]
 8007ef2:	3a01      	subs	r2, #1
 8007ef4:	0212      	lsls	r2, r2, #8
 8007ef6:	430a      	orrs	r2, r1
 8007ef8:	4934      	ldr	r1, [pc, #208]	@ (8007fcc <RCCEx_PLL3_Config+0x128>)
 8007efa:	4313      	orrs	r3, r2
 8007efc:	630b      	str	r3, [r1, #48]	@ 0x30
 8007efe:	4b33      	ldr	r3, [pc, #204]	@ (8007fcc <RCCEx_PLL3_Config+0x128>)
 8007f00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f02:	4b33      	ldr	r3, [pc, #204]	@ (8007fd0 <RCCEx_PLL3_Config+0x12c>)
 8007f04:	4013      	ands	r3, r2
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	6892      	ldr	r2, [r2, #8]
 8007f0a:	3a01      	subs	r2, #1
 8007f0c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	68d2      	ldr	r2, [r2, #12]
 8007f14:	3a01      	subs	r2, #1
 8007f16:	0252      	lsls	r2, r2, #9
 8007f18:	b292      	uxth	r2, r2
 8007f1a:	4311      	orrs	r1, r2
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	6912      	ldr	r2, [r2, #16]
 8007f20:	3a01      	subs	r2, #1
 8007f22:	0412      	lsls	r2, r2, #16
 8007f24:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007f28:	4311      	orrs	r1, r2
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	6952      	ldr	r2, [r2, #20]
 8007f2e:	3a01      	subs	r2, #1
 8007f30:	0612      	lsls	r2, r2, #24
 8007f32:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007f36:	430a      	orrs	r2, r1
 8007f38:	4924      	ldr	r1, [pc, #144]	@ (8007fcc <RCCEx_PLL3_Config+0x128>)
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007f3e:	4b23      	ldr	r3, [pc, #140]	@ (8007fcc <RCCEx_PLL3_Config+0x128>)
 8007f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f42:	f023 020c 	bic.w	r2, r3, #12
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	699b      	ldr	r3, [r3, #24]
 8007f4a:	4920      	ldr	r1, [pc, #128]	@ (8007fcc <RCCEx_PLL3_Config+0x128>)
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007f50:	4b1e      	ldr	r3, [pc, #120]	@ (8007fcc <RCCEx_PLL3_Config+0x128>)
 8007f52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6a1b      	ldr	r3, [r3, #32]
 8007f58:	491c      	ldr	r1, [pc, #112]	@ (8007fcc <RCCEx_PLL3_Config+0x128>)
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007f5e:	4b1b      	ldr	r3, [pc, #108]	@ (8007fcc <RCCEx_PLL3_Config+0x128>)
 8007f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f62:	4a1a      	ldr	r2, [pc, #104]	@ (8007fcc <RCCEx_PLL3_Config+0x128>)
 8007f64:	f023 0310 	bic.w	r3, r3, #16
 8007f68:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007f6a:	4b18      	ldr	r3, [pc, #96]	@ (8007fcc <RCCEx_PLL3_Config+0x128>)
 8007f6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f72:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	69d2      	ldr	r2, [r2, #28]
 8007f7a:	00d2      	lsls	r2, r2, #3
 8007f7c:	4913      	ldr	r1, [pc, #76]	@ (8007fcc <RCCEx_PLL3_Config+0x128>)
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007f82:	4b12      	ldr	r3, [pc, #72]	@ (8007fcc <RCCEx_PLL3_Config+0x128>)
 8007f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f86:	4a11      	ldr	r2, [pc, #68]	@ (8007fcc <RCCEx_PLL3_Config+0x128>)
 8007f88:	f043 0310 	orr.w	r3, r3, #16
 8007f8c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8007fcc <RCCEx_PLL3_Config+0x128>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a0e      	ldr	r2, [pc, #56]	@ (8007fcc <RCCEx_PLL3_Config+0x128>)
 8007f94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f98:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007f9a:	f7f9 fcc1 	bl	8001920 <HAL_GetTick>
 8007f9e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007fa0:	e008      	b.n	8007fb4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007fa2:	f7f9 fcbd 	bl	8001920 <HAL_GetTick>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	1ad3      	subs	r3, r2, r3
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	d901      	bls.n	8007fb4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e006      	b.n	8007fc2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007fb4:	4b05      	ldr	r3, [pc, #20]	@ (8007fcc <RCCEx_PLL3_Config+0x128>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d0f0      	beq.n	8007fa2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	46020c00 	.word	0x46020c00
 8007fd0:	80800000 	.word	0x80800000

08007fd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d101      	bne.n	8007fe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e042      	b.n	800806c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d106      	bne.n	8007ffe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f7f9 f987 	bl	800130c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2224      	movs	r2, #36	@ 0x24
 8008002:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f022 0201 	bic.w	r2, r2, #1
 8008014:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800801a:	2b00      	cmp	r3, #0
 800801c:	d002      	beq.n	8008024 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 fcca 	bl	80089b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 fb25 	bl	8008674 <UART_SetConfig>
 800802a:	4603      	mov	r3, r0
 800802c:	2b01      	cmp	r3, #1
 800802e:	d101      	bne.n	8008034 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	e01b      	b.n	800806c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	685a      	ldr	r2, [r3, #4]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008042:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	689a      	ldr	r2, [r3, #8]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008052:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f042 0201 	orr.w	r2, r2, #1
 8008062:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 fd49 	bl	8008afc <UART_CheckIdleState>
 800806a:	4603      	mov	r3, r0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3708      	adds	r7, #8
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b0ae      	sub	sp, #184	@ 0xb8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	69db      	ldr	r3, [r3, #28]
 8008082:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800809a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800809e:	f640 030f 	movw	r3, #2063	@ 0x80f
 80080a2:	4013      	ands	r3, r2
 80080a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 80080a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d11b      	bne.n	80080e8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80080b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80080b4:	f003 0320 	and.w	r3, r3, #32
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d015      	beq.n	80080e8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80080bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80080c0:	f003 0320 	and.w	r3, r3, #32
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d105      	bne.n	80080d4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80080c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d009      	beq.n	80080e8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f000 8297 	beq.w	800860c <HAL_UART_IRQHandler+0x598>
      {
        huart->RxISR(huart);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	4798      	blx	r3
      }
      return;
 80080e6:	e291      	b.n	800860c <HAL_UART_IRQHandler+0x598>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80080e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f000 80fd 	beq.w	80082ec <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80080f2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80080f6:	4b7a      	ldr	r3, [pc, #488]	@ (80082e0 <HAL_UART_IRQHandler+0x26c>)
 80080f8:	4013      	ands	r3, r2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d106      	bne.n	800810c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80080fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008102:	4b78      	ldr	r3, [pc, #480]	@ (80082e4 <HAL_UART_IRQHandler+0x270>)
 8008104:	4013      	ands	r3, r2
 8008106:	2b00      	cmp	r3, #0
 8008108:	f000 80f0 	beq.w	80082ec <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800810c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008110:	f003 0301 	and.w	r3, r3, #1
 8008114:	2b00      	cmp	r3, #0
 8008116:	d011      	beq.n	800813c <HAL_UART_IRQHandler+0xc8>
 8008118:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800811c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00b      	beq.n	800813c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2201      	movs	r2, #1
 800812a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008132:	f043 0201 	orr.w	r2, r3, #1
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800813c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008140:	f003 0302 	and.w	r3, r3, #2
 8008144:	2b00      	cmp	r3, #0
 8008146:	d011      	beq.n	800816c <HAL_UART_IRQHandler+0xf8>
 8008148:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800814c:	f003 0301 	and.w	r3, r3, #1
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00b      	beq.n	800816c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2202      	movs	r2, #2
 800815a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008162:	f043 0204 	orr.w	r2, r3, #4
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800816c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008170:	f003 0304 	and.w	r3, r3, #4
 8008174:	2b00      	cmp	r3, #0
 8008176:	d011      	beq.n	800819c <HAL_UART_IRQHandler+0x128>
 8008178:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800817c:	f003 0301 	and.w	r3, r3, #1
 8008180:	2b00      	cmp	r3, #0
 8008182:	d00b      	beq.n	800819c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2204      	movs	r2, #4
 800818a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008192:	f043 0202 	orr.w	r2, r3, #2
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800819c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80081a0:	f003 0308 	and.w	r3, r3, #8
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d017      	beq.n	80081d8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80081a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80081ac:	f003 0320 	and.w	r3, r3, #32
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d105      	bne.n	80081c0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80081b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80081b8:	4b49      	ldr	r3, [pc, #292]	@ (80082e0 <HAL_UART_IRQHandler+0x26c>)
 80081ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d00b      	beq.n	80081d8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2208      	movs	r2, #8
 80081c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081ce:	f043 0208 	orr.w	r2, r3, #8
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80081d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80081dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d012      	beq.n	800820a <HAL_UART_IRQHandler+0x196>
 80081e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80081e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00c      	beq.n	800820a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80081f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008200:	f043 0220 	orr.w	r2, r3, #32
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008210:	2b00      	cmp	r3, #0
 8008212:	f000 81fd 	beq.w	8008610 <HAL_UART_IRQHandler+0x59c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008216:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800821a:	f003 0320 	and.w	r3, r3, #32
 800821e:	2b00      	cmp	r3, #0
 8008220:	d013      	beq.n	800824a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008222:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008226:	f003 0320 	and.w	r3, r3, #32
 800822a:	2b00      	cmp	r3, #0
 800822c:	d105      	bne.n	800823a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800822e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008232:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008236:	2b00      	cmp	r3, #0
 8008238:	d007      	beq.n	800824a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800823e:	2b00      	cmp	r3, #0
 8008240:	d003      	beq.n	800824a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008250:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800825e:	2b40      	cmp	r3, #64	@ 0x40
 8008260:	d005      	beq.n	800826e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008262:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008266:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800826a:	2b00      	cmp	r3, #0
 800826c:	d02e      	beq.n	80082cc <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fe95 	bl	8008f9e <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800827e:	2b40      	cmp	r3, #64	@ 0x40
 8008280:	d120      	bne.n	80082c4 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008288:	2b00      	cmp	r3, #0
 800828a:	d017      	beq.n	80082bc <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008292:	4a15      	ldr	r2, [pc, #84]	@ (80082e8 <HAL_UART_IRQHandler+0x274>)
 8008294:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800829c:	4618      	mov	r0, r3
 800829e:	f7fa f90b 	bl	80024b8 <HAL_DMA_Abort_IT>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d019      	beq.n	80082dc <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80082b6:	4610      	mov	r0, r2
 80082b8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082ba:	e00f      	b.n	80082dc <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 f9cf 	bl	8008660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082c2:	e00b      	b.n	80082dc <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 f9cb 	bl	8008660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082ca:	e007      	b.n	80082dc <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 f9c7 	bl	8008660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80082da:	e199      	b.n	8008610 <HAL_UART_IRQHandler+0x59c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082dc:	bf00      	nop
    return;
 80082de:	e197      	b.n	8008610 <HAL_UART_IRQHandler+0x59c>
 80082e0:	10000001 	.word	0x10000001
 80082e4:	04000120 	.word	0x04000120
 80082e8:	0800921b 	.word	0x0800921b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	f040 8142 	bne.w	800857a <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80082f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80082fa:	f003 0310 	and.w	r3, r3, #16
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f000 813b 	beq.w	800857a <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008304:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008308:	f003 0310 	and.w	r3, r3, #16
 800830c:	2b00      	cmp	r3, #0
 800830e:	f000 8134 	beq.w	800857a <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2210      	movs	r2, #16
 8008318:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008324:	2b40      	cmp	r3, #64	@ 0x40
 8008326:	f040 80aa 	bne.w	800847e <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008334:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 8008338:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800833c:	2b00      	cmp	r3, #0
 800833e:	f000 8084 	beq.w	800844a <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008348:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800834c:	429a      	cmp	r2, r3
 800834e:	d27c      	bcs.n	800844a <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8008356:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008360:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008362:	2b81      	cmp	r3, #129	@ 0x81
 8008364:	d060      	beq.n	8008428 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800836e:	e853 3f00 	ldrex	r3, [r3]
 8008372:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008374:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008376:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800837a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	461a      	mov	r2, r3
 8008384:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008388:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800838c:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008390:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008394:	e841 2300 	strex	r3, r2, [r1]
 8008398:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800839a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800839c:	2b00      	cmp	r3, #0
 800839e:	d1e2      	bne.n	8008366 <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	3308      	adds	r3, #8
 80083a6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80083aa:	e853 3f00 	ldrex	r3, [r3]
 80083ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80083b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80083b2:	f023 0301 	bic.w	r3, r3, #1
 80083b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	3308      	adds	r3, #8
 80083c0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80083c4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80083c6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80083ca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80083cc:	e841 2300 	strex	r3, r2, [r1]
 80083d0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80083d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d1e3      	bne.n	80083a0 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2220      	movs	r2, #32
 80083dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083ee:	e853 3f00 	ldrex	r3, [r3]
 80083f2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80083f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083f6:	f023 0310 	bic.w	r3, r3, #16
 80083fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	461a      	mov	r2, r3
 8008404:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008408:	65bb      	str	r3, [r7, #88]	@ 0x58
 800840a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800840e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008410:	e841 2300 	strex	r3, r2, [r1]
 8008414:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008416:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1e4      	bne.n	80083e6 <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008422:	4618      	mov	r0, r3
 8008424:	f7f9 ffcc 	bl	80023c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2202      	movs	r2, #2
 800842c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800843a:	b29b      	uxth	r3, r3
 800843c:	1ad3      	subs	r3, r2, r3
 800843e:	b29b      	uxth	r3, r3
 8008440:	4619      	mov	r1, r3
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f7f8 f9cc 	bl	80007e0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008448:	e0e4      	b.n	8008614 <HAL_UART_IRQHandler+0x5a0>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008450:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8008454:	429a      	cmp	r2, r3
 8008456:	f040 80dd 	bne.w	8008614 <HAL_UART_IRQHandler+0x5a0>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008462:	2b81      	cmp	r3, #129	@ 0x81
 8008464:	f040 80d6 	bne.w	8008614 <HAL_UART_IRQHandler+0x5a0>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2202      	movs	r2, #2
 800846c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008474:	4619      	mov	r1, r3
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f7f8 f9b2 	bl	80007e0 <HAL_UARTEx_RxEventCallback>
      return;
 800847c:	e0ca      	b.n	8008614 <HAL_UART_IRQHandler+0x5a0>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800848a:	b29b      	uxth	r3, r3
 800848c:	1ad3      	subs	r3, r2, r3
 800848e:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008498:	b29b      	uxth	r3, r3
 800849a:	2b00      	cmp	r3, #0
 800849c:	f000 80bc 	beq.w	8008618 <HAL_UART_IRQHandler+0x5a4>
          && (nb_rx_data > 0U))
 80084a0:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f000 80b7 	beq.w	8008618 <HAL_UART_IRQHandler+0x5a4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084b2:	e853 3f00 	ldrex	r3, [r3]
 80084b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80084b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	461a      	mov	r2, r3
 80084c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80084cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80084ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80084d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084d4:	e841 2300 	strex	r3, r2, [r1]
 80084d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80084da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d1e4      	bne.n	80084aa <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	3308      	adds	r3, #8
 80084e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ea:	e853 3f00 	ldrex	r3, [r3]
 80084ee:	623b      	str	r3, [r7, #32]
   return(result);
 80084f0:	6a3b      	ldr	r3, [r7, #32]
 80084f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084f6:	f023 0301 	bic.w	r3, r3, #1
 80084fa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	3308      	adds	r3, #8
 8008504:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008508:	633a      	str	r2, [r7, #48]	@ 0x30
 800850a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800850e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008510:	e841 2300 	strex	r3, r2, [r1]
 8008514:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008518:	2b00      	cmp	r3, #0
 800851a:	d1e1      	bne.n	80084e0 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2220      	movs	r2, #32
 8008520:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	e853 3f00 	ldrex	r3, [r3]
 800853c:	60fb      	str	r3, [r7, #12]
   return(result);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f023 0310 	bic.w	r3, r3, #16
 8008544:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	461a      	mov	r2, r3
 800854e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008552:	61fb      	str	r3, [r7, #28]
 8008554:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008556:	69b9      	ldr	r1, [r7, #24]
 8008558:	69fa      	ldr	r2, [r7, #28]
 800855a:	e841 2300 	strex	r3, r2, [r1]
 800855e:	617b      	str	r3, [r7, #20]
   return(result);
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1e4      	bne.n	8008530 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2202      	movs	r2, #2
 800856a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800856c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8008570:	4619      	mov	r1, r3
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f7f8 f934 	bl	80007e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008578:	e04e      	b.n	8008618 <HAL_UART_IRQHandler+0x5a4>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800857a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800857e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008582:	2b00      	cmp	r3, #0
 8008584:	d014      	beq.n	80085b0 <HAL_UART_IRQHandler+0x53c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008586:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800858a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800858e:	2b00      	cmp	r3, #0
 8008590:	d105      	bne.n	800859e <HAL_UART_IRQHandler+0x52a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008592:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008596:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800859a:	2b00      	cmp	r3, #0
 800859c:	d008      	beq.n	80085b0 <HAL_UART_IRQHandler+0x53c>
  {
    if (huart->TxISR != NULL)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d03a      	beq.n	800861c <HAL_UART_IRQHandler+0x5a8>
    {
      huart->TxISR(huart);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	4798      	blx	r3
    }
    return;
 80085ae:	e035      	b.n	800861c <HAL_UART_IRQHandler+0x5a8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80085b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80085b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d009      	beq.n	80085d0 <HAL_UART_IRQHandler+0x55c>
 80085bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80085c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d003      	beq.n	80085d0 <HAL_UART_IRQHandler+0x55c>
  {
    UART_EndTransmit_IT(huart);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 fe38 	bl	800923e <UART_EndTransmit_IT>
    return;
 80085ce:	e026      	b.n	800861e <HAL_UART_IRQHandler+0x5aa>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80085d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80085d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d009      	beq.n	80085f0 <HAL_UART_IRQHandler+0x57c>
 80085dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80085e0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d003      	beq.n	80085f0 <HAL_UART_IRQHandler+0x57c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 fe5d 	bl	80092a8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085ee:	e016      	b.n	800861e <HAL_UART_IRQHandler+0x5aa>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80085f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80085f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d010      	beq.n	800861e <HAL_UART_IRQHandler+0x5aa>
 80085fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008600:	2b00      	cmp	r3, #0
 8008602:	da0c      	bge.n	800861e <HAL_UART_IRQHandler+0x5aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fe45 	bl	8009294 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800860a:	e008      	b.n	800861e <HAL_UART_IRQHandler+0x5aa>
      return;
 800860c:	bf00      	nop
 800860e:	e006      	b.n	800861e <HAL_UART_IRQHandler+0x5aa>
    return;
 8008610:	bf00      	nop
 8008612:	e004      	b.n	800861e <HAL_UART_IRQHandler+0x5aa>
      return;
 8008614:	bf00      	nop
 8008616:	e002      	b.n	800861e <HAL_UART_IRQHandler+0x5aa>
      return;
 8008618:	bf00      	nop
 800861a:	e000      	b.n	800861e <HAL_UART_IRQHandler+0x5aa>
    return;
 800861c:	bf00      	nop
  }
}
 800861e:	37b8      	adds	r7, #184	@ 0xb8
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800862c:	bf00      	nop
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008640:	bf00      	nop
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008654:	bf00      	nop
 8008656:	370c      	adds	r7, #12
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr

08008660 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008668:	bf00      	nop
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008678:	b094      	sub	sp, #80	@ 0x50
 800867a:	af00      	add	r7, sp, #0
 800867c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800867e:	2300      	movs	r3, #0
 8008680:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	4b7e      	ldr	r3, [pc, #504]	@ (8008884 <UART_SetConfig+0x210>)
 800868a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800868c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800868e:	689a      	ldr	r2, [r3, #8]
 8008690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	431a      	orrs	r2, r3
 8008696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008698:	695b      	ldr	r3, [r3, #20]
 800869a:	431a      	orrs	r2, r3
 800869c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800869e:	69db      	ldr	r3, [r3, #28]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4977      	ldr	r1, [pc, #476]	@ (8008888 <UART_SetConfig+0x214>)
 80086ac:	4019      	ands	r1, r3
 80086ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086b4:	430b      	orrs	r3, r1
 80086b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80086c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086c4:	68d9      	ldr	r1, [r3, #12]
 80086c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	ea40 0301 	orr.w	r3, r0, r1
 80086ce:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086d2:	699b      	ldr	r3, [r3, #24]
 80086d4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80086d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	4b6a      	ldr	r3, [pc, #424]	@ (8008884 <UART_SetConfig+0x210>)
 80086dc:	429a      	cmp	r2, r3
 80086de:	d009      	beq.n	80086f4 <UART_SetConfig+0x80>
 80086e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	4b69      	ldr	r3, [pc, #420]	@ (800888c <UART_SetConfig+0x218>)
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d004      	beq.n	80086f4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80086ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ec:	6a1a      	ldr	r2, [r3, #32]
 80086ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086f0:	4313      	orrs	r3, r2
 80086f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80086fe:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8008702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008708:	430b      	orrs	r3, r1
 800870a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800870c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008712:	f023 000f 	bic.w	r0, r3, #15
 8008716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008718:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800871a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	ea40 0301 	orr.w	r3, r0, r1
 8008722:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	4b59      	ldr	r3, [pc, #356]	@ (8008890 <UART_SetConfig+0x21c>)
 800872a:	429a      	cmp	r2, r3
 800872c:	d102      	bne.n	8008734 <UART_SetConfig+0xc0>
 800872e:	2301      	movs	r3, #1
 8008730:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008732:	e029      	b.n	8008788 <UART_SetConfig+0x114>
 8008734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	4b56      	ldr	r3, [pc, #344]	@ (8008894 <UART_SetConfig+0x220>)
 800873a:	429a      	cmp	r2, r3
 800873c:	d102      	bne.n	8008744 <UART_SetConfig+0xd0>
 800873e:	2302      	movs	r3, #2
 8008740:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008742:	e021      	b.n	8008788 <UART_SetConfig+0x114>
 8008744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	4b53      	ldr	r3, [pc, #332]	@ (8008898 <UART_SetConfig+0x224>)
 800874a:	429a      	cmp	r2, r3
 800874c:	d102      	bne.n	8008754 <UART_SetConfig+0xe0>
 800874e:	2304      	movs	r3, #4
 8008750:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008752:	e019      	b.n	8008788 <UART_SetConfig+0x114>
 8008754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	4b50      	ldr	r3, [pc, #320]	@ (800889c <UART_SetConfig+0x228>)
 800875a:	429a      	cmp	r2, r3
 800875c:	d102      	bne.n	8008764 <UART_SetConfig+0xf0>
 800875e:	2308      	movs	r3, #8
 8008760:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008762:	e011      	b.n	8008788 <UART_SetConfig+0x114>
 8008764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	4b4d      	ldr	r3, [pc, #308]	@ (80088a0 <UART_SetConfig+0x22c>)
 800876a:	429a      	cmp	r2, r3
 800876c:	d102      	bne.n	8008774 <UART_SetConfig+0x100>
 800876e:	2310      	movs	r3, #16
 8008770:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008772:	e009      	b.n	8008788 <UART_SetConfig+0x114>
 8008774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	4b42      	ldr	r3, [pc, #264]	@ (8008884 <UART_SetConfig+0x210>)
 800877a:	429a      	cmp	r2, r3
 800877c:	d102      	bne.n	8008784 <UART_SetConfig+0x110>
 800877e:	2320      	movs	r3, #32
 8008780:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008782:	e001      	b.n	8008788 <UART_SetConfig+0x114>
 8008784:	2300      	movs	r3, #0
 8008786:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	4b3d      	ldr	r3, [pc, #244]	@ (8008884 <UART_SetConfig+0x210>)
 800878e:	429a      	cmp	r2, r3
 8008790:	d005      	beq.n	800879e <UART_SetConfig+0x12a>
 8008792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	4b3d      	ldr	r3, [pc, #244]	@ (800888c <UART_SetConfig+0x218>)
 8008798:	429a      	cmp	r2, r3
 800879a:	f040 8085 	bne.w	80088a8 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800879e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087a0:	2200      	movs	r2, #0
 80087a2:	623b      	str	r3, [r7, #32]
 80087a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80087a6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80087aa:	f7fe f901 	bl	80069b0 <HAL_RCCEx_GetPeriphCLKFreq>
 80087ae:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80087b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	f000 80e8 	beq.w	8008988 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80087b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087bc:	4a39      	ldr	r2, [pc, #228]	@ (80088a4 <UART_SetConfig+0x230>)
 80087be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087c2:	461a      	mov	r2, r3
 80087c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80087ca:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ce:	685a      	ldr	r2, [r3, #4]
 80087d0:	4613      	mov	r3, r2
 80087d2:	005b      	lsls	r3, r3, #1
 80087d4:	4413      	add	r3, r2
 80087d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80087d8:	429a      	cmp	r2, r3
 80087da:	d305      	bcc.n	80087e8 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80087dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d903      	bls.n	80087f0 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 80087e8:	2301      	movs	r3, #1
 80087ea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80087ee:	e048      	b.n	8008882 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087f2:	2200      	movs	r2, #0
 80087f4:	61bb      	str	r3, [r7, #24]
 80087f6:	61fa      	str	r2, [r7, #28]
 80087f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087fc:	4a29      	ldr	r2, [pc, #164]	@ (80088a4 <UART_SetConfig+0x230>)
 80087fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008802:	b29b      	uxth	r3, r3
 8008804:	2200      	movs	r2, #0
 8008806:	613b      	str	r3, [r7, #16]
 8008808:	617a      	str	r2, [r7, #20]
 800880a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800880e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008812:	f7f7 fd31 	bl	8000278 <__aeabi_uldivmod>
 8008816:	4602      	mov	r2, r0
 8008818:	460b      	mov	r3, r1
 800881a:	4610      	mov	r0, r2
 800881c:	4619      	mov	r1, r3
 800881e:	f04f 0200 	mov.w	r2, #0
 8008822:	f04f 0300 	mov.w	r3, #0
 8008826:	020b      	lsls	r3, r1, #8
 8008828:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800882c:	0202      	lsls	r2, r0, #8
 800882e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008830:	6849      	ldr	r1, [r1, #4]
 8008832:	0849      	lsrs	r1, r1, #1
 8008834:	2000      	movs	r0, #0
 8008836:	460c      	mov	r4, r1
 8008838:	4605      	mov	r5, r0
 800883a:	eb12 0804 	adds.w	r8, r2, r4
 800883e:	eb43 0905 	adc.w	r9, r3, r5
 8008842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	60bb      	str	r3, [r7, #8]
 800884a:	60fa      	str	r2, [r7, #12]
 800884c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008850:	4640      	mov	r0, r8
 8008852:	4649      	mov	r1, r9
 8008854:	f7f7 fd10 	bl	8000278 <__aeabi_uldivmod>
 8008858:	4602      	mov	r2, r0
 800885a:	460b      	mov	r3, r1
 800885c:	4613      	mov	r3, r2
 800885e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008860:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008862:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008866:	d308      	bcc.n	800887a <UART_SetConfig+0x206>
 8008868:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800886a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800886e:	d204      	bcs.n	800887a <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8008870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008876:	60da      	str	r2, [r3, #12]
 8008878:	e003      	b.n	8008882 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8008880:	e082      	b.n	8008988 <UART_SetConfig+0x314>
 8008882:	e081      	b.n	8008988 <UART_SetConfig+0x314>
 8008884:	46002400 	.word	0x46002400
 8008888:	cfff69f3 	.word	0xcfff69f3
 800888c:	56002400 	.word	0x56002400
 8008890:	40013800 	.word	0x40013800
 8008894:	40004400 	.word	0x40004400
 8008898:	40004800 	.word	0x40004800
 800889c:	40004c00 	.word	0x40004c00
 80088a0:	40005000 	.word	0x40005000
 80088a4:	0800a664 	.word	0x0800a664
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088aa:	69db      	ldr	r3, [r3, #28]
 80088ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088b0:	d13c      	bne.n	800892c <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80088b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088b4:	2200      	movs	r2, #0
 80088b6:	603b      	str	r3, [r7, #0]
 80088b8:	607a      	str	r2, [r7, #4]
 80088ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088be:	f7fe f877 	bl	80069b0 <HAL_RCCEx_GetPeriphCLKFreq>
 80088c2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80088c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d05e      	beq.n	8008988 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ce:	4a39      	ldr	r2, [pc, #228]	@ (80089b4 <UART_SetConfig+0x340>)
 80088d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088d4:	461a      	mov	r2, r3
 80088d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80088dc:	005a      	lsls	r2, r3, #1
 80088de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	085b      	lsrs	r3, r3, #1
 80088e4:	441a      	add	r2, r3
 80088e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088f2:	2b0f      	cmp	r3, #15
 80088f4:	d916      	bls.n	8008924 <UART_SetConfig+0x2b0>
 80088f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088fc:	d212      	bcs.n	8008924 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80088fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008900:	b29b      	uxth	r3, r3
 8008902:	f023 030f 	bic.w	r3, r3, #15
 8008906:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800890a:	085b      	lsrs	r3, r3, #1
 800890c:	b29b      	uxth	r3, r3
 800890e:	f003 0307 	and.w	r3, r3, #7
 8008912:	b29a      	uxth	r2, r3
 8008914:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008916:	4313      	orrs	r3, r2
 8008918:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800891a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8008920:	60da      	str	r2, [r3, #12]
 8008922:	e031      	b.n	8008988 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800892a:	e02d      	b.n	8008988 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800892c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800892e:	2200      	movs	r2, #0
 8008930:	469a      	mov	sl, r3
 8008932:	4693      	mov	fp, r2
 8008934:	4650      	mov	r0, sl
 8008936:	4659      	mov	r1, fp
 8008938:	f7fe f83a 	bl	80069b0 <HAL_RCCEx_GetPeriphCLKFreq>
 800893c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800893e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008940:	2b00      	cmp	r3, #0
 8008942:	d021      	beq.n	8008988 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008948:	4a1a      	ldr	r2, [pc, #104]	@ (80089b4 <UART_SetConfig+0x340>)
 800894a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800894e:	461a      	mov	r2, r3
 8008950:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008952:	fbb3 f2f2 	udiv	r2, r3, r2
 8008956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	085b      	lsrs	r3, r3, #1
 800895c:	441a      	add	r2, r3
 800895e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	fbb2 f3f3 	udiv	r3, r2, r3
 8008966:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800896a:	2b0f      	cmp	r3, #15
 800896c:	d909      	bls.n	8008982 <UART_SetConfig+0x30e>
 800896e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008974:	d205      	bcs.n	8008982 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008978:	b29a      	uxth	r2, r3
 800897a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	60da      	str	r2, [r3, #12]
 8008980:	e002      	b.n	8008988 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800898a:	2201      	movs	r2, #1
 800898c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008992:	2201      	movs	r2, #1
 8008994:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800899a:	2200      	movs	r2, #0
 800899c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800899e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089a0:	2200      	movs	r2, #0
 80089a2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80089a4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3750      	adds	r7, #80	@ 0x50
 80089ac:	46bd      	mov	sp, r7
 80089ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089b2:	bf00      	nop
 80089b4:	0800a664 	.word	0x0800a664

080089b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089c4:	f003 0308 	and.w	r3, r3, #8
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d00a      	beq.n	80089e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	430a      	orrs	r2, r1
 80089e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089e6:	f003 0301 	and.w	r3, r3, #1
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00a      	beq.n	8008a04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	430a      	orrs	r2, r1
 8008a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a08:	f003 0302 	and.w	r3, r3, #2
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00a      	beq.n	8008a26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	430a      	orrs	r2, r1
 8008a24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a2a:	f003 0304 	and.w	r3, r3, #4
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d00a      	beq.n	8008a48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	430a      	orrs	r2, r1
 8008a46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a4c:	f003 0310 	and.w	r3, r3, #16
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d00a      	beq.n	8008a6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	430a      	orrs	r2, r1
 8008a68:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a6e:	f003 0320 	and.w	r3, r3, #32
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d00a      	beq.n	8008a8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	430a      	orrs	r2, r1
 8008a8a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d01a      	beq.n	8008ace <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	430a      	orrs	r2, r1
 8008aac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ab2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ab6:	d10a      	bne.n	8008ace <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	430a      	orrs	r2, r1
 8008acc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00a      	beq.n	8008af0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	430a      	orrs	r2, r1
 8008aee:	605a      	str	r2, [r3, #4]
  }
}
 8008af0:	bf00      	nop
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b098      	sub	sp, #96	@ 0x60
 8008b00:	af02      	add	r7, sp, #8
 8008b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008b0c:	f7f8 ff08 	bl	8001920 <HAL_GetTick>
 8008b10:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f003 0308 	and.w	r3, r3, #8
 8008b1c:	2b08      	cmp	r3, #8
 8008b1e:	d12f      	bne.n	8008b80 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b20:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008b24:	9300      	str	r3, [sp, #0]
 8008b26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 f88e 	bl	8008c50 <UART_WaitOnFlagUntilTimeout>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d022      	beq.n	8008b80 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b42:	e853 3f00 	ldrex	r3, [r3]
 8008b46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	461a      	mov	r2, r3
 8008b56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b58:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b5a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b60:	e841 2300 	strex	r3, r2, [r1]
 8008b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d1e6      	bne.n	8008b3a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2220      	movs	r2, #32
 8008b70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b7c:	2303      	movs	r3, #3
 8008b7e:	e063      	b.n	8008c48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f003 0304 	and.w	r3, r3, #4
 8008b8a:	2b04      	cmp	r3, #4
 8008b8c:	d149      	bne.n	8008c22 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b8e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b96:	2200      	movs	r2, #0
 8008b98:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 f857 	bl	8008c50 <UART_WaitOnFlagUntilTimeout>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d03c      	beq.n	8008c22 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb0:	e853 3f00 	ldrex	r3, [r3]
 8008bb4:	623b      	str	r3, [r7, #32]
   return(result);
 8008bb6:	6a3b      	ldr	r3, [r7, #32]
 8008bb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008bbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bc6:	633b      	str	r3, [r7, #48]	@ 0x30
 8008bc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008bcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bce:	e841 2300 	strex	r3, r2, [r1]
 8008bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d1e6      	bne.n	8008ba8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	3308      	adds	r3, #8
 8008be0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	e853 3f00 	ldrex	r3, [r3]
 8008be8:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f023 0301 	bic.w	r3, r3, #1
 8008bf0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	3308      	adds	r3, #8
 8008bf8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008bfa:	61fa      	str	r2, [r7, #28]
 8008bfc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfe:	69b9      	ldr	r1, [r7, #24]
 8008c00:	69fa      	ldr	r2, [r7, #28]
 8008c02:	e841 2300 	strex	r3, r2, [r1]
 8008c06:	617b      	str	r3, [r7, #20]
   return(result);
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d1e5      	bne.n	8008bda <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2220      	movs	r2, #32
 8008c12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c1e:	2303      	movs	r3, #3
 8008c20:	e012      	b.n	8008c48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2220      	movs	r2, #32
 8008c26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2220      	movs	r2, #32
 8008c2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2200      	movs	r2, #0
 8008c36:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008c46:	2300      	movs	r3, #0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3758      	adds	r7, #88	@ 0x58
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	603b      	str	r3, [r7, #0]
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c60:	e04f      	b.n	8008d02 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c62:	69bb      	ldr	r3, [r7, #24]
 8008c64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c68:	d04b      	beq.n	8008d02 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c6a:	f7f8 fe59 	bl	8001920 <HAL_GetTick>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	1ad3      	subs	r3, r2, r3
 8008c74:	69ba      	ldr	r2, [r7, #24]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d302      	bcc.n	8008c80 <UART_WaitOnFlagUntilTimeout+0x30>
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d101      	bne.n	8008c84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008c80:	2303      	movs	r3, #3
 8008c82:	e04e      	b.n	8008d22 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f003 0304 	and.w	r3, r3, #4
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d037      	beq.n	8008d02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	2b80      	cmp	r3, #128	@ 0x80
 8008c96:	d034      	beq.n	8008d02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	2b40      	cmp	r3, #64	@ 0x40
 8008c9c:	d031      	beq.n	8008d02 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	69db      	ldr	r3, [r3, #28]
 8008ca4:	f003 0308 	and.w	r3, r3, #8
 8008ca8:	2b08      	cmp	r3, #8
 8008caa:	d110      	bne.n	8008cce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	2208      	movs	r2, #8
 8008cb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008cb4:	68f8      	ldr	r0, [r7, #12]
 8008cb6:	f000 f972 	bl	8008f9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2208      	movs	r2, #8
 8008cbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	e029      	b.n	8008d22 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	69db      	ldr	r3, [r3, #28]
 8008cd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008cd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008cdc:	d111      	bne.n	8008d02 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008ce6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f000 f958 	bl	8008f9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2220      	movs	r2, #32
 8008cf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	e00f      	b.n	8008d22 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	69da      	ldr	r2, [r3, #28]
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	4013      	ands	r3, r2
 8008d0c:	68ba      	ldr	r2, [r7, #8]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	bf0c      	ite	eq
 8008d12:	2301      	moveq	r3, #1
 8008d14:	2300      	movne	r3, #0
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	461a      	mov	r2, r3
 8008d1a:	79fb      	ldrb	r3, [r7, #7]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d0a0      	beq.n	8008c62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3710      	adds	r7, #16
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
	...

08008d2c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b098      	sub	sp, #96	@ 0x60
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	60b9      	str	r1, [r7, #8]
 8008d36:	4613      	mov	r3, r2
 8008d38:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 8008d3a:	88fb      	ldrh	r3, [r7, #6]
 8008d3c:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

  huart->pRxBuffPtr = pData;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	68ba      	ldr	r2, [r7, #8]
 8008d44:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	88fa      	ldrh	r2, [r7, #6]
 8008d4a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2200      	movs	r2, #0
 8008d52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2222      	movs	r2, #34	@ 0x22
 8008d5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d07c      	beq.n	8008e62 <UART_Start_Receive_DMA+0x136>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d6e:	4a68      	ldr	r2, [pc, #416]	@ (8008f10 <UART_Start_Receive_DMA+0x1e4>)
 8008d70:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d78:	4a66      	ldr	r2, [pc, #408]	@ (8008f14 <UART_Start_Receive_DMA+0x1e8>)
 8008d7a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d82:	4a65      	ldr	r2, [pc, #404]	@ (8008f18 <UART_Start_Receive_DMA+0x1ec>)
 8008d84:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d98:	d107      	bne.n	8008daa <UART_Start_Receive_DMA+0x7e>
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	691b      	ldr	r3, [r3, #16]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d103      	bne.n	8008daa <UART_Start_Receive_DMA+0x7e>
    {
      nbByte = Size * 2U;
 8008da2:	88fb      	ldrh	r3, [r7, #6]
 8008da4:	005b      	lsls	r3, r3, #1
 8008da6:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    }

    /* Check linked list mode */
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008db0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d034      	beq.n	8008e24 <UART_Start_Receive_DMA+0xf8>
    {
      if ((huart->hdmarx->LinkedListQueue != NULL) && (huart->hdmarx->LinkedListQueue->Head != NULL))
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d02a      	beq.n	8008e1c <UART_Start_Receive_DMA+0xf0>
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d023      	beq.n	8008e1c <UART_Start_Receive_DMA+0xf0>
      {
        /* Set DMA data size */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8008de2:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
          (uint32_t)&huart->Instance->RDR;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f103 0224 	add.w	r2, r3, #36	@ 0x24
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008df2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)huart->pRxBuffPtr;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	611a      	str	r2, [r3, #16]

        /* Enable the UART receive DMA channel */
        status = HAL_DMAEx_List_Start_IT(huart->hdmarx);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7f9 ffbe 	bl	8002d90 <HAL_DMAEx_List_Start_IT>
 8008e14:	4603      	mov	r3, r0
 8008e16:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008e1a:	e014      	b.n	8008e46 <UART_Start_Receive_DMA+0x11a>
      }
      else
      {
        /* Update status */
        status = HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008e22:	e010      	b.n	8008e46 <UART_Start_Receive_DMA+0x11a>
      }
    }
    else
    {
      /* Enable the UART receive DMA channel */
      status = HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, nbByte);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	3324      	adds	r3, #36	@ 0x24
 8008e30:	4619      	mov	r1, r3
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e36:	461a      	mov	r2, r3
 8008e38:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8008e3c:	f7f9 fa60 	bl	8002300 <HAL_DMA_Start_IT>
 8008e40:	4603      	mov	r3, r0
 8008e42:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    }

    if (status != HAL_OK)
 8008e46:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d009      	beq.n	8008e62 <UART_Start_Receive_DMA+0x136>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2210      	movs	r2, #16
 8008e52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2220      	movs	r2, #32
 8008e5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e051      	b.n	8008f06 <UART_Start_Receive_DMA+0x1da>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	691b      	ldr	r3, [r3, #16]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d018      	beq.n	8008e9c <UART_Start_Receive_DMA+0x170>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e72:	e853 3f00 	ldrex	r3, [r3]
 8008e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008e78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	461a      	mov	r2, r3
 8008e86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008e88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e8a:	64ba      	str	r2, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008e8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008e90:	e841 2300 	strex	r3, r2, [r1]
 8008e94:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008e96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d1e6      	bne.n	8008e6a <UART_Start_Receive_DMA+0x13e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	3308      	adds	r3, #8
 8008ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ea6:	e853 3f00 	ldrex	r3, [r3]
 8008eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eae:	f043 0301 	orr.w	r3, r3, #1
 8008eb2:	657b      	str	r3, [r7, #84]	@ 0x54
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	3308      	adds	r3, #8
 8008eba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008ebc:	63ba      	str	r2, [r7, #56]	@ 0x38
 8008ebe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008ec2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ec4:	e841 2300 	strex	r3, r2, [r1]
 8008ec8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d1e5      	bne.n	8008e9c <UART_Start_Receive_DMA+0x170>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	3308      	adds	r3, #8
 8008ed6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed8:	69bb      	ldr	r3, [r7, #24]
 8008eda:	e853 3f00 	ldrex	r3, [r3]
 8008ede:	617b      	str	r3, [r7, #20]
   return(result);
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ee6:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	3308      	adds	r3, #8
 8008eee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008ef0:	627a      	str	r2, [r7, #36]	@ 0x24
 8008ef2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef4:	6a39      	ldr	r1, [r7, #32]
 8008ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ef8:	e841 2300 	strex	r3, r2, [r1]
 8008efc:	61fb      	str	r3, [r7, #28]
   return(result);
 8008efe:	69fb      	ldr	r3, [r7, #28]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d1e5      	bne.n	8008ed0 <UART_Start_Receive_DMA+0x1a4>

  return HAL_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3760      	adds	r7, #96	@ 0x60
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	0800906b 	.word	0x0800906b
 8008f14:	0800915d 	.word	0x0800915d
 8008f18:	0800919b 	.word	0x0800919b

08008f1c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b08f      	sub	sp, #60	@ 0x3c
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2a:	6a3b      	ldr	r3, [r7, #32]
 8008f2c:	e853 3f00 	ldrex	r3, [r3]
 8008f30:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008f38:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	461a      	mov	r2, r3
 8008f40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f44:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f4a:	e841 2300 	strex	r3, r2, [r1]
 8008f4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1e6      	bne.n	8008f24 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	3308      	adds	r3, #8
 8008f5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	e853 3f00 	ldrex	r3, [r3]
 8008f64:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008f6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	3308      	adds	r3, #8
 8008f74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f76:	61ba      	str	r2, [r7, #24]
 8008f78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7a:	6979      	ldr	r1, [r7, #20]
 8008f7c:	69ba      	ldr	r2, [r7, #24]
 8008f7e:	e841 2300 	strex	r3, r2, [r1]
 8008f82:	613b      	str	r3, [r7, #16]
   return(result);
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1e5      	bne.n	8008f56 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2220      	movs	r2, #32
 8008f8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008f92:	bf00      	nop
 8008f94:	373c      	adds	r7, #60	@ 0x3c
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr

08008f9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f9e:	b480      	push	{r7}
 8008fa0:	b095      	sub	sp, #84	@ 0x54
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fae:	e853 3f00 	ldrex	r3, [r3]
 8008fb2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8008fc6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008fca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008fcc:	e841 2300 	strex	r3, r2, [r1]
 8008fd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d1e6      	bne.n	8008fa6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	3308      	adds	r3, #8
 8008fde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe0:	6a3b      	ldr	r3, [r7, #32]
 8008fe2:	e853 3f00 	ldrex	r3, [r3]
 8008fe6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008fee:	f023 0301 	bic.w	r3, r3, #1
 8008ff2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	3308      	adds	r3, #8
 8008ffa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ffc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009000:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009002:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009004:	e841 2300 	strex	r3, r2, [r1]
 8009008:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800900a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800900c:	2b00      	cmp	r3, #0
 800900e:	d1e3      	bne.n	8008fd8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009014:	2b01      	cmp	r3, #1
 8009016:	d118      	bne.n	800904a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	e853 3f00 	ldrex	r3, [r3]
 8009024:	60bb      	str	r3, [r7, #8]
   return(result);
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	f023 0310 	bic.w	r3, r3, #16
 800902c:	647b      	str	r3, [r7, #68]	@ 0x44
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	461a      	mov	r2, r3
 8009034:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009036:	61bb      	str	r3, [r7, #24]
 8009038:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903a:	6979      	ldr	r1, [r7, #20]
 800903c:	69ba      	ldr	r2, [r7, #24]
 800903e:	e841 2300 	strex	r3, r2, [r1]
 8009042:	613b      	str	r3, [r7, #16]
   return(result);
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1e6      	bne.n	8009018 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2220      	movs	r2, #32
 800904e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800905e:	bf00      	nop
 8009060:	3754      	adds	r7, #84	@ 0x54
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr

0800906a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800906a:	b580      	push	{r7, lr}
 800906c:	b096      	sub	sp, #88	@ 0x58
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009076:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800907c:	2b81      	cmp	r3, #129	@ 0x81
 800907e:	d057      	beq.n	8009130 <UART_DMAReceiveCplt+0xc6>
  {
    huart->RxXferCount = 0U;
 8009080:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009082:	2200      	movs	r2, #0
 8009084:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009088:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800908e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009090:	e853 3f00 	ldrex	r3, [r3]
 8009094:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009098:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800909c:	653b      	str	r3, [r7, #80]	@ 0x50
 800909e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	461a      	mov	r2, r3
 80090a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80090a8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80090ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090ae:	e841 2300 	strex	r3, r2, [r1]
 80090b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80090b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1e6      	bne.n	8009088 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	3308      	adds	r3, #8
 80090c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c4:	e853 3f00 	ldrex	r3, [r3]
 80090c8:	623b      	str	r3, [r7, #32]
   return(result);
 80090ca:	6a3b      	ldr	r3, [r7, #32]
 80090cc:	f023 0301 	bic.w	r3, r3, #1
 80090d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80090d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	3308      	adds	r3, #8
 80090d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80090da:	633a      	str	r2, [r7, #48]	@ 0x30
 80090dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80090e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090e2:	e841 2300 	strex	r3, r2, [r1]
 80090e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80090e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1e5      	bne.n	80090ba <UART_DMAReceiveCplt+0x50>
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80090ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090f0:	2220      	movs	r2, #32
 80090f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d118      	bne.n	8009130 <UART_DMAReceiveCplt+0xc6>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	e853 3f00 	ldrex	r3, [r3]
 800910a:	60fb      	str	r3, [r7, #12]
   return(result);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f023 0310 	bic.w	r3, r3, #16
 8009112:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	461a      	mov	r2, r3
 800911a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800911c:	61fb      	str	r3, [r7, #28]
 800911e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009120:	69b9      	ldr	r1, [r7, #24]
 8009122:	69fa      	ldr	r2, [r7, #28]
 8009124:	e841 2300 	strex	r3, r2, [r1]
 8009128:	617b      	str	r3, [r7, #20]
   return(result);
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d1e6      	bne.n	80090fe <UART_DMAReceiveCplt+0x94>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009130:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009132:	2200      	movs	r2, #0
 8009134:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009136:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009138:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800913a:	2b01      	cmp	r3, #1
 800913c:	d107      	bne.n	800914e <UART_DMAReceiveCplt+0xe4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800913e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009140:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009144:	4619      	mov	r1, r3
 8009146:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8009148:	f7f7 fb4a 	bl	80007e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800914c:	e002      	b.n	8009154 <UART_DMAReceiveCplt+0xea>
    HAL_UART_RxCpltCallback(huart);
 800914e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8009150:	f7ff fa72 	bl	8008638 <HAL_UART_RxCpltCallback>
}
 8009154:	bf00      	nop
 8009156:	3758      	adds	r7, #88	@ 0x58
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009168:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2201      	movs	r2, #1
 800916e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009174:	2b01      	cmp	r3, #1
 8009176:	d109      	bne.n	800918c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800917e:	085b      	lsrs	r3, r3, #1
 8009180:	b29b      	uxth	r3, r3
 8009182:	4619      	mov	r1, r3
 8009184:	68f8      	ldr	r0, [r7, #12]
 8009186:	f7f7 fb2b 	bl	80007e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800918a:	e002      	b.n	8009192 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800918c:	68f8      	ldr	r0, [r7, #12]
 800918e:	f7ff fa5d 	bl	800864c <HAL_UART_RxHalfCpltCallback>
}
 8009192:	bf00      	nop
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800919a:	b580      	push	{r7, lr}
 800919c:	b086      	sub	sp, #24
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091a6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091ae:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80091b6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091c2:	2b80      	cmp	r3, #128	@ 0x80
 80091c4:	d109      	bne.n	80091da <UART_DMAError+0x40>
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	2b21      	cmp	r3, #33	@ 0x21
 80091ca:	d106      	bne.n	80091da <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	2200      	movs	r2, #0
 80091d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80091d4:	6978      	ldr	r0, [r7, #20]
 80091d6:	f7ff fea1 	bl	8008f1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091e4:	2b40      	cmp	r3, #64	@ 0x40
 80091e6:	d109      	bne.n	80091fc <UART_DMAError+0x62>
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2b22      	cmp	r3, #34	@ 0x22
 80091ec:	d106      	bne.n	80091fc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	2200      	movs	r2, #0
 80091f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80091f6:	6978      	ldr	r0, [r7, #20]
 80091f8:	f7ff fed1 	bl	8008f9e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009202:	f043 0210 	orr.w	r2, r3, #16
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800920c:	6978      	ldr	r0, [r7, #20]
 800920e:	f7ff fa27 	bl	8008660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009212:	bf00      	nop
 8009214:	3718      	adds	r7, #24
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b084      	sub	sp, #16
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009226:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2200      	movs	r2, #0
 800922c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f7ff fa15 	bl	8008660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009236:	bf00      	nop
 8009238:	3710      	adds	r7, #16
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}

0800923e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800923e:	b580      	push	{r7, lr}
 8009240:	b088      	sub	sp, #32
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	e853 3f00 	ldrex	r3, [r3]
 8009252:	60bb      	str	r3, [r7, #8]
   return(result);
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800925a:	61fb      	str	r3, [r7, #28]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	461a      	mov	r2, r3
 8009262:	69fb      	ldr	r3, [r7, #28]
 8009264:	61bb      	str	r3, [r7, #24]
 8009266:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009268:	6979      	ldr	r1, [r7, #20]
 800926a:	69ba      	ldr	r2, [r7, #24]
 800926c:	e841 2300 	strex	r3, r2, [r1]
 8009270:	613b      	str	r3, [r7, #16]
   return(result);
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d1e6      	bne.n	8009246 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2220      	movs	r2, #32
 800927c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f7ff f9cc 	bl	8008624 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800928c:	bf00      	nop
 800928e:	3720      	adds	r7, #32
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800929c:	bf00      	nop
 800929e:	370c      	adds	r7, #12
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr

080092a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80092b0:	bf00      	nop
 80092b2:	370c      	adds	r7, #12
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d101      	bne.n	80092d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80092ce:	2302      	movs	r3, #2
 80092d0:	e027      	b.n	8009322 <HAL_UARTEx_DisableFifoMode+0x66>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2224      	movs	r2, #36	@ 0x24
 80092de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f022 0201 	bic.w	r2, r2, #1
 80092f8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009300:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	68fa      	ldr	r2, [r7, #12]
 800930e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2220      	movs	r2, #32
 8009314:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3714      	adds	r7, #20
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr

0800932e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b084      	sub	sp, #16
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
 8009336:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800933e:	2b01      	cmp	r3, #1
 8009340:	d101      	bne.n	8009346 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009342:	2302      	movs	r3, #2
 8009344:	e02d      	b.n	80093a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2201      	movs	r2, #1
 800934a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2224      	movs	r2, #36	@ 0x24
 8009352:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f022 0201 	bic.w	r2, r2, #1
 800936c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	683a      	ldr	r2, [r7, #0]
 800937e:	430a      	orrs	r2, r1
 8009380:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 f8a4 	bl	80094d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	68fa      	ldr	r2, [r7, #12]
 800938e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2220      	movs	r2, #32
 8009394:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2200      	movs	r2, #0
 800939c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80093a0:	2300      	movs	r3, #0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3710      	adds	r7, #16
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}

080093aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b084      	sub	sp, #16
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
 80093b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d101      	bne.n	80093c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80093be:	2302      	movs	r3, #2
 80093c0:	e02d      	b.n	800941e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2201      	movs	r2, #1
 80093c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2224      	movs	r2, #36	@ 0x24
 80093ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f022 0201 	bic.w	r2, r2, #1
 80093e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	683a      	ldr	r2, [r7, #0]
 80093fa:	430a      	orrs	r2, r1
 80093fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 f866 	bl	80094d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2220      	movs	r2, #32
 8009410:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800941c:	2300      	movs	r3, #0
}
 800941e:	4618      	mov	r0, r3
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009426:	b580      	push	{r7, lr}
 8009428:	b08c      	sub	sp, #48	@ 0x30
 800942a:	af00      	add	r7, sp, #0
 800942c:	60f8      	str	r0, [r7, #12]
 800942e:	60b9      	str	r1, [r7, #8]
 8009430:	4613      	mov	r3, r2
 8009432:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800943a:	2b20      	cmp	r3, #32
 800943c:	d142      	bne.n	80094c4 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d002      	beq.n	800944a <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8009444:	88fb      	ldrh	r3, [r7, #6]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d101      	bne.n	800944e <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	e03b      	b.n	80094c6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2201      	movs	r2, #1
 8009452:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2200      	movs	r2, #0
 8009458:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800945a:	88fb      	ldrh	r3, [r7, #6]
 800945c:	461a      	mov	r2, r3
 800945e:	68b9      	ldr	r1, [r7, #8]
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	f7ff fc63 	bl	8008d2c <UART_Start_Receive_DMA>
 8009466:	4603      	mov	r3, r0
 8009468:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800946c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009470:	2b00      	cmp	r3, #0
 8009472:	d124      	bne.n	80094be <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009478:	2b01      	cmp	r3, #1
 800947a:	d11d      	bne.n	80094b8 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2210      	movs	r2, #16
 8009482:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948a:	69bb      	ldr	r3, [r7, #24]
 800948c:	e853 3f00 	ldrex	r3, [r3]
 8009490:	617b      	str	r3, [r7, #20]
   return(result);
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	f043 0310 	orr.w	r3, r3, #16
 8009498:	62bb      	str	r3, [r7, #40]	@ 0x28
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	461a      	mov	r2, r3
 80094a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80094a4:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a6:	6a39      	ldr	r1, [r7, #32]
 80094a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094aa:	e841 2300 	strex	r3, r2, [r1]
 80094ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80094b0:	69fb      	ldr	r3, [r7, #28]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d1e6      	bne.n	8009484 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80094b6:	e002      	b.n	80094be <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80094b8:	2301      	movs	r3, #1
 80094ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80094be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80094c2:	e000      	b.n	80094c6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80094c4:	2302      	movs	r3, #2
  }
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3730      	adds	r7, #48	@ 0x30
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
	...

080094d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b085      	sub	sp, #20
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d108      	bne.n	80094f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2201      	movs	r2, #1
 80094ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80094f0:	e031      	b.n	8009556 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80094f2:	2308      	movs	r3, #8
 80094f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80094f6:	2308      	movs	r3, #8
 80094f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	0e5b      	lsrs	r3, r3, #25
 8009502:	b2db      	uxtb	r3, r3
 8009504:	f003 0307 	and.w	r3, r3, #7
 8009508:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	0f5b      	lsrs	r3, r3, #29
 8009512:	b2db      	uxtb	r3, r3
 8009514:	f003 0307 	and.w	r3, r3, #7
 8009518:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800951a:	7bbb      	ldrb	r3, [r7, #14]
 800951c:	7b3a      	ldrb	r2, [r7, #12]
 800951e:	4911      	ldr	r1, [pc, #68]	@ (8009564 <UARTEx_SetNbDataToProcess+0x94>)
 8009520:	5c8a      	ldrb	r2, [r1, r2]
 8009522:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009526:	7b3a      	ldrb	r2, [r7, #12]
 8009528:	490f      	ldr	r1, [pc, #60]	@ (8009568 <UARTEx_SetNbDataToProcess+0x98>)
 800952a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800952c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009530:	b29a      	uxth	r2, r3
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009538:	7bfb      	ldrb	r3, [r7, #15]
 800953a:	7b7a      	ldrb	r2, [r7, #13]
 800953c:	4909      	ldr	r1, [pc, #36]	@ (8009564 <UARTEx_SetNbDataToProcess+0x94>)
 800953e:	5c8a      	ldrb	r2, [r1, r2]
 8009540:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009544:	7b7a      	ldrb	r2, [r7, #13]
 8009546:	4908      	ldr	r1, [pc, #32]	@ (8009568 <UARTEx_SetNbDataToProcess+0x98>)
 8009548:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800954a:	fb93 f3f2 	sdiv	r3, r3, r2
 800954e:	b29a      	uxth	r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009556:	bf00      	nop
 8009558:	3714      	adds	r7, #20
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr
 8009562:	bf00      	nop
 8009564:	0800a67c 	.word	0x0800a67c
 8009568:	0800a684 	.word	0x0800a684

0800956c <std>:
 800956c:	2300      	movs	r3, #0
 800956e:	b510      	push	{r4, lr}
 8009570:	4604      	mov	r4, r0
 8009572:	6083      	str	r3, [r0, #8]
 8009574:	8181      	strh	r1, [r0, #12]
 8009576:	4619      	mov	r1, r3
 8009578:	6643      	str	r3, [r0, #100]	@ 0x64
 800957a:	81c2      	strh	r2, [r0, #14]
 800957c:	2208      	movs	r2, #8
 800957e:	6183      	str	r3, [r0, #24]
 8009580:	e9c0 3300 	strd	r3, r3, [r0]
 8009584:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009588:	305c      	adds	r0, #92	@ 0x5c
 800958a:	f000 f921 	bl	80097d0 <memset>
 800958e:	4b0d      	ldr	r3, [pc, #52]	@ (80095c4 <std+0x58>)
 8009590:	6224      	str	r4, [r4, #32]
 8009592:	6263      	str	r3, [r4, #36]	@ 0x24
 8009594:	4b0c      	ldr	r3, [pc, #48]	@ (80095c8 <std+0x5c>)
 8009596:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009598:	4b0c      	ldr	r3, [pc, #48]	@ (80095cc <std+0x60>)
 800959a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800959c:	4b0c      	ldr	r3, [pc, #48]	@ (80095d0 <std+0x64>)
 800959e:	6323      	str	r3, [r4, #48]	@ 0x30
 80095a0:	4b0c      	ldr	r3, [pc, #48]	@ (80095d4 <std+0x68>)
 80095a2:	429c      	cmp	r4, r3
 80095a4:	d006      	beq.n	80095b4 <std+0x48>
 80095a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80095aa:	4294      	cmp	r4, r2
 80095ac:	d002      	beq.n	80095b4 <std+0x48>
 80095ae:	33d0      	adds	r3, #208	@ 0xd0
 80095b0:	429c      	cmp	r4, r3
 80095b2:	d105      	bne.n	80095c0 <std+0x54>
 80095b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80095b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095bc:	f000 b93a 	b.w	8009834 <__retarget_lock_init_recursive>
 80095c0:	bd10      	pop	{r4, pc}
 80095c2:	bf00      	nop
 80095c4:	0800a0ad 	.word	0x0800a0ad
 80095c8:	0800a0cf 	.word	0x0800a0cf
 80095cc:	0800a107 	.word	0x0800a107
 80095d0:	0800a12b 	.word	0x0800a12b
 80095d4:	200003ec 	.word	0x200003ec

080095d8 <stdio_exit_handler>:
 80095d8:	4a02      	ldr	r2, [pc, #8]	@ (80095e4 <stdio_exit_handler+0xc>)
 80095da:	4903      	ldr	r1, [pc, #12]	@ (80095e8 <stdio_exit_handler+0x10>)
 80095dc:	4803      	ldr	r0, [pc, #12]	@ (80095ec <stdio_exit_handler+0x14>)
 80095de:	f000 b869 	b.w	80096b4 <_fwalk_sglue>
 80095e2:	bf00      	nop
 80095e4:	20000028 	.word	0x20000028
 80095e8:	0800a045 	.word	0x0800a045
 80095ec:	20000038 	.word	0x20000038

080095f0 <cleanup_stdio>:
 80095f0:	6841      	ldr	r1, [r0, #4]
 80095f2:	4b0c      	ldr	r3, [pc, #48]	@ (8009624 <cleanup_stdio+0x34>)
 80095f4:	4299      	cmp	r1, r3
 80095f6:	b510      	push	{r4, lr}
 80095f8:	4604      	mov	r4, r0
 80095fa:	d001      	beq.n	8009600 <cleanup_stdio+0x10>
 80095fc:	f000 fd22 	bl	800a044 <_fflush_r>
 8009600:	68a1      	ldr	r1, [r4, #8]
 8009602:	4b09      	ldr	r3, [pc, #36]	@ (8009628 <cleanup_stdio+0x38>)
 8009604:	4299      	cmp	r1, r3
 8009606:	d002      	beq.n	800960e <cleanup_stdio+0x1e>
 8009608:	4620      	mov	r0, r4
 800960a:	f000 fd1b 	bl	800a044 <_fflush_r>
 800960e:	68e1      	ldr	r1, [r4, #12]
 8009610:	4b06      	ldr	r3, [pc, #24]	@ (800962c <cleanup_stdio+0x3c>)
 8009612:	4299      	cmp	r1, r3
 8009614:	d004      	beq.n	8009620 <cleanup_stdio+0x30>
 8009616:	4620      	mov	r0, r4
 8009618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800961c:	f000 bd12 	b.w	800a044 <_fflush_r>
 8009620:	bd10      	pop	{r4, pc}
 8009622:	bf00      	nop
 8009624:	200003ec 	.word	0x200003ec
 8009628:	20000454 	.word	0x20000454
 800962c:	200004bc 	.word	0x200004bc

08009630 <global_stdio_init.part.0>:
 8009630:	b510      	push	{r4, lr}
 8009632:	4b0b      	ldr	r3, [pc, #44]	@ (8009660 <global_stdio_init.part.0+0x30>)
 8009634:	2104      	movs	r1, #4
 8009636:	4c0b      	ldr	r4, [pc, #44]	@ (8009664 <global_stdio_init.part.0+0x34>)
 8009638:	4a0b      	ldr	r2, [pc, #44]	@ (8009668 <global_stdio_init.part.0+0x38>)
 800963a:	4620      	mov	r0, r4
 800963c:	601a      	str	r2, [r3, #0]
 800963e:	2200      	movs	r2, #0
 8009640:	f7ff ff94 	bl	800956c <std>
 8009644:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009648:	2201      	movs	r2, #1
 800964a:	2109      	movs	r1, #9
 800964c:	f7ff ff8e 	bl	800956c <std>
 8009650:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009654:	2202      	movs	r2, #2
 8009656:	2112      	movs	r1, #18
 8009658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800965c:	f7ff bf86 	b.w	800956c <std>
 8009660:	20000524 	.word	0x20000524
 8009664:	200003ec 	.word	0x200003ec
 8009668:	080095d9 	.word	0x080095d9

0800966c <__sfp_lock_acquire>:
 800966c:	4801      	ldr	r0, [pc, #4]	@ (8009674 <__sfp_lock_acquire+0x8>)
 800966e:	f000 b8e2 	b.w	8009836 <__retarget_lock_acquire_recursive>
 8009672:	bf00      	nop
 8009674:	20000529 	.word	0x20000529

08009678 <__sfp_lock_release>:
 8009678:	4801      	ldr	r0, [pc, #4]	@ (8009680 <__sfp_lock_release+0x8>)
 800967a:	f000 b8dd 	b.w	8009838 <__retarget_lock_release_recursive>
 800967e:	bf00      	nop
 8009680:	20000529 	.word	0x20000529

08009684 <__sinit>:
 8009684:	b510      	push	{r4, lr}
 8009686:	4604      	mov	r4, r0
 8009688:	f7ff fff0 	bl	800966c <__sfp_lock_acquire>
 800968c:	6a23      	ldr	r3, [r4, #32]
 800968e:	b11b      	cbz	r3, 8009698 <__sinit+0x14>
 8009690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009694:	f7ff bff0 	b.w	8009678 <__sfp_lock_release>
 8009698:	4b04      	ldr	r3, [pc, #16]	@ (80096ac <__sinit+0x28>)
 800969a:	6223      	str	r3, [r4, #32]
 800969c:	4b04      	ldr	r3, [pc, #16]	@ (80096b0 <__sinit+0x2c>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d1f5      	bne.n	8009690 <__sinit+0xc>
 80096a4:	f7ff ffc4 	bl	8009630 <global_stdio_init.part.0>
 80096a8:	e7f2      	b.n	8009690 <__sinit+0xc>
 80096aa:	bf00      	nop
 80096ac:	080095f1 	.word	0x080095f1
 80096b0:	20000524 	.word	0x20000524

080096b4 <_fwalk_sglue>:
 80096b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096b8:	4607      	mov	r7, r0
 80096ba:	4688      	mov	r8, r1
 80096bc:	4614      	mov	r4, r2
 80096be:	2600      	movs	r6, #0
 80096c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80096c4:	f1b9 0901 	subs.w	r9, r9, #1
 80096c8:	d505      	bpl.n	80096d6 <_fwalk_sglue+0x22>
 80096ca:	6824      	ldr	r4, [r4, #0]
 80096cc:	2c00      	cmp	r4, #0
 80096ce:	d1f7      	bne.n	80096c0 <_fwalk_sglue+0xc>
 80096d0:	4630      	mov	r0, r6
 80096d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096d6:	89ab      	ldrh	r3, [r5, #12]
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d907      	bls.n	80096ec <_fwalk_sglue+0x38>
 80096dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80096e0:	3301      	adds	r3, #1
 80096e2:	d003      	beq.n	80096ec <_fwalk_sglue+0x38>
 80096e4:	4629      	mov	r1, r5
 80096e6:	4638      	mov	r0, r7
 80096e8:	47c0      	blx	r8
 80096ea:	4306      	orrs	r6, r0
 80096ec:	3568      	adds	r5, #104	@ 0x68
 80096ee:	e7e9      	b.n	80096c4 <_fwalk_sglue+0x10>

080096f0 <iprintf>:
 80096f0:	b40f      	push	{r0, r1, r2, r3}
 80096f2:	b507      	push	{r0, r1, r2, lr}
 80096f4:	4906      	ldr	r1, [pc, #24]	@ (8009710 <iprintf+0x20>)
 80096f6:	ab04      	add	r3, sp, #16
 80096f8:	6808      	ldr	r0, [r1, #0]
 80096fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80096fe:	6881      	ldr	r1, [r0, #8]
 8009700:	9301      	str	r3, [sp, #4]
 8009702:	f000 f8d1 	bl	80098a8 <_vfiprintf_r>
 8009706:	b003      	add	sp, #12
 8009708:	f85d eb04 	ldr.w	lr, [sp], #4
 800970c:	b004      	add	sp, #16
 800970e:	4770      	bx	lr
 8009710:	20000034 	.word	0x20000034

08009714 <_puts_r>:
 8009714:	6a03      	ldr	r3, [r0, #32]
 8009716:	b570      	push	{r4, r5, r6, lr}
 8009718:	4605      	mov	r5, r0
 800971a:	460e      	mov	r6, r1
 800971c:	6884      	ldr	r4, [r0, #8]
 800971e:	b90b      	cbnz	r3, 8009724 <_puts_r+0x10>
 8009720:	f7ff ffb0 	bl	8009684 <__sinit>
 8009724:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009726:	07db      	lsls	r3, r3, #31
 8009728:	d405      	bmi.n	8009736 <_puts_r+0x22>
 800972a:	89a3      	ldrh	r3, [r4, #12]
 800972c:	0598      	lsls	r0, r3, #22
 800972e:	d402      	bmi.n	8009736 <_puts_r+0x22>
 8009730:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009732:	f000 f880 	bl	8009836 <__retarget_lock_acquire_recursive>
 8009736:	89a3      	ldrh	r3, [r4, #12]
 8009738:	0719      	lsls	r1, r3, #28
 800973a:	d502      	bpl.n	8009742 <_puts_r+0x2e>
 800973c:	6923      	ldr	r3, [r4, #16]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d135      	bne.n	80097ae <_puts_r+0x9a>
 8009742:	4621      	mov	r1, r4
 8009744:	4628      	mov	r0, r5
 8009746:	f000 fd33 	bl	800a1b0 <__swsetup_r>
 800974a:	b380      	cbz	r0, 80097ae <_puts_r+0x9a>
 800974c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8009750:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009752:	07da      	lsls	r2, r3, #31
 8009754:	d405      	bmi.n	8009762 <_puts_r+0x4e>
 8009756:	89a3      	ldrh	r3, [r4, #12]
 8009758:	059b      	lsls	r3, r3, #22
 800975a:	d402      	bmi.n	8009762 <_puts_r+0x4e>
 800975c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800975e:	f000 f86b 	bl	8009838 <__retarget_lock_release_recursive>
 8009762:	4628      	mov	r0, r5
 8009764:	bd70      	pop	{r4, r5, r6, pc}
 8009766:	2b00      	cmp	r3, #0
 8009768:	da04      	bge.n	8009774 <_puts_r+0x60>
 800976a:	69a2      	ldr	r2, [r4, #24]
 800976c:	429a      	cmp	r2, r3
 800976e:	dc17      	bgt.n	80097a0 <_puts_r+0x8c>
 8009770:	290a      	cmp	r1, #10
 8009772:	d015      	beq.n	80097a0 <_puts_r+0x8c>
 8009774:	6823      	ldr	r3, [r4, #0]
 8009776:	1c5a      	adds	r2, r3, #1
 8009778:	6022      	str	r2, [r4, #0]
 800977a:	7019      	strb	r1, [r3, #0]
 800977c:	68a3      	ldr	r3, [r4, #8]
 800977e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009782:	3b01      	subs	r3, #1
 8009784:	60a3      	str	r3, [r4, #8]
 8009786:	2900      	cmp	r1, #0
 8009788:	d1ed      	bne.n	8009766 <_puts_r+0x52>
 800978a:	2b00      	cmp	r3, #0
 800978c:	da11      	bge.n	80097b2 <_puts_r+0x9e>
 800978e:	4622      	mov	r2, r4
 8009790:	210a      	movs	r1, #10
 8009792:	4628      	mov	r0, r5
 8009794:	f000 fccd 	bl	800a132 <__swbuf_r>
 8009798:	3001      	adds	r0, #1
 800979a:	d0d7      	beq.n	800974c <_puts_r+0x38>
 800979c:	250a      	movs	r5, #10
 800979e:	e7d7      	b.n	8009750 <_puts_r+0x3c>
 80097a0:	4622      	mov	r2, r4
 80097a2:	4628      	mov	r0, r5
 80097a4:	f000 fcc5 	bl	800a132 <__swbuf_r>
 80097a8:	3001      	adds	r0, #1
 80097aa:	d1e7      	bne.n	800977c <_puts_r+0x68>
 80097ac:	e7ce      	b.n	800974c <_puts_r+0x38>
 80097ae:	3e01      	subs	r6, #1
 80097b0:	e7e4      	b.n	800977c <_puts_r+0x68>
 80097b2:	6823      	ldr	r3, [r4, #0]
 80097b4:	1c5a      	adds	r2, r3, #1
 80097b6:	6022      	str	r2, [r4, #0]
 80097b8:	220a      	movs	r2, #10
 80097ba:	701a      	strb	r2, [r3, #0]
 80097bc:	e7ee      	b.n	800979c <_puts_r+0x88>
	...

080097c0 <puts>:
 80097c0:	4b02      	ldr	r3, [pc, #8]	@ (80097cc <puts+0xc>)
 80097c2:	4601      	mov	r1, r0
 80097c4:	6818      	ldr	r0, [r3, #0]
 80097c6:	f7ff bfa5 	b.w	8009714 <_puts_r>
 80097ca:	bf00      	nop
 80097cc:	20000034 	.word	0x20000034

080097d0 <memset>:
 80097d0:	4402      	add	r2, r0
 80097d2:	4603      	mov	r3, r0
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d100      	bne.n	80097da <memset+0xa>
 80097d8:	4770      	bx	lr
 80097da:	f803 1b01 	strb.w	r1, [r3], #1
 80097de:	e7f9      	b.n	80097d4 <memset+0x4>

080097e0 <__errno>:
 80097e0:	4b01      	ldr	r3, [pc, #4]	@ (80097e8 <__errno+0x8>)
 80097e2:	6818      	ldr	r0, [r3, #0]
 80097e4:	4770      	bx	lr
 80097e6:	bf00      	nop
 80097e8:	20000034 	.word	0x20000034

080097ec <__libc_init_array>:
 80097ec:	b570      	push	{r4, r5, r6, lr}
 80097ee:	4d0d      	ldr	r5, [pc, #52]	@ (8009824 <__libc_init_array+0x38>)
 80097f0:	2600      	movs	r6, #0
 80097f2:	4c0d      	ldr	r4, [pc, #52]	@ (8009828 <__libc_init_array+0x3c>)
 80097f4:	1b64      	subs	r4, r4, r5
 80097f6:	10a4      	asrs	r4, r4, #2
 80097f8:	42a6      	cmp	r6, r4
 80097fa:	d109      	bne.n	8009810 <__libc_init_array+0x24>
 80097fc:	4d0b      	ldr	r5, [pc, #44]	@ (800982c <__libc_init_array+0x40>)
 80097fe:	2600      	movs	r6, #0
 8009800:	4c0b      	ldr	r4, [pc, #44]	@ (8009830 <__libc_init_array+0x44>)
 8009802:	f000 fe5d 	bl	800a4c0 <_init>
 8009806:	1b64      	subs	r4, r4, r5
 8009808:	10a4      	asrs	r4, r4, #2
 800980a:	42a6      	cmp	r6, r4
 800980c:	d105      	bne.n	800981a <__libc_init_array+0x2e>
 800980e:	bd70      	pop	{r4, r5, r6, pc}
 8009810:	f855 3b04 	ldr.w	r3, [r5], #4
 8009814:	3601      	adds	r6, #1
 8009816:	4798      	blx	r3
 8009818:	e7ee      	b.n	80097f8 <__libc_init_array+0xc>
 800981a:	f855 3b04 	ldr.w	r3, [r5], #4
 800981e:	3601      	adds	r6, #1
 8009820:	4798      	blx	r3
 8009822:	e7f2      	b.n	800980a <__libc_init_array+0x1e>
 8009824:	0800a6c8 	.word	0x0800a6c8
 8009828:	0800a6c8 	.word	0x0800a6c8
 800982c:	0800a6c8 	.word	0x0800a6c8
 8009830:	0800a6cc 	.word	0x0800a6cc

08009834 <__retarget_lock_init_recursive>:
 8009834:	4770      	bx	lr

08009836 <__retarget_lock_acquire_recursive>:
 8009836:	4770      	bx	lr

08009838 <__retarget_lock_release_recursive>:
 8009838:	4770      	bx	lr

0800983a <memcpy>:
 800983a:	440a      	add	r2, r1
 800983c:	1e43      	subs	r3, r0, #1
 800983e:	4291      	cmp	r1, r2
 8009840:	d100      	bne.n	8009844 <memcpy+0xa>
 8009842:	4770      	bx	lr
 8009844:	b510      	push	{r4, lr}
 8009846:	f811 4b01 	ldrb.w	r4, [r1], #1
 800984a:	4291      	cmp	r1, r2
 800984c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009850:	d1f9      	bne.n	8009846 <memcpy+0xc>
 8009852:	bd10      	pop	{r4, pc}

08009854 <__sfputc_r>:
 8009854:	6893      	ldr	r3, [r2, #8]
 8009856:	3b01      	subs	r3, #1
 8009858:	2b00      	cmp	r3, #0
 800985a:	b410      	push	{r4}
 800985c:	6093      	str	r3, [r2, #8]
 800985e:	da08      	bge.n	8009872 <__sfputc_r+0x1e>
 8009860:	6994      	ldr	r4, [r2, #24]
 8009862:	42a3      	cmp	r3, r4
 8009864:	db01      	blt.n	800986a <__sfputc_r+0x16>
 8009866:	290a      	cmp	r1, #10
 8009868:	d103      	bne.n	8009872 <__sfputc_r+0x1e>
 800986a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800986e:	f000 bc60 	b.w	800a132 <__swbuf_r>
 8009872:	6813      	ldr	r3, [r2, #0]
 8009874:	1c58      	adds	r0, r3, #1
 8009876:	6010      	str	r0, [r2, #0]
 8009878:	4608      	mov	r0, r1
 800987a:	7019      	strb	r1, [r3, #0]
 800987c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009880:	4770      	bx	lr

08009882 <__sfputs_r>:
 8009882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009884:	4606      	mov	r6, r0
 8009886:	460f      	mov	r7, r1
 8009888:	4614      	mov	r4, r2
 800988a:	18d5      	adds	r5, r2, r3
 800988c:	42ac      	cmp	r4, r5
 800988e:	d101      	bne.n	8009894 <__sfputs_r+0x12>
 8009890:	2000      	movs	r0, #0
 8009892:	e007      	b.n	80098a4 <__sfputs_r+0x22>
 8009894:	463a      	mov	r2, r7
 8009896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800989a:	4630      	mov	r0, r6
 800989c:	f7ff ffda 	bl	8009854 <__sfputc_r>
 80098a0:	1c43      	adds	r3, r0, #1
 80098a2:	d1f3      	bne.n	800988c <__sfputs_r+0xa>
 80098a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080098a8 <_vfiprintf_r>:
 80098a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ac:	460d      	mov	r5, r1
 80098ae:	b09d      	sub	sp, #116	@ 0x74
 80098b0:	4614      	mov	r4, r2
 80098b2:	4698      	mov	r8, r3
 80098b4:	4606      	mov	r6, r0
 80098b6:	b118      	cbz	r0, 80098c0 <_vfiprintf_r+0x18>
 80098b8:	6a03      	ldr	r3, [r0, #32]
 80098ba:	b90b      	cbnz	r3, 80098c0 <_vfiprintf_r+0x18>
 80098bc:	f7ff fee2 	bl	8009684 <__sinit>
 80098c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80098c2:	07d9      	lsls	r1, r3, #31
 80098c4:	d405      	bmi.n	80098d2 <_vfiprintf_r+0x2a>
 80098c6:	89ab      	ldrh	r3, [r5, #12]
 80098c8:	059a      	lsls	r2, r3, #22
 80098ca:	d402      	bmi.n	80098d2 <_vfiprintf_r+0x2a>
 80098cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80098ce:	f7ff ffb2 	bl	8009836 <__retarget_lock_acquire_recursive>
 80098d2:	89ab      	ldrh	r3, [r5, #12]
 80098d4:	071b      	lsls	r3, r3, #28
 80098d6:	d501      	bpl.n	80098dc <_vfiprintf_r+0x34>
 80098d8:	692b      	ldr	r3, [r5, #16]
 80098da:	b99b      	cbnz	r3, 8009904 <_vfiprintf_r+0x5c>
 80098dc:	4629      	mov	r1, r5
 80098de:	4630      	mov	r0, r6
 80098e0:	f000 fc66 	bl	800a1b0 <__swsetup_r>
 80098e4:	b170      	cbz	r0, 8009904 <_vfiprintf_r+0x5c>
 80098e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80098e8:	07dc      	lsls	r4, r3, #31
 80098ea:	d504      	bpl.n	80098f6 <_vfiprintf_r+0x4e>
 80098ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80098f0:	b01d      	add	sp, #116	@ 0x74
 80098f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f6:	89ab      	ldrh	r3, [r5, #12]
 80098f8:	0598      	lsls	r0, r3, #22
 80098fa:	d4f7      	bmi.n	80098ec <_vfiprintf_r+0x44>
 80098fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80098fe:	f7ff ff9b 	bl	8009838 <__retarget_lock_release_recursive>
 8009902:	e7f3      	b.n	80098ec <_vfiprintf_r+0x44>
 8009904:	2300      	movs	r3, #0
 8009906:	f8cd 800c 	str.w	r8, [sp, #12]
 800990a:	f04f 0901 	mov.w	r9, #1
 800990e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8009ac4 <_vfiprintf_r+0x21c>
 8009912:	9309      	str	r3, [sp, #36]	@ 0x24
 8009914:	2320      	movs	r3, #32
 8009916:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800991a:	2330      	movs	r3, #48	@ 0x30
 800991c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009920:	4623      	mov	r3, r4
 8009922:	469a      	mov	sl, r3
 8009924:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009928:	b10a      	cbz	r2, 800992e <_vfiprintf_r+0x86>
 800992a:	2a25      	cmp	r2, #37	@ 0x25
 800992c:	d1f9      	bne.n	8009922 <_vfiprintf_r+0x7a>
 800992e:	ebba 0b04 	subs.w	fp, sl, r4
 8009932:	d00b      	beq.n	800994c <_vfiprintf_r+0xa4>
 8009934:	465b      	mov	r3, fp
 8009936:	4622      	mov	r2, r4
 8009938:	4629      	mov	r1, r5
 800993a:	4630      	mov	r0, r6
 800993c:	f7ff ffa1 	bl	8009882 <__sfputs_r>
 8009940:	3001      	adds	r0, #1
 8009942:	f000 80a7 	beq.w	8009a94 <_vfiprintf_r+0x1ec>
 8009946:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009948:	445a      	add	r2, fp
 800994a:	9209      	str	r2, [sp, #36]	@ 0x24
 800994c:	f89a 3000 	ldrb.w	r3, [sl]
 8009950:	2b00      	cmp	r3, #0
 8009952:	f000 809f 	beq.w	8009a94 <_vfiprintf_r+0x1ec>
 8009956:	2300      	movs	r3, #0
 8009958:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800995c:	f10a 0a01 	add.w	sl, sl, #1
 8009960:	9304      	str	r3, [sp, #16]
 8009962:	9307      	str	r3, [sp, #28]
 8009964:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009968:	931a      	str	r3, [sp, #104]	@ 0x68
 800996a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800996e:	4654      	mov	r4, sl
 8009970:	2205      	movs	r2, #5
 8009972:	4854      	ldr	r0, [pc, #336]	@ (8009ac4 <_vfiprintf_r+0x21c>)
 8009974:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009978:	f000 fd4a 	bl	800a410 <memchr>
 800997c:	9a04      	ldr	r2, [sp, #16]
 800997e:	b9d8      	cbnz	r0, 80099b8 <_vfiprintf_r+0x110>
 8009980:	06d1      	lsls	r1, r2, #27
 8009982:	bf44      	itt	mi
 8009984:	2320      	movmi	r3, #32
 8009986:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800998a:	0713      	lsls	r3, r2, #28
 800998c:	bf44      	itt	mi
 800998e:	232b      	movmi	r3, #43	@ 0x2b
 8009990:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009994:	f89a 3000 	ldrb.w	r3, [sl]
 8009998:	2b2a      	cmp	r3, #42	@ 0x2a
 800999a:	d015      	beq.n	80099c8 <_vfiprintf_r+0x120>
 800999c:	9a07      	ldr	r2, [sp, #28]
 800999e:	4654      	mov	r4, sl
 80099a0:	2000      	movs	r0, #0
 80099a2:	f04f 0c0a 	mov.w	ip, #10
 80099a6:	4621      	mov	r1, r4
 80099a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099ac:	3b30      	subs	r3, #48	@ 0x30
 80099ae:	2b09      	cmp	r3, #9
 80099b0:	d94b      	bls.n	8009a4a <_vfiprintf_r+0x1a2>
 80099b2:	b1b0      	cbz	r0, 80099e2 <_vfiprintf_r+0x13a>
 80099b4:	9207      	str	r2, [sp, #28]
 80099b6:	e014      	b.n	80099e2 <_vfiprintf_r+0x13a>
 80099b8:	eba0 0308 	sub.w	r3, r0, r8
 80099bc:	46a2      	mov	sl, r4
 80099be:	fa09 f303 	lsl.w	r3, r9, r3
 80099c2:	4313      	orrs	r3, r2
 80099c4:	9304      	str	r3, [sp, #16]
 80099c6:	e7d2      	b.n	800996e <_vfiprintf_r+0xc6>
 80099c8:	9b03      	ldr	r3, [sp, #12]
 80099ca:	1d19      	adds	r1, r3, #4
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	9103      	str	r1, [sp, #12]
 80099d2:	bfbb      	ittet	lt
 80099d4:	425b      	neglt	r3, r3
 80099d6:	f042 0202 	orrlt.w	r2, r2, #2
 80099da:	9307      	strge	r3, [sp, #28]
 80099dc:	9307      	strlt	r3, [sp, #28]
 80099de:	bfb8      	it	lt
 80099e0:	9204      	strlt	r2, [sp, #16]
 80099e2:	7823      	ldrb	r3, [r4, #0]
 80099e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80099e6:	d10a      	bne.n	80099fe <_vfiprintf_r+0x156>
 80099e8:	7863      	ldrb	r3, [r4, #1]
 80099ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80099ec:	d132      	bne.n	8009a54 <_vfiprintf_r+0x1ac>
 80099ee:	9b03      	ldr	r3, [sp, #12]
 80099f0:	3402      	adds	r4, #2
 80099f2:	1d1a      	adds	r2, r3, #4
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80099fa:	9203      	str	r2, [sp, #12]
 80099fc:	9305      	str	r3, [sp, #20]
 80099fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009ad4 <_vfiprintf_r+0x22c>
 8009a02:	2203      	movs	r2, #3
 8009a04:	7821      	ldrb	r1, [r4, #0]
 8009a06:	4650      	mov	r0, sl
 8009a08:	f000 fd02 	bl	800a410 <memchr>
 8009a0c:	b138      	cbz	r0, 8009a1e <_vfiprintf_r+0x176>
 8009a0e:	eba0 000a 	sub.w	r0, r0, sl
 8009a12:	2240      	movs	r2, #64	@ 0x40
 8009a14:	9b04      	ldr	r3, [sp, #16]
 8009a16:	3401      	adds	r4, #1
 8009a18:	4082      	lsls	r2, r0
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	9304      	str	r3, [sp, #16]
 8009a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a22:	2206      	movs	r2, #6
 8009a24:	4828      	ldr	r0, [pc, #160]	@ (8009ac8 <_vfiprintf_r+0x220>)
 8009a26:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009a2a:	f000 fcf1 	bl	800a410 <memchr>
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	d03f      	beq.n	8009ab2 <_vfiprintf_r+0x20a>
 8009a32:	4b26      	ldr	r3, [pc, #152]	@ (8009acc <_vfiprintf_r+0x224>)
 8009a34:	bb1b      	cbnz	r3, 8009a7e <_vfiprintf_r+0x1d6>
 8009a36:	9b03      	ldr	r3, [sp, #12]
 8009a38:	3307      	adds	r3, #7
 8009a3a:	f023 0307 	bic.w	r3, r3, #7
 8009a3e:	3308      	adds	r3, #8
 8009a40:	9303      	str	r3, [sp, #12]
 8009a42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a44:	443b      	add	r3, r7
 8009a46:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a48:	e76a      	b.n	8009920 <_vfiprintf_r+0x78>
 8009a4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a4e:	460c      	mov	r4, r1
 8009a50:	2001      	movs	r0, #1
 8009a52:	e7a8      	b.n	80099a6 <_vfiprintf_r+0xfe>
 8009a54:	2300      	movs	r3, #0
 8009a56:	3401      	adds	r4, #1
 8009a58:	f04f 0c0a 	mov.w	ip, #10
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	9305      	str	r3, [sp, #20]
 8009a60:	4620      	mov	r0, r4
 8009a62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a66:	3a30      	subs	r2, #48	@ 0x30
 8009a68:	2a09      	cmp	r2, #9
 8009a6a:	d903      	bls.n	8009a74 <_vfiprintf_r+0x1cc>
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d0c6      	beq.n	80099fe <_vfiprintf_r+0x156>
 8009a70:	9105      	str	r1, [sp, #20]
 8009a72:	e7c4      	b.n	80099fe <_vfiprintf_r+0x156>
 8009a74:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a78:	4604      	mov	r4, r0
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e7f0      	b.n	8009a60 <_vfiprintf_r+0x1b8>
 8009a7e:	ab03      	add	r3, sp, #12
 8009a80:	462a      	mov	r2, r5
 8009a82:	a904      	add	r1, sp, #16
 8009a84:	4630      	mov	r0, r6
 8009a86:	9300      	str	r3, [sp, #0]
 8009a88:	4b11      	ldr	r3, [pc, #68]	@ (8009ad0 <_vfiprintf_r+0x228>)
 8009a8a:	f3af 8000 	nop.w
 8009a8e:	4607      	mov	r7, r0
 8009a90:	1c78      	adds	r0, r7, #1
 8009a92:	d1d6      	bne.n	8009a42 <_vfiprintf_r+0x19a>
 8009a94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a96:	07d9      	lsls	r1, r3, #31
 8009a98:	d405      	bmi.n	8009aa6 <_vfiprintf_r+0x1fe>
 8009a9a:	89ab      	ldrh	r3, [r5, #12]
 8009a9c:	059a      	lsls	r2, r3, #22
 8009a9e:	d402      	bmi.n	8009aa6 <_vfiprintf_r+0x1fe>
 8009aa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009aa2:	f7ff fec9 	bl	8009838 <__retarget_lock_release_recursive>
 8009aa6:	89ab      	ldrh	r3, [r5, #12]
 8009aa8:	065b      	lsls	r3, r3, #25
 8009aaa:	f53f af1f 	bmi.w	80098ec <_vfiprintf_r+0x44>
 8009aae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ab0:	e71e      	b.n	80098f0 <_vfiprintf_r+0x48>
 8009ab2:	ab03      	add	r3, sp, #12
 8009ab4:	462a      	mov	r2, r5
 8009ab6:	a904      	add	r1, sp, #16
 8009ab8:	4630      	mov	r0, r6
 8009aba:	9300      	str	r3, [sp, #0]
 8009abc:	4b04      	ldr	r3, [pc, #16]	@ (8009ad0 <_vfiprintf_r+0x228>)
 8009abe:	f000 f91f 	bl	8009d00 <_printf_i>
 8009ac2:	e7e4      	b.n	8009a8e <_vfiprintf_r+0x1e6>
 8009ac4:	0800a68c 	.word	0x0800a68c
 8009ac8:	0800a696 	.word	0x0800a696
 8009acc:	00000000 	.word	0x00000000
 8009ad0:	08009883 	.word	0x08009883
 8009ad4:	0800a692 	.word	0x0800a692

08009ad8 <sbrk_aligned>:
 8009ad8:	b570      	push	{r4, r5, r6, lr}
 8009ada:	4e0f      	ldr	r6, [pc, #60]	@ (8009b18 <sbrk_aligned+0x40>)
 8009adc:	460c      	mov	r4, r1
 8009ade:	4605      	mov	r5, r0
 8009ae0:	6831      	ldr	r1, [r6, #0]
 8009ae2:	b911      	cbnz	r1, 8009aea <sbrk_aligned+0x12>
 8009ae4:	f000 fc50 	bl	800a388 <_sbrk_r>
 8009ae8:	6030      	str	r0, [r6, #0]
 8009aea:	4621      	mov	r1, r4
 8009aec:	4628      	mov	r0, r5
 8009aee:	f000 fc4b 	bl	800a388 <_sbrk_r>
 8009af2:	1c43      	adds	r3, r0, #1
 8009af4:	d103      	bne.n	8009afe <sbrk_aligned+0x26>
 8009af6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009afa:	4620      	mov	r0, r4
 8009afc:	bd70      	pop	{r4, r5, r6, pc}
 8009afe:	1cc4      	adds	r4, r0, #3
 8009b00:	f024 0403 	bic.w	r4, r4, #3
 8009b04:	42a0      	cmp	r0, r4
 8009b06:	d0f8      	beq.n	8009afa <sbrk_aligned+0x22>
 8009b08:	1a21      	subs	r1, r4, r0
 8009b0a:	4628      	mov	r0, r5
 8009b0c:	f000 fc3c 	bl	800a388 <_sbrk_r>
 8009b10:	3001      	adds	r0, #1
 8009b12:	d1f2      	bne.n	8009afa <sbrk_aligned+0x22>
 8009b14:	e7ef      	b.n	8009af6 <sbrk_aligned+0x1e>
 8009b16:	bf00      	nop
 8009b18:	2000052c 	.word	0x2000052c

08009b1c <_malloc_r>:
 8009b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b20:	1ccd      	adds	r5, r1, #3
 8009b22:	4606      	mov	r6, r0
 8009b24:	f025 0503 	bic.w	r5, r5, #3
 8009b28:	3508      	adds	r5, #8
 8009b2a:	2d0c      	cmp	r5, #12
 8009b2c:	bf38      	it	cc
 8009b2e:	250c      	movcc	r5, #12
 8009b30:	2d00      	cmp	r5, #0
 8009b32:	db01      	blt.n	8009b38 <_malloc_r+0x1c>
 8009b34:	42a9      	cmp	r1, r5
 8009b36:	d904      	bls.n	8009b42 <_malloc_r+0x26>
 8009b38:	230c      	movs	r3, #12
 8009b3a:	6033      	str	r3, [r6, #0]
 8009b3c:	2000      	movs	r0, #0
 8009b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009c18 <_malloc_r+0xfc>
 8009b46:	f000 faa5 	bl	800a094 <__malloc_lock>
 8009b4a:	f8d8 3000 	ldr.w	r3, [r8]
 8009b4e:	461c      	mov	r4, r3
 8009b50:	bb44      	cbnz	r4, 8009ba4 <_malloc_r+0x88>
 8009b52:	4629      	mov	r1, r5
 8009b54:	4630      	mov	r0, r6
 8009b56:	f7ff ffbf 	bl	8009ad8 <sbrk_aligned>
 8009b5a:	1c43      	adds	r3, r0, #1
 8009b5c:	4604      	mov	r4, r0
 8009b5e:	d158      	bne.n	8009c12 <_malloc_r+0xf6>
 8009b60:	f8d8 4000 	ldr.w	r4, [r8]
 8009b64:	4627      	mov	r7, r4
 8009b66:	2f00      	cmp	r7, #0
 8009b68:	d143      	bne.n	8009bf2 <_malloc_r+0xd6>
 8009b6a:	2c00      	cmp	r4, #0
 8009b6c:	d04b      	beq.n	8009c06 <_malloc_r+0xea>
 8009b6e:	6823      	ldr	r3, [r4, #0]
 8009b70:	4639      	mov	r1, r7
 8009b72:	4630      	mov	r0, r6
 8009b74:	eb04 0903 	add.w	r9, r4, r3
 8009b78:	f000 fc06 	bl	800a388 <_sbrk_r>
 8009b7c:	4581      	cmp	r9, r0
 8009b7e:	d142      	bne.n	8009c06 <_malloc_r+0xea>
 8009b80:	6821      	ldr	r1, [r4, #0]
 8009b82:	4630      	mov	r0, r6
 8009b84:	1a6d      	subs	r5, r5, r1
 8009b86:	4629      	mov	r1, r5
 8009b88:	f7ff ffa6 	bl	8009ad8 <sbrk_aligned>
 8009b8c:	3001      	adds	r0, #1
 8009b8e:	d03a      	beq.n	8009c06 <_malloc_r+0xea>
 8009b90:	6823      	ldr	r3, [r4, #0]
 8009b92:	442b      	add	r3, r5
 8009b94:	6023      	str	r3, [r4, #0]
 8009b96:	f8d8 3000 	ldr.w	r3, [r8]
 8009b9a:	685a      	ldr	r2, [r3, #4]
 8009b9c:	bb62      	cbnz	r2, 8009bf8 <_malloc_r+0xdc>
 8009b9e:	f8c8 7000 	str.w	r7, [r8]
 8009ba2:	e00f      	b.n	8009bc4 <_malloc_r+0xa8>
 8009ba4:	6822      	ldr	r2, [r4, #0]
 8009ba6:	1b52      	subs	r2, r2, r5
 8009ba8:	d420      	bmi.n	8009bec <_malloc_r+0xd0>
 8009baa:	2a0b      	cmp	r2, #11
 8009bac:	d917      	bls.n	8009bde <_malloc_r+0xc2>
 8009bae:	1961      	adds	r1, r4, r5
 8009bb0:	42a3      	cmp	r3, r4
 8009bb2:	6025      	str	r5, [r4, #0]
 8009bb4:	bf18      	it	ne
 8009bb6:	6059      	strne	r1, [r3, #4]
 8009bb8:	6863      	ldr	r3, [r4, #4]
 8009bba:	bf08      	it	eq
 8009bbc:	f8c8 1000 	streq.w	r1, [r8]
 8009bc0:	5162      	str	r2, [r4, r5]
 8009bc2:	604b      	str	r3, [r1, #4]
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	f000 fa6b 	bl	800a0a0 <__malloc_unlock>
 8009bca:	f104 000b 	add.w	r0, r4, #11
 8009bce:	1d23      	adds	r3, r4, #4
 8009bd0:	f020 0007 	bic.w	r0, r0, #7
 8009bd4:	1ac2      	subs	r2, r0, r3
 8009bd6:	bf1c      	itt	ne
 8009bd8:	1a1b      	subne	r3, r3, r0
 8009bda:	50a3      	strne	r3, [r4, r2]
 8009bdc:	e7af      	b.n	8009b3e <_malloc_r+0x22>
 8009bde:	6862      	ldr	r2, [r4, #4]
 8009be0:	42a3      	cmp	r3, r4
 8009be2:	bf0c      	ite	eq
 8009be4:	f8c8 2000 	streq.w	r2, [r8]
 8009be8:	605a      	strne	r2, [r3, #4]
 8009bea:	e7eb      	b.n	8009bc4 <_malloc_r+0xa8>
 8009bec:	4623      	mov	r3, r4
 8009bee:	6864      	ldr	r4, [r4, #4]
 8009bf0:	e7ae      	b.n	8009b50 <_malloc_r+0x34>
 8009bf2:	463c      	mov	r4, r7
 8009bf4:	687f      	ldr	r7, [r7, #4]
 8009bf6:	e7b6      	b.n	8009b66 <_malloc_r+0x4a>
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	42a3      	cmp	r3, r4
 8009bfe:	d1fb      	bne.n	8009bf8 <_malloc_r+0xdc>
 8009c00:	2300      	movs	r3, #0
 8009c02:	6053      	str	r3, [r2, #4]
 8009c04:	e7de      	b.n	8009bc4 <_malloc_r+0xa8>
 8009c06:	230c      	movs	r3, #12
 8009c08:	4630      	mov	r0, r6
 8009c0a:	6033      	str	r3, [r6, #0]
 8009c0c:	f000 fa48 	bl	800a0a0 <__malloc_unlock>
 8009c10:	e794      	b.n	8009b3c <_malloc_r+0x20>
 8009c12:	6005      	str	r5, [r0, #0]
 8009c14:	e7d6      	b.n	8009bc4 <_malloc_r+0xa8>
 8009c16:	bf00      	nop
 8009c18:	20000530 	.word	0x20000530

08009c1c <_printf_common>:
 8009c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c20:	4616      	mov	r6, r2
 8009c22:	4698      	mov	r8, r3
 8009c24:	688a      	ldr	r2, [r1, #8]
 8009c26:	4607      	mov	r7, r0
 8009c28:	690b      	ldr	r3, [r1, #16]
 8009c2a:	460c      	mov	r4, r1
 8009c2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009c30:	4293      	cmp	r3, r2
 8009c32:	bfb8      	it	lt
 8009c34:	4613      	movlt	r3, r2
 8009c36:	6033      	str	r3, [r6, #0]
 8009c38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009c3c:	b10a      	cbz	r2, 8009c42 <_printf_common+0x26>
 8009c3e:	3301      	adds	r3, #1
 8009c40:	6033      	str	r3, [r6, #0]
 8009c42:	6823      	ldr	r3, [r4, #0]
 8009c44:	0699      	lsls	r1, r3, #26
 8009c46:	bf42      	ittt	mi
 8009c48:	6833      	ldrmi	r3, [r6, #0]
 8009c4a:	3302      	addmi	r3, #2
 8009c4c:	6033      	strmi	r3, [r6, #0]
 8009c4e:	6825      	ldr	r5, [r4, #0]
 8009c50:	f015 0506 	ands.w	r5, r5, #6
 8009c54:	d106      	bne.n	8009c64 <_printf_common+0x48>
 8009c56:	f104 0a19 	add.w	sl, r4, #25
 8009c5a:	68e3      	ldr	r3, [r4, #12]
 8009c5c:	6832      	ldr	r2, [r6, #0]
 8009c5e:	1a9b      	subs	r3, r3, r2
 8009c60:	42ab      	cmp	r3, r5
 8009c62:	dc2b      	bgt.n	8009cbc <_printf_common+0xa0>
 8009c64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009c68:	6822      	ldr	r2, [r4, #0]
 8009c6a:	3b00      	subs	r3, #0
 8009c6c:	bf18      	it	ne
 8009c6e:	2301      	movne	r3, #1
 8009c70:	0692      	lsls	r2, r2, #26
 8009c72:	d430      	bmi.n	8009cd6 <_printf_common+0xba>
 8009c74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009c78:	4641      	mov	r1, r8
 8009c7a:	4638      	mov	r0, r7
 8009c7c:	47c8      	blx	r9
 8009c7e:	3001      	adds	r0, #1
 8009c80:	d023      	beq.n	8009cca <_printf_common+0xae>
 8009c82:	6823      	ldr	r3, [r4, #0]
 8009c84:	341a      	adds	r4, #26
 8009c86:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8009c8a:	f003 0306 	and.w	r3, r3, #6
 8009c8e:	2b04      	cmp	r3, #4
 8009c90:	bf0a      	itet	eq
 8009c92:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8009c96:	2500      	movne	r5, #0
 8009c98:	6833      	ldreq	r3, [r6, #0]
 8009c9a:	f04f 0600 	mov.w	r6, #0
 8009c9e:	bf08      	it	eq
 8009ca0:	1aed      	subeq	r5, r5, r3
 8009ca2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009ca6:	bf08      	it	eq
 8009ca8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009cac:	4293      	cmp	r3, r2
 8009cae:	bfc4      	itt	gt
 8009cb0:	1a9b      	subgt	r3, r3, r2
 8009cb2:	18ed      	addgt	r5, r5, r3
 8009cb4:	42b5      	cmp	r5, r6
 8009cb6:	d11a      	bne.n	8009cee <_printf_common+0xd2>
 8009cb8:	2000      	movs	r0, #0
 8009cba:	e008      	b.n	8009cce <_printf_common+0xb2>
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	4652      	mov	r2, sl
 8009cc0:	4641      	mov	r1, r8
 8009cc2:	4638      	mov	r0, r7
 8009cc4:	47c8      	blx	r9
 8009cc6:	3001      	adds	r0, #1
 8009cc8:	d103      	bne.n	8009cd2 <_printf_common+0xb6>
 8009cca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cd2:	3501      	adds	r5, #1
 8009cd4:	e7c1      	b.n	8009c5a <_printf_common+0x3e>
 8009cd6:	18e1      	adds	r1, r4, r3
 8009cd8:	1c5a      	adds	r2, r3, #1
 8009cda:	2030      	movs	r0, #48	@ 0x30
 8009cdc:	3302      	adds	r3, #2
 8009cde:	4422      	add	r2, r4
 8009ce0:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009ce4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009ce8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009cec:	e7c2      	b.n	8009c74 <_printf_common+0x58>
 8009cee:	2301      	movs	r3, #1
 8009cf0:	4622      	mov	r2, r4
 8009cf2:	4641      	mov	r1, r8
 8009cf4:	4638      	mov	r0, r7
 8009cf6:	47c8      	blx	r9
 8009cf8:	3001      	adds	r0, #1
 8009cfa:	d0e6      	beq.n	8009cca <_printf_common+0xae>
 8009cfc:	3601      	adds	r6, #1
 8009cfe:	e7d9      	b.n	8009cb4 <_printf_common+0x98>

08009d00 <_printf_i>:
 8009d00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d04:	7e0f      	ldrb	r7, [r1, #24]
 8009d06:	4691      	mov	r9, r2
 8009d08:	4680      	mov	r8, r0
 8009d0a:	460c      	mov	r4, r1
 8009d0c:	2f78      	cmp	r7, #120	@ 0x78
 8009d0e:	469a      	mov	sl, r3
 8009d10:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009d12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009d16:	d807      	bhi.n	8009d28 <_printf_i+0x28>
 8009d18:	2f62      	cmp	r7, #98	@ 0x62
 8009d1a:	d80a      	bhi.n	8009d32 <_printf_i+0x32>
 8009d1c:	2f00      	cmp	r7, #0
 8009d1e:	f000 80d1 	beq.w	8009ec4 <_printf_i+0x1c4>
 8009d22:	2f58      	cmp	r7, #88	@ 0x58
 8009d24:	f000 80b8 	beq.w	8009e98 <_printf_i+0x198>
 8009d28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009d30:	e03a      	b.n	8009da8 <_printf_i+0xa8>
 8009d32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009d36:	2b15      	cmp	r3, #21
 8009d38:	d8f6      	bhi.n	8009d28 <_printf_i+0x28>
 8009d3a:	a101      	add	r1, pc, #4	@ (adr r1, 8009d40 <_printf_i+0x40>)
 8009d3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d40:	08009d99 	.word	0x08009d99
 8009d44:	08009dad 	.word	0x08009dad
 8009d48:	08009d29 	.word	0x08009d29
 8009d4c:	08009d29 	.word	0x08009d29
 8009d50:	08009d29 	.word	0x08009d29
 8009d54:	08009d29 	.word	0x08009d29
 8009d58:	08009dad 	.word	0x08009dad
 8009d5c:	08009d29 	.word	0x08009d29
 8009d60:	08009d29 	.word	0x08009d29
 8009d64:	08009d29 	.word	0x08009d29
 8009d68:	08009d29 	.word	0x08009d29
 8009d6c:	08009eab 	.word	0x08009eab
 8009d70:	08009dd7 	.word	0x08009dd7
 8009d74:	08009e65 	.word	0x08009e65
 8009d78:	08009d29 	.word	0x08009d29
 8009d7c:	08009d29 	.word	0x08009d29
 8009d80:	08009ecd 	.word	0x08009ecd
 8009d84:	08009d29 	.word	0x08009d29
 8009d88:	08009dd7 	.word	0x08009dd7
 8009d8c:	08009d29 	.word	0x08009d29
 8009d90:	08009d29 	.word	0x08009d29
 8009d94:	08009e6d 	.word	0x08009e6d
 8009d98:	6833      	ldr	r3, [r6, #0]
 8009d9a:	1d1a      	adds	r2, r3, #4
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	6032      	str	r2, [r6, #0]
 8009da0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009da4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009da8:	2301      	movs	r3, #1
 8009daa:	e09c      	b.n	8009ee6 <_printf_i+0x1e6>
 8009dac:	6833      	ldr	r3, [r6, #0]
 8009dae:	6820      	ldr	r0, [r4, #0]
 8009db0:	1d19      	adds	r1, r3, #4
 8009db2:	6031      	str	r1, [r6, #0]
 8009db4:	0606      	lsls	r6, r0, #24
 8009db6:	d501      	bpl.n	8009dbc <_printf_i+0xbc>
 8009db8:	681d      	ldr	r5, [r3, #0]
 8009dba:	e003      	b.n	8009dc4 <_printf_i+0xc4>
 8009dbc:	0645      	lsls	r5, r0, #25
 8009dbe:	d5fb      	bpl.n	8009db8 <_printf_i+0xb8>
 8009dc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009dc4:	2d00      	cmp	r5, #0
 8009dc6:	da03      	bge.n	8009dd0 <_printf_i+0xd0>
 8009dc8:	232d      	movs	r3, #45	@ 0x2d
 8009dca:	426d      	negs	r5, r5
 8009dcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009dd0:	4858      	ldr	r0, [pc, #352]	@ (8009f34 <_printf_i+0x234>)
 8009dd2:	230a      	movs	r3, #10
 8009dd4:	e011      	b.n	8009dfa <_printf_i+0xfa>
 8009dd6:	6821      	ldr	r1, [r4, #0]
 8009dd8:	6833      	ldr	r3, [r6, #0]
 8009dda:	0608      	lsls	r0, r1, #24
 8009ddc:	f853 5b04 	ldr.w	r5, [r3], #4
 8009de0:	d402      	bmi.n	8009de8 <_printf_i+0xe8>
 8009de2:	0649      	lsls	r1, r1, #25
 8009de4:	bf48      	it	mi
 8009de6:	b2ad      	uxthmi	r5, r5
 8009de8:	2f6f      	cmp	r7, #111	@ 0x6f
 8009dea:	6033      	str	r3, [r6, #0]
 8009dec:	4851      	ldr	r0, [pc, #324]	@ (8009f34 <_printf_i+0x234>)
 8009dee:	bf14      	ite	ne
 8009df0:	230a      	movne	r3, #10
 8009df2:	2308      	moveq	r3, #8
 8009df4:	2100      	movs	r1, #0
 8009df6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009dfa:	6866      	ldr	r6, [r4, #4]
 8009dfc:	2e00      	cmp	r6, #0
 8009dfe:	60a6      	str	r6, [r4, #8]
 8009e00:	db05      	blt.n	8009e0e <_printf_i+0x10e>
 8009e02:	6821      	ldr	r1, [r4, #0]
 8009e04:	432e      	orrs	r6, r5
 8009e06:	f021 0104 	bic.w	r1, r1, #4
 8009e0a:	6021      	str	r1, [r4, #0]
 8009e0c:	d04b      	beq.n	8009ea6 <_printf_i+0x1a6>
 8009e0e:	4616      	mov	r6, r2
 8009e10:	fbb5 f1f3 	udiv	r1, r5, r3
 8009e14:	fb03 5711 	mls	r7, r3, r1, r5
 8009e18:	5dc7      	ldrb	r7, [r0, r7]
 8009e1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009e1e:	462f      	mov	r7, r5
 8009e20:	460d      	mov	r5, r1
 8009e22:	42bb      	cmp	r3, r7
 8009e24:	d9f4      	bls.n	8009e10 <_printf_i+0x110>
 8009e26:	2b08      	cmp	r3, #8
 8009e28:	d10b      	bne.n	8009e42 <_printf_i+0x142>
 8009e2a:	6823      	ldr	r3, [r4, #0]
 8009e2c:	07df      	lsls	r7, r3, #31
 8009e2e:	d508      	bpl.n	8009e42 <_printf_i+0x142>
 8009e30:	6923      	ldr	r3, [r4, #16]
 8009e32:	6861      	ldr	r1, [r4, #4]
 8009e34:	4299      	cmp	r1, r3
 8009e36:	bfde      	ittt	le
 8009e38:	2330      	movle	r3, #48	@ 0x30
 8009e3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009e3e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009e42:	1b92      	subs	r2, r2, r6
 8009e44:	6122      	str	r2, [r4, #16]
 8009e46:	464b      	mov	r3, r9
 8009e48:	aa03      	add	r2, sp, #12
 8009e4a:	4621      	mov	r1, r4
 8009e4c:	4640      	mov	r0, r8
 8009e4e:	f8cd a000 	str.w	sl, [sp]
 8009e52:	f7ff fee3 	bl	8009c1c <_printf_common>
 8009e56:	3001      	adds	r0, #1
 8009e58:	d14a      	bne.n	8009ef0 <_printf_i+0x1f0>
 8009e5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e5e:	b004      	add	sp, #16
 8009e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e64:	6823      	ldr	r3, [r4, #0]
 8009e66:	f043 0320 	orr.w	r3, r3, #32
 8009e6a:	6023      	str	r3, [r4, #0]
 8009e6c:	2778      	movs	r7, #120	@ 0x78
 8009e6e:	4832      	ldr	r0, [pc, #200]	@ (8009f38 <_printf_i+0x238>)
 8009e70:	6823      	ldr	r3, [r4, #0]
 8009e72:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009e76:	061f      	lsls	r7, r3, #24
 8009e78:	6831      	ldr	r1, [r6, #0]
 8009e7a:	f851 5b04 	ldr.w	r5, [r1], #4
 8009e7e:	d402      	bmi.n	8009e86 <_printf_i+0x186>
 8009e80:	065f      	lsls	r7, r3, #25
 8009e82:	bf48      	it	mi
 8009e84:	b2ad      	uxthmi	r5, r5
 8009e86:	6031      	str	r1, [r6, #0]
 8009e88:	07d9      	lsls	r1, r3, #31
 8009e8a:	bf44      	itt	mi
 8009e8c:	f043 0320 	orrmi.w	r3, r3, #32
 8009e90:	6023      	strmi	r3, [r4, #0]
 8009e92:	b11d      	cbz	r5, 8009e9c <_printf_i+0x19c>
 8009e94:	2310      	movs	r3, #16
 8009e96:	e7ad      	b.n	8009df4 <_printf_i+0xf4>
 8009e98:	4826      	ldr	r0, [pc, #152]	@ (8009f34 <_printf_i+0x234>)
 8009e9a:	e7e9      	b.n	8009e70 <_printf_i+0x170>
 8009e9c:	6823      	ldr	r3, [r4, #0]
 8009e9e:	f023 0320 	bic.w	r3, r3, #32
 8009ea2:	6023      	str	r3, [r4, #0]
 8009ea4:	e7f6      	b.n	8009e94 <_printf_i+0x194>
 8009ea6:	4616      	mov	r6, r2
 8009ea8:	e7bd      	b.n	8009e26 <_printf_i+0x126>
 8009eaa:	6833      	ldr	r3, [r6, #0]
 8009eac:	6825      	ldr	r5, [r4, #0]
 8009eae:	1d18      	adds	r0, r3, #4
 8009eb0:	6961      	ldr	r1, [r4, #20]
 8009eb2:	6030      	str	r0, [r6, #0]
 8009eb4:	062e      	lsls	r6, r5, #24
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	d501      	bpl.n	8009ebe <_printf_i+0x1be>
 8009eba:	6019      	str	r1, [r3, #0]
 8009ebc:	e002      	b.n	8009ec4 <_printf_i+0x1c4>
 8009ebe:	0668      	lsls	r0, r5, #25
 8009ec0:	d5fb      	bpl.n	8009eba <_printf_i+0x1ba>
 8009ec2:	8019      	strh	r1, [r3, #0]
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	4616      	mov	r6, r2
 8009ec8:	6123      	str	r3, [r4, #16]
 8009eca:	e7bc      	b.n	8009e46 <_printf_i+0x146>
 8009ecc:	6833      	ldr	r3, [r6, #0]
 8009ece:	2100      	movs	r1, #0
 8009ed0:	1d1a      	adds	r2, r3, #4
 8009ed2:	6032      	str	r2, [r6, #0]
 8009ed4:	681e      	ldr	r6, [r3, #0]
 8009ed6:	6862      	ldr	r2, [r4, #4]
 8009ed8:	4630      	mov	r0, r6
 8009eda:	f000 fa99 	bl	800a410 <memchr>
 8009ede:	b108      	cbz	r0, 8009ee4 <_printf_i+0x1e4>
 8009ee0:	1b80      	subs	r0, r0, r6
 8009ee2:	6060      	str	r0, [r4, #4]
 8009ee4:	6863      	ldr	r3, [r4, #4]
 8009ee6:	6123      	str	r3, [r4, #16]
 8009ee8:	2300      	movs	r3, #0
 8009eea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009eee:	e7aa      	b.n	8009e46 <_printf_i+0x146>
 8009ef0:	6923      	ldr	r3, [r4, #16]
 8009ef2:	4632      	mov	r2, r6
 8009ef4:	4649      	mov	r1, r9
 8009ef6:	4640      	mov	r0, r8
 8009ef8:	47d0      	blx	sl
 8009efa:	3001      	adds	r0, #1
 8009efc:	d0ad      	beq.n	8009e5a <_printf_i+0x15a>
 8009efe:	6823      	ldr	r3, [r4, #0]
 8009f00:	079b      	lsls	r3, r3, #30
 8009f02:	d413      	bmi.n	8009f2c <_printf_i+0x22c>
 8009f04:	68e0      	ldr	r0, [r4, #12]
 8009f06:	9b03      	ldr	r3, [sp, #12]
 8009f08:	4298      	cmp	r0, r3
 8009f0a:	bfb8      	it	lt
 8009f0c:	4618      	movlt	r0, r3
 8009f0e:	e7a6      	b.n	8009e5e <_printf_i+0x15e>
 8009f10:	2301      	movs	r3, #1
 8009f12:	4632      	mov	r2, r6
 8009f14:	4649      	mov	r1, r9
 8009f16:	4640      	mov	r0, r8
 8009f18:	47d0      	blx	sl
 8009f1a:	3001      	adds	r0, #1
 8009f1c:	d09d      	beq.n	8009e5a <_printf_i+0x15a>
 8009f1e:	3501      	adds	r5, #1
 8009f20:	68e3      	ldr	r3, [r4, #12]
 8009f22:	9903      	ldr	r1, [sp, #12]
 8009f24:	1a5b      	subs	r3, r3, r1
 8009f26:	42ab      	cmp	r3, r5
 8009f28:	dcf2      	bgt.n	8009f10 <_printf_i+0x210>
 8009f2a:	e7eb      	b.n	8009f04 <_printf_i+0x204>
 8009f2c:	2500      	movs	r5, #0
 8009f2e:	f104 0619 	add.w	r6, r4, #25
 8009f32:	e7f5      	b.n	8009f20 <_printf_i+0x220>
 8009f34:	0800a69d 	.word	0x0800a69d
 8009f38:	0800a6ae 	.word	0x0800a6ae

08009f3c <__sflush_r>:
 8009f3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f44:	0716      	lsls	r6, r2, #28
 8009f46:	4605      	mov	r5, r0
 8009f48:	460c      	mov	r4, r1
 8009f4a:	d454      	bmi.n	8009ff6 <__sflush_r+0xba>
 8009f4c:	684b      	ldr	r3, [r1, #4]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	dc02      	bgt.n	8009f58 <__sflush_r+0x1c>
 8009f52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	dd48      	ble.n	8009fea <__sflush_r+0xae>
 8009f58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009f5a:	2e00      	cmp	r6, #0
 8009f5c:	d045      	beq.n	8009fea <__sflush_r+0xae>
 8009f5e:	2300      	movs	r3, #0
 8009f60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009f64:	682f      	ldr	r7, [r5, #0]
 8009f66:	6a21      	ldr	r1, [r4, #32]
 8009f68:	602b      	str	r3, [r5, #0]
 8009f6a:	d030      	beq.n	8009fce <__sflush_r+0x92>
 8009f6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009f6e:	89a3      	ldrh	r3, [r4, #12]
 8009f70:	0759      	lsls	r1, r3, #29
 8009f72:	d505      	bpl.n	8009f80 <__sflush_r+0x44>
 8009f74:	6863      	ldr	r3, [r4, #4]
 8009f76:	1ad2      	subs	r2, r2, r3
 8009f78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009f7a:	b10b      	cbz	r3, 8009f80 <__sflush_r+0x44>
 8009f7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009f7e:	1ad2      	subs	r2, r2, r3
 8009f80:	2300      	movs	r3, #0
 8009f82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009f84:	6a21      	ldr	r1, [r4, #32]
 8009f86:	4628      	mov	r0, r5
 8009f88:	47b0      	blx	r6
 8009f8a:	1c43      	adds	r3, r0, #1
 8009f8c:	89a3      	ldrh	r3, [r4, #12]
 8009f8e:	d106      	bne.n	8009f9e <__sflush_r+0x62>
 8009f90:	6829      	ldr	r1, [r5, #0]
 8009f92:	291d      	cmp	r1, #29
 8009f94:	d82b      	bhi.n	8009fee <__sflush_r+0xb2>
 8009f96:	4a2a      	ldr	r2, [pc, #168]	@ (800a040 <__sflush_r+0x104>)
 8009f98:	40ca      	lsrs	r2, r1
 8009f9a:	07d6      	lsls	r6, r2, #31
 8009f9c:	d527      	bpl.n	8009fee <__sflush_r+0xb2>
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	04d9      	lsls	r1, r3, #19
 8009fa2:	6062      	str	r2, [r4, #4]
 8009fa4:	6922      	ldr	r2, [r4, #16]
 8009fa6:	6022      	str	r2, [r4, #0]
 8009fa8:	d504      	bpl.n	8009fb4 <__sflush_r+0x78>
 8009faa:	1c42      	adds	r2, r0, #1
 8009fac:	d101      	bne.n	8009fb2 <__sflush_r+0x76>
 8009fae:	682b      	ldr	r3, [r5, #0]
 8009fb0:	b903      	cbnz	r3, 8009fb4 <__sflush_r+0x78>
 8009fb2:	6560      	str	r0, [r4, #84]	@ 0x54
 8009fb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009fb6:	602f      	str	r7, [r5, #0]
 8009fb8:	b1b9      	cbz	r1, 8009fea <__sflush_r+0xae>
 8009fba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009fbe:	4299      	cmp	r1, r3
 8009fc0:	d002      	beq.n	8009fc8 <__sflush_r+0x8c>
 8009fc2:	4628      	mov	r0, r5
 8009fc4:	f000 fa32 	bl	800a42c <_free_r>
 8009fc8:	2300      	movs	r3, #0
 8009fca:	6363      	str	r3, [r4, #52]	@ 0x34
 8009fcc:	e00d      	b.n	8009fea <__sflush_r+0xae>
 8009fce:	2301      	movs	r3, #1
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	47b0      	blx	r6
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	1c50      	adds	r0, r2, #1
 8009fd8:	d1c9      	bne.n	8009f6e <__sflush_r+0x32>
 8009fda:	682b      	ldr	r3, [r5, #0]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d0c6      	beq.n	8009f6e <__sflush_r+0x32>
 8009fe0:	2b1d      	cmp	r3, #29
 8009fe2:	d001      	beq.n	8009fe8 <__sflush_r+0xac>
 8009fe4:	2b16      	cmp	r3, #22
 8009fe6:	d11d      	bne.n	800a024 <__sflush_r+0xe8>
 8009fe8:	602f      	str	r7, [r5, #0]
 8009fea:	2000      	movs	r0, #0
 8009fec:	e021      	b.n	800a032 <__sflush_r+0xf6>
 8009fee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ff2:	b21b      	sxth	r3, r3
 8009ff4:	e01a      	b.n	800a02c <__sflush_r+0xf0>
 8009ff6:	690f      	ldr	r7, [r1, #16]
 8009ff8:	2f00      	cmp	r7, #0
 8009ffa:	d0f6      	beq.n	8009fea <__sflush_r+0xae>
 8009ffc:	0793      	lsls	r3, r2, #30
 8009ffe:	680e      	ldr	r6, [r1, #0]
 800a000:	600f      	str	r7, [r1, #0]
 800a002:	bf0c      	ite	eq
 800a004:	694b      	ldreq	r3, [r1, #20]
 800a006:	2300      	movne	r3, #0
 800a008:	eba6 0807 	sub.w	r8, r6, r7
 800a00c:	608b      	str	r3, [r1, #8]
 800a00e:	f1b8 0f00 	cmp.w	r8, #0
 800a012:	ddea      	ble.n	8009fea <__sflush_r+0xae>
 800a014:	4643      	mov	r3, r8
 800a016:	463a      	mov	r2, r7
 800a018:	6a21      	ldr	r1, [r4, #32]
 800a01a:	4628      	mov	r0, r5
 800a01c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a01e:	47b0      	blx	r6
 800a020:	2800      	cmp	r0, #0
 800a022:	dc08      	bgt.n	800a036 <__sflush_r+0xfa>
 800a024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a028:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a02c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a030:	81a3      	strh	r3, [r4, #12]
 800a032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a036:	4407      	add	r7, r0
 800a038:	eba8 0800 	sub.w	r8, r8, r0
 800a03c:	e7e7      	b.n	800a00e <__sflush_r+0xd2>
 800a03e:	bf00      	nop
 800a040:	20400001 	.word	0x20400001

0800a044 <_fflush_r>:
 800a044:	b538      	push	{r3, r4, r5, lr}
 800a046:	690b      	ldr	r3, [r1, #16]
 800a048:	4605      	mov	r5, r0
 800a04a:	460c      	mov	r4, r1
 800a04c:	b913      	cbnz	r3, 800a054 <_fflush_r+0x10>
 800a04e:	2500      	movs	r5, #0
 800a050:	4628      	mov	r0, r5
 800a052:	bd38      	pop	{r3, r4, r5, pc}
 800a054:	b118      	cbz	r0, 800a05e <_fflush_r+0x1a>
 800a056:	6a03      	ldr	r3, [r0, #32]
 800a058:	b90b      	cbnz	r3, 800a05e <_fflush_r+0x1a>
 800a05a:	f7ff fb13 	bl	8009684 <__sinit>
 800a05e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d0f3      	beq.n	800a04e <_fflush_r+0xa>
 800a066:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a068:	07d0      	lsls	r0, r2, #31
 800a06a:	d404      	bmi.n	800a076 <_fflush_r+0x32>
 800a06c:	0599      	lsls	r1, r3, #22
 800a06e:	d402      	bmi.n	800a076 <_fflush_r+0x32>
 800a070:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a072:	f7ff fbe0 	bl	8009836 <__retarget_lock_acquire_recursive>
 800a076:	4628      	mov	r0, r5
 800a078:	4621      	mov	r1, r4
 800a07a:	f7ff ff5f 	bl	8009f3c <__sflush_r>
 800a07e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a080:	4605      	mov	r5, r0
 800a082:	07da      	lsls	r2, r3, #31
 800a084:	d4e4      	bmi.n	800a050 <_fflush_r+0xc>
 800a086:	89a3      	ldrh	r3, [r4, #12]
 800a088:	059b      	lsls	r3, r3, #22
 800a08a:	d4e1      	bmi.n	800a050 <_fflush_r+0xc>
 800a08c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a08e:	f7ff fbd3 	bl	8009838 <__retarget_lock_release_recursive>
 800a092:	e7dd      	b.n	800a050 <_fflush_r+0xc>

0800a094 <__malloc_lock>:
 800a094:	4801      	ldr	r0, [pc, #4]	@ (800a09c <__malloc_lock+0x8>)
 800a096:	f7ff bbce 	b.w	8009836 <__retarget_lock_acquire_recursive>
 800a09a:	bf00      	nop
 800a09c:	20000528 	.word	0x20000528

0800a0a0 <__malloc_unlock>:
 800a0a0:	4801      	ldr	r0, [pc, #4]	@ (800a0a8 <__malloc_unlock+0x8>)
 800a0a2:	f7ff bbc9 	b.w	8009838 <__retarget_lock_release_recursive>
 800a0a6:	bf00      	nop
 800a0a8:	20000528 	.word	0x20000528

0800a0ac <__sread>:
 800a0ac:	b510      	push	{r4, lr}
 800a0ae:	460c      	mov	r4, r1
 800a0b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0b4:	f000 f956 	bl	800a364 <_read_r>
 800a0b8:	2800      	cmp	r0, #0
 800a0ba:	bfab      	itete	ge
 800a0bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a0be:	89a3      	ldrhlt	r3, [r4, #12]
 800a0c0:	181b      	addge	r3, r3, r0
 800a0c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a0c6:	bfac      	ite	ge
 800a0c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a0ca:	81a3      	strhlt	r3, [r4, #12]
 800a0cc:	bd10      	pop	{r4, pc}

0800a0ce <__swrite>:
 800a0ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0d2:	461f      	mov	r7, r3
 800a0d4:	898b      	ldrh	r3, [r1, #12]
 800a0d6:	4605      	mov	r5, r0
 800a0d8:	460c      	mov	r4, r1
 800a0da:	05db      	lsls	r3, r3, #23
 800a0dc:	4616      	mov	r6, r2
 800a0de:	d505      	bpl.n	800a0ec <__swrite+0x1e>
 800a0e0:	2302      	movs	r3, #2
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0e8:	f000 f92a 	bl	800a340 <_lseek_r>
 800a0ec:	89a3      	ldrh	r3, [r4, #12]
 800a0ee:	4632      	mov	r2, r6
 800a0f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a0fa:	81a3      	strh	r3, [r4, #12]
 800a0fc:	463b      	mov	r3, r7
 800a0fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a102:	f000 b951 	b.w	800a3a8 <_write_r>

0800a106 <__sseek>:
 800a106:	b510      	push	{r4, lr}
 800a108:	460c      	mov	r4, r1
 800a10a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a10e:	f000 f917 	bl	800a340 <_lseek_r>
 800a112:	1c43      	adds	r3, r0, #1
 800a114:	89a3      	ldrh	r3, [r4, #12]
 800a116:	bf15      	itete	ne
 800a118:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a11a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a11e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a122:	81a3      	strheq	r3, [r4, #12]
 800a124:	bf18      	it	ne
 800a126:	81a3      	strhne	r3, [r4, #12]
 800a128:	bd10      	pop	{r4, pc}

0800a12a <__sclose>:
 800a12a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a12e:	f000 b94d 	b.w	800a3cc <_close_r>

0800a132 <__swbuf_r>:
 800a132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a134:	460e      	mov	r6, r1
 800a136:	4614      	mov	r4, r2
 800a138:	4605      	mov	r5, r0
 800a13a:	b118      	cbz	r0, 800a144 <__swbuf_r+0x12>
 800a13c:	6a03      	ldr	r3, [r0, #32]
 800a13e:	b90b      	cbnz	r3, 800a144 <__swbuf_r+0x12>
 800a140:	f7ff faa0 	bl	8009684 <__sinit>
 800a144:	69a3      	ldr	r3, [r4, #24]
 800a146:	60a3      	str	r3, [r4, #8]
 800a148:	89a3      	ldrh	r3, [r4, #12]
 800a14a:	071a      	lsls	r2, r3, #28
 800a14c:	d501      	bpl.n	800a152 <__swbuf_r+0x20>
 800a14e:	6923      	ldr	r3, [r4, #16]
 800a150:	b943      	cbnz	r3, 800a164 <__swbuf_r+0x32>
 800a152:	4621      	mov	r1, r4
 800a154:	4628      	mov	r0, r5
 800a156:	f000 f82b 	bl	800a1b0 <__swsetup_r>
 800a15a:	b118      	cbz	r0, 800a164 <__swbuf_r+0x32>
 800a15c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a160:	4638      	mov	r0, r7
 800a162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a164:	6823      	ldr	r3, [r4, #0]
 800a166:	b2f6      	uxtb	r6, r6
 800a168:	6922      	ldr	r2, [r4, #16]
 800a16a:	4637      	mov	r7, r6
 800a16c:	1a98      	subs	r0, r3, r2
 800a16e:	6963      	ldr	r3, [r4, #20]
 800a170:	4283      	cmp	r3, r0
 800a172:	dc05      	bgt.n	800a180 <__swbuf_r+0x4e>
 800a174:	4621      	mov	r1, r4
 800a176:	4628      	mov	r0, r5
 800a178:	f7ff ff64 	bl	800a044 <_fflush_r>
 800a17c:	2800      	cmp	r0, #0
 800a17e:	d1ed      	bne.n	800a15c <__swbuf_r+0x2a>
 800a180:	68a3      	ldr	r3, [r4, #8]
 800a182:	3b01      	subs	r3, #1
 800a184:	60a3      	str	r3, [r4, #8]
 800a186:	6823      	ldr	r3, [r4, #0]
 800a188:	1c5a      	adds	r2, r3, #1
 800a18a:	6022      	str	r2, [r4, #0]
 800a18c:	701e      	strb	r6, [r3, #0]
 800a18e:	1c43      	adds	r3, r0, #1
 800a190:	6962      	ldr	r2, [r4, #20]
 800a192:	429a      	cmp	r2, r3
 800a194:	d004      	beq.n	800a1a0 <__swbuf_r+0x6e>
 800a196:	89a3      	ldrh	r3, [r4, #12]
 800a198:	07db      	lsls	r3, r3, #31
 800a19a:	d5e1      	bpl.n	800a160 <__swbuf_r+0x2e>
 800a19c:	2e0a      	cmp	r6, #10
 800a19e:	d1df      	bne.n	800a160 <__swbuf_r+0x2e>
 800a1a0:	4621      	mov	r1, r4
 800a1a2:	4628      	mov	r0, r5
 800a1a4:	f7ff ff4e 	bl	800a044 <_fflush_r>
 800a1a8:	2800      	cmp	r0, #0
 800a1aa:	d0d9      	beq.n	800a160 <__swbuf_r+0x2e>
 800a1ac:	e7d6      	b.n	800a15c <__swbuf_r+0x2a>
	...

0800a1b0 <__swsetup_r>:
 800a1b0:	b538      	push	{r3, r4, r5, lr}
 800a1b2:	4b29      	ldr	r3, [pc, #164]	@ (800a258 <__swsetup_r+0xa8>)
 800a1b4:	4605      	mov	r5, r0
 800a1b6:	460c      	mov	r4, r1
 800a1b8:	6818      	ldr	r0, [r3, #0]
 800a1ba:	b118      	cbz	r0, 800a1c4 <__swsetup_r+0x14>
 800a1bc:	6a03      	ldr	r3, [r0, #32]
 800a1be:	b90b      	cbnz	r3, 800a1c4 <__swsetup_r+0x14>
 800a1c0:	f7ff fa60 	bl	8009684 <__sinit>
 800a1c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1c8:	0719      	lsls	r1, r3, #28
 800a1ca:	d422      	bmi.n	800a212 <__swsetup_r+0x62>
 800a1cc:	06da      	lsls	r2, r3, #27
 800a1ce:	d407      	bmi.n	800a1e0 <__swsetup_r+0x30>
 800a1d0:	2209      	movs	r2, #9
 800a1d2:	602a      	str	r2, [r5, #0]
 800a1d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a1dc:	81a3      	strh	r3, [r4, #12]
 800a1de:	e033      	b.n	800a248 <__swsetup_r+0x98>
 800a1e0:	0758      	lsls	r0, r3, #29
 800a1e2:	d512      	bpl.n	800a20a <__swsetup_r+0x5a>
 800a1e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a1e6:	b141      	cbz	r1, 800a1fa <__swsetup_r+0x4a>
 800a1e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a1ec:	4299      	cmp	r1, r3
 800a1ee:	d002      	beq.n	800a1f6 <__swsetup_r+0x46>
 800a1f0:	4628      	mov	r0, r5
 800a1f2:	f000 f91b 	bl	800a42c <_free_r>
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a1fa:	89a3      	ldrh	r3, [r4, #12]
 800a1fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a200:	81a3      	strh	r3, [r4, #12]
 800a202:	2300      	movs	r3, #0
 800a204:	6063      	str	r3, [r4, #4]
 800a206:	6923      	ldr	r3, [r4, #16]
 800a208:	6023      	str	r3, [r4, #0]
 800a20a:	89a3      	ldrh	r3, [r4, #12]
 800a20c:	f043 0308 	orr.w	r3, r3, #8
 800a210:	81a3      	strh	r3, [r4, #12]
 800a212:	6923      	ldr	r3, [r4, #16]
 800a214:	b94b      	cbnz	r3, 800a22a <__swsetup_r+0x7a>
 800a216:	89a3      	ldrh	r3, [r4, #12]
 800a218:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a21c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a220:	d003      	beq.n	800a22a <__swsetup_r+0x7a>
 800a222:	4621      	mov	r1, r4
 800a224:	4628      	mov	r0, r5
 800a226:	f000 f83e 	bl	800a2a6 <__smakebuf_r>
 800a22a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a22e:	f013 0201 	ands.w	r2, r3, #1
 800a232:	d00a      	beq.n	800a24a <__swsetup_r+0x9a>
 800a234:	2200      	movs	r2, #0
 800a236:	60a2      	str	r2, [r4, #8]
 800a238:	6962      	ldr	r2, [r4, #20]
 800a23a:	4252      	negs	r2, r2
 800a23c:	61a2      	str	r2, [r4, #24]
 800a23e:	6922      	ldr	r2, [r4, #16]
 800a240:	b942      	cbnz	r2, 800a254 <__swsetup_r+0xa4>
 800a242:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a246:	d1c5      	bne.n	800a1d4 <__swsetup_r+0x24>
 800a248:	bd38      	pop	{r3, r4, r5, pc}
 800a24a:	0799      	lsls	r1, r3, #30
 800a24c:	bf58      	it	pl
 800a24e:	6962      	ldrpl	r2, [r4, #20]
 800a250:	60a2      	str	r2, [r4, #8]
 800a252:	e7f4      	b.n	800a23e <__swsetup_r+0x8e>
 800a254:	2000      	movs	r0, #0
 800a256:	e7f7      	b.n	800a248 <__swsetup_r+0x98>
 800a258:	20000034 	.word	0x20000034

0800a25c <__swhatbuf_r>:
 800a25c:	b570      	push	{r4, r5, r6, lr}
 800a25e:	460c      	mov	r4, r1
 800a260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a264:	b096      	sub	sp, #88	@ 0x58
 800a266:	4615      	mov	r5, r2
 800a268:	2900      	cmp	r1, #0
 800a26a:	461e      	mov	r6, r3
 800a26c:	da0c      	bge.n	800a288 <__swhatbuf_r+0x2c>
 800a26e:	89a3      	ldrh	r3, [r4, #12]
 800a270:	2100      	movs	r1, #0
 800a272:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a276:	bf14      	ite	ne
 800a278:	2340      	movne	r3, #64	@ 0x40
 800a27a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a27e:	2000      	movs	r0, #0
 800a280:	6031      	str	r1, [r6, #0]
 800a282:	602b      	str	r3, [r5, #0]
 800a284:	b016      	add	sp, #88	@ 0x58
 800a286:	bd70      	pop	{r4, r5, r6, pc}
 800a288:	466a      	mov	r2, sp
 800a28a:	f000 f8af 	bl	800a3ec <_fstat_r>
 800a28e:	2800      	cmp	r0, #0
 800a290:	dbed      	blt.n	800a26e <__swhatbuf_r+0x12>
 800a292:	9901      	ldr	r1, [sp, #4]
 800a294:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a298:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a29c:	4259      	negs	r1, r3
 800a29e:	4159      	adcs	r1, r3
 800a2a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a2a4:	e7eb      	b.n	800a27e <__swhatbuf_r+0x22>

0800a2a6 <__smakebuf_r>:
 800a2a6:	898b      	ldrh	r3, [r1, #12]
 800a2a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2aa:	079d      	lsls	r5, r3, #30
 800a2ac:	4606      	mov	r6, r0
 800a2ae:	460c      	mov	r4, r1
 800a2b0:	d507      	bpl.n	800a2c2 <__smakebuf_r+0x1c>
 800a2b2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a2b6:	6023      	str	r3, [r4, #0]
 800a2b8:	6123      	str	r3, [r4, #16]
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	6163      	str	r3, [r4, #20]
 800a2be:	b003      	add	sp, #12
 800a2c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2c2:	ab01      	add	r3, sp, #4
 800a2c4:	466a      	mov	r2, sp
 800a2c6:	f7ff ffc9 	bl	800a25c <__swhatbuf_r>
 800a2ca:	9f00      	ldr	r7, [sp, #0]
 800a2cc:	4605      	mov	r5, r0
 800a2ce:	4630      	mov	r0, r6
 800a2d0:	4639      	mov	r1, r7
 800a2d2:	f7ff fc23 	bl	8009b1c <_malloc_r>
 800a2d6:	b948      	cbnz	r0, 800a2ec <__smakebuf_r+0x46>
 800a2d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2dc:	059a      	lsls	r2, r3, #22
 800a2de:	d4ee      	bmi.n	800a2be <__smakebuf_r+0x18>
 800a2e0:	f023 0303 	bic.w	r3, r3, #3
 800a2e4:	f043 0302 	orr.w	r3, r3, #2
 800a2e8:	81a3      	strh	r3, [r4, #12]
 800a2ea:	e7e2      	b.n	800a2b2 <__smakebuf_r+0xc>
 800a2ec:	89a3      	ldrh	r3, [r4, #12]
 800a2ee:	6020      	str	r0, [r4, #0]
 800a2f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2f4:	81a3      	strh	r3, [r4, #12]
 800a2f6:	9b01      	ldr	r3, [sp, #4]
 800a2f8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a2fc:	b15b      	cbz	r3, 800a316 <__smakebuf_r+0x70>
 800a2fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a302:	4630      	mov	r0, r6
 800a304:	f000 f80c 	bl	800a320 <_isatty_r>
 800a308:	b128      	cbz	r0, 800a316 <__smakebuf_r+0x70>
 800a30a:	89a3      	ldrh	r3, [r4, #12]
 800a30c:	f023 0303 	bic.w	r3, r3, #3
 800a310:	f043 0301 	orr.w	r3, r3, #1
 800a314:	81a3      	strh	r3, [r4, #12]
 800a316:	89a3      	ldrh	r3, [r4, #12]
 800a318:	431d      	orrs	r5, r3
 800a31a:	81a5      	strh	r5, [r4, #12]
 800a31c:	e7cf      	b.n	800a2be <__smakebuf_r+0x18>
	...

0800a320 <_isatty_r>:
 800a320:	b538      	push	{r3, r4, r5, lr}
 800a322:	2300      	movs	r3, #0
 800a324:	4d05      	ldr	r5, [pc, #20]	@ (800a33c <_isatty_r+0x1c>)
 800a326:	4604      	mov	r4, r0
 800a328:	4608      	mov	r0, r1
 800a32a:	602b      	str	r3, [r5, #0]
 800a32c:	f7f7 f98d 	bl	800164a <_isatty>
 800a330:	1c43      	adds	r3, r0, #1
 800a332:	d102      	bne.n	800a33a <_isatty_r+0x1a>
 800a334:	682b      	ldr	r3, [r5, #0]
 800a336:	b103      	cbz	r3, 800a33a <_isatty_r+0x1a>
 800a338:	6023      	str	r3, [r4, #0]
 800a33a:	bd38      	pop	{r3, r4, r5, pc}
 800a33c:	20000534 	.word	0x20000534

0800a340 <_lseek_r>:
 800a340:	b538      	push	{r3, r4, r5, lr}
 800a342:	4604      	mov	r4, r0
 800a344:	4d06      	ldr	r5, [pc, #24]	@ (800a360 <_lseek_r+0x20>)
 800a346:	4608      	mov	r0, r1
 800a348:	4611      	mov	r1, r2
 800a34a:	2200      	movs	r2, #0
 800a34c:	602a      	str	r2, [r5, #0]
 800a34e:	461a      	mov	r2, r3
 800a350:	f7f7 f986 	bl	8001660 <_lseek>
 800a354:	1c43      	adds	r3, r0, #1
 800a356:	d102      	bne.n	800a35e <_lseek_r+0x1e>
 800a358:	682b      	ldr	r3, [r5, #0]
 800a35a:	b103      	cbz	r3, 800a35e <_lseek_r+0x1e>
 800a35c:	6023      	str	r3, [r4, #0]
 800a35e:	bd38      	pop	{r3, r4, r5, pc}
 800a360:	20000534 	.word	0x20000534

0800a364 <_read_r>:
 800a364:	b538      	push	{r3, r4, r5, lr}
 800a366:	4604      	mov	r4, r0
 800a368:	4d06      	ldr	r5, [pc, #24]	@ (800a384 <_read_r+0x20>)
 800a36a:	4608      	mov	r0, r1
 800a36c:	4611      	mov	r1, r2
 800a36e:	2200      	movs	r2, #0
 800a370:	602a      	str	r2, [r5, #0]
 800a372:	461a      	mov	r2, r3
 800a374:	f7f7 f930 	bl	80015d8 <_read>
 800a378:	1c43      	adds	r3, r0, #1
 800a37a:	d102      	bne.n	800a382 <_read_r+0x1e>
 800a37c:	682b      	ldr	r3, [r5, #0]
 800a37e:	b103      	cbz	r3, 800a382 <_read_r+0x1e>
 800a380:	6023      	str	r3, [r4, #0]
 800a382:	bd38      	pop	{r3, r4, r5, pc}
 800a384:	20000534 	.word	0x20000534

0800a388 <_sbrk_r>:
 800a388:	b538      	push	{r3, r4, r5, lr}
 800a38a:	2300      	movs	r3, #0
 800a38c:	4d05      	ldr	r5, [pc, #20]	@ (800a3a4 <_sbrk_r+0x1c>)
 800a38e:	4604      	mov	r4, r0
 800a390:	4608      	mov	r0, r1
 800a392:	602b      	str	r3, [r5, #0]
 800a394:	f7f7 f972 	bl	800167c <_sbrk>
 800a398:	1c43      	adds	r3, r0, #1
 800a39a:	d102      	bne.n	800a3a2 <_sbrk_r+0x1a>
 800a39c:	682b      	ldr	r3, [r5, #0]
 800a39e:	b103      	cbz	r3, 800a3a2 <_sbrk_r+0x1a>
 800a3a0:	6023      	str	r3, [r4, #0]
 800a3a2:	bd38      	pop	{r3, r4, r5, pc}
 800a3a4:	20000534 	.word	0x20000534

0800a3a8 <_write_r>:
 800a3a8:	b538      	push	{r3, r4, r5, lr}
 800a3aa:	4604      	mov	r4, r0
 800a3ac:	4d06      	ldr	r5, [pc, #24]	@ (800a3c8 <_write_r+0x20>)
 800a3ae:	4608      	mov	r0, r1
 800a3b0:	4611      	mov	r1, r2
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	602a      	str	r2, [r5, #0]
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	f7f6 fe3c 	bl	8001034 <_write>
 800a3bc:	1c43      	adds	r3, r0, #1
 800a3be:	d102      	bne.n	800a3c6 <_write_r+0x1e>
 800a3c0:	682b      	ldr	r3, [r5, #0]
 800a3c2:	b103      	cbz	r3, 800a3c6 <_write_r+0x1e>
 800a3c4:	6023      	str	r3, [r4, #0]
 800a3c6:	bd38      	pop	{r3, r4, r5, pc}
 800a3c8:	20000534 	.word	0x20000534

0800a3cc <_close_r>:
 800a3cc:	b538      	push	{r3, r4, r5, lr}
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	4d05      	ldr	r5, [pc, #20]	@ (800a3e8 <_close_r+0x1c>)
 800a3d2:	4604      	mov	r4, r0
 800a3d4:	4608      	mov	r0, r1
 800a3d6:	602b      	str	r3, [r5, #0]
 800a3d8:	f7f7 f91b 	bl	8001612 <_close>
 800a3dc:	1c43      	adds	r3, r0, #1
 800a3de:	d102      	bne.n	800a3e6 <_close_r+0x1a>
 800a3e0:	682b      	ldr	r3, [r5, #0]
 800a3e2:	b103      	cbz	r3, 800a3e6 <_close_r+0x1a>
 800a3e4:	6023      	str	r3, [r4, #0]
 800a3e6:	bd38      	pop	{r3, r4, r5, pc}
 800a3e8:	20000534 	.word	0x20000534

0800a3ec <_fstat_r>:
 800a3ec:	b538      	push	{r3, r4, r5, lr}
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	4d06      	ldr	r5, [pc, #24]	@ (800a40c <_fstat_r+0x20>)
 800a3f2:	4604      	mov	r4, r0
 800a3f4:	4608      	mov	r0, r1
 800a3f6:	4611      	mov	r1, r2
 800a3f8:	602b      	str	r3, [r5, #0]
 800a3fa:	f7f7 f916 	bl	800162a <_fstat>
 800a3fe:	1c43      	adds	r3, r0, #1
 800a400:	d102      	bne.n	800a408 <_fstat_r+0x1c>
 800a402:	682b      	ldr	r3, [r5, #0]
 800a404:	b103      	cbz	r3, 800a408 <_fstat_r+0x1c>
 800a406:	6023      	str	r3, [r4, #0]
 800a408:	bd38      	pop	{r3, r4, r5, pc}
 800a40a:	bf00      	nop
 800a40c:	20000534 	.word	0x20000534

0800a410 <memchr>:
 800a410:	b2c9      	uxtb	r1, r1
 800a412:	4603      	mov	r3, r0
 800a414:	4402      	add	r2, r0
 800a416:	b510      	push	{r4, lr}
 800a418:	4293      	cmp	r3, r2
 800a41a:	4618      	mov	r0, r3
 800a41c:	d101      	bne.n	800a422 <memchr+0x12>
 800a41e:	2000      	movs	r0, #0
 800a420:	e003      	b.n	800a42a <memchr+0x1a>
 800a422:	7804      	ldrb	r4, [r0, #0]
 800a424:	3301      	adds	r3, #1
 800a426:	428c      	cmp	r4, r1
 800a428:	d1f6      	bne.n	800a418 <memchr+0x8>
 800a42a:	bd10      	pop	{r4, pc}

0800a42c <_free_r>:
 800a42c:	b538      	push	{r3, r4, r5, lr}
 800a42e:	4605      	mov	r5, r0
 800a430:	2900      	cmp	r1, #0
 800a432:	d041      	beq.n	800a4b8 <_free_r+0x8c>
 800a434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a438:	1f0c      	subs	r4, r1, #4
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	bfb8      	it	lt
 800a43e:	18e4      	addlt	r4, r4, r3
 800a440:	f7ff fe28 	bl	800a094 <__malloc_lock>
 800a444:	4a1d      	ldr	r2, [pc, #116]	@ (800a4bc <_free_r+0x90>)
 800a446:	6813      	ldr	r3, [r2, #0]
 800a448:	b933      	cbnz	r3, 800a458 <_free_r+0x2c>
 800a44a:	6063      	str	r3, [r4, #4]
 800a44c:	6014      	str	r4, [r2, #0]
 800a44e:	4628      	mov	r0, r5
 800a450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a454:	f7ff be24 	b.w	800a0a0 <__malloc_unlock>
 800a458:	42a3      	cmp	r3, r4
 800a45a:	d908      	bls.n	800a46e <_free_r+0x42>
 800a45c:	6820      	ldr	r0, [r4, #0]
 800a45e:	1821      	adds	r1, r4, r0
 800a460:	428b      	cmp	r3, r1
 800a462:	bf01      	itttt	eq
 800a464:	6819      	ldreq	r1, [r3, #0]
 800a466:	685b      	ldreq	r3, [r3, #4]
 800a468:	1809      	addeq	r1, r1, r0
 800a46a:	6021      	streq	r1, [r4, #0]
 800a46c:	e7ed      	b.n	800a44a <_free_r+0x1e>
 800a46e:	461a      	mov	r2, r3
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	b10b      	cbz	r3, 800a478 <_free_r+0x4c>
 800a474:	42a3      	cmp	r3, r4
 800a476:	d9fa      	bls.n	800a46e <_free_r+0x42>
 800a478:	6811      	ldr	r1, [r2, #0]
 800a47a:	1850      	adds	r0, r2, r1
 800a47c:	42a0      	cmp	r0, r4
 800a47e:	d10b      	bne.n	800a498 <_free_r+0x6c>
 800a480:	6820      	ldr	r0, [r4, #0]
 800a482:	4401      	add	r1, r0
 800a484:	1850      	adds	r0, r2, r1
 800a486:	6011      	str	r1, [r2, #0]
 800a488:	4283      	cmp	r3, r0
 800a48a:	d1e0      	bne.n	800a44e <_free_r+0x22>
 800a48c:	6818      	ldr	r0, [r3, #0]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	4408      	add	r0, r1
 800a492:	6053      	str	r3, [r2, #4]
 800a494:	6010      	str	r0, [r2, #0]
 800a496:	e7da      	b.n	800a44e <_free_r+0x22>
 800a498:	d902      	bls.n	800a4a0 <_free_r+0x74>
 800a49a:	230c      	movs	r3, #12
 800a49c:	602b      	str	r3, [r5, #0]
 800a49e:	e7d6      	b.n	800a44e <_free_r+0x22>
 800a4a0:	6820      	ldr	r0, [r4, #0]
 800a4a2:	1821      	adds	r1, r4, r0
 800a4a4:	428b      	cmp	r3, r1
 800a4a6:	bf02      	ittt	eq
 800a4a8:	6819      	ldreq	r1, [r3, #0]
 800a4aa:	685b      	ldreq	r3, [r3, #4]
 800a4ac:	1809      	addeq	r1, r1, r0
 800a4ae:	6063      	str	r3, [r4, #4]
 800a4b0:	bf08      	it	eq
 800a4b2:	6021      	streq	r1, [r4, #0]
 800a4b4:	6054      	str	r4, [r2, #4]
 800a4b6:	e7ca      	b.n	800a44e <_free_r+0x22>
 800a4b8:	bd38      	pop	{r3, r4, r5, pc}
 800a4ba:	bf00      	nop
 800a4bc:	20000530 	.word	0x20000530

0800a4c0 <_init>:
 800a4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4c2:	bf00      	nop
 800a4c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4c6:	bc08      	pop	{r3}
 800a4c8:	469e      	mov	lr, r3
 800a4ca:	4770      	bx	lr

0800a4cc <_fini>:
 800a4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ce:	bf00      	nop
 800a4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4d2:	bc08      	pop	{r3}
 800a4d4:	469e      	mov	lr, r3
 800a4d6:	4770      	bx	lr
